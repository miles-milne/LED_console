
led_2048.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002fc0  08002fc0  00003fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a4  080030a4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080030a4  080030a4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a4  080030a4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a4  080030a4  000040a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000078  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000827e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178b  00000000  00000000  0000d2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0000ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000590  00000000  00000000  0000f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000017ef  00000000  00000000  0000f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2f9  00000000  00000000  00010f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad388  00000000  00000000  0001c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c95a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d10  00000000  00000000  000c95e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000cb2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fa8 	.word	0x08002fa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002fa8 	.word	0x08002fa8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b0b6      	sub	sp, #216	@ 0xd8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fbbd 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f8cf 	bl	8000374 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f97b 	bl	80004d0 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80001da:	f000 f92b 	bl	8000434 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  // Turns off some of the debug leds
  HAL_GPIO_WritePin(GPIOC, LED_B_DEBUG, HIGH);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001e4:	4859      	ldr	r0, [pc, #356]	@ (800034c <main+0x184>)
 80001e6:	f000 fe77 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_G_DEBUG, HIGH);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001f0:	4856      	ldr	r0, [pc, #344]	@ (800034c <main+0x184>)
 80001f2:	f000 fe71 	bl	8000ed8 <HAL_GPIO_WritePin>



  // Turns off all multiplexer pins
  HAL_GPIO_WritePin(MUX_PORT, MUX_1, HIGH);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2108      	movs	r1, #8
 80001fa:	4855      	ldr	r0, [pc, #340]	@ (8000350 <main+0x188>)
 80001fc:	f000 fe6c 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_2, HIGH);
 8000200:	2201      	movs	r2, #1
 8000202:	2110      	movs	r1, #16
 8000204:	4852      	ldr	r0, [pc, #328]	@ (8000350 <main+0x188>)
 8000206:	f000 fe67 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_3, HIGH);
 800020a:	2201      	movs	r2, #1
 800020c:	2120      	movs	r1, #32
 800020e:	4850      	ldr	r0, [pc, #320]	@ (8000350 <main+0x188>)
 8000210:	f000 fe62 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_4, HIGH);
 8000214:	2201      	movs	r2, #1
 8000216:	2140      	movs	r1, #64	@ 0x40
 8000218:	484d      	ldr	r0, [pc, #308]	@ (8000350 <main+0x188>)
 800021a:	f000 fe5d 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_5, HIGH);
 800021e:	2201      	movs	r2, #1
 8000220:	2180      	movs	r1, #128	@ 0x80
 8000222:	484b      	ldr	r0, [pc, #300]	@ (8000350 <main+0x188>)
 8000224:	f000 fe58 	bl	8000ed8 <HAL_GPIO_WritePin>

  // LED driver initalization
  TLC_init();
 8000228:	f000 f9e6 	bl	80005f8 <TLC_init>

  // boot-up delay
  // HAL_Delay(100);


  uint32_t status_diff_millis = HAL_GetTick();
 800022c:	f000 fbe8 	bl	8000a00 <HAL_GetTick>
 8000230:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t led_diff_millis = HAL_GetTick();
 8000234:	f000 fbe4 	bl	8000a00 <HAL_GetTick>
 8000238:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
  uint8_t r1 = 5, g1 = 17, b1 = 9;
 800023c:	2305      	movs	r3, #5
 800023e:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8000242:	2311      	movs	r3, #17
 8000244:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8000248:	2309      	movs	r3, #9
 800024a:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd

  uint8_t grid[25] =
 800024e:	4b41      	ldr	r3, [pc, #260]	@ (8000354 <main+0x18c>)
 8000250:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8000254:	461d      	mov	r5, r3
 8000256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025e:	c403      	stmia	r4!, {r0, r1}
 8000260:	7022      	strb	r2, [r4, #0]
	   0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0
  	  };

  uint8_t colours[15] =
 8000262:	4b3d      	ldr	r3, [pc, #244]	@ (8000358 <main+0x190>)
 8000264:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800026a:	c407      	stmia	r4!, {r0, r1, r2}
 800026c:	8023      	strh	r3, [r4, #0]
 800026e:	3402      	adds	r4, #2
 8000270:	0c1b      	lsrs	r3, r3, #16
 8000272:	7023      	strb	r3, [r4, #0]
  uint8_t *row1_buf, *row2_buf, *row3_buf, *row4_buf, *row5_buf;




  uint8_t rainbow_on[17] = {PWM0, 0xFF, 0, 0, 0xFF, 0xFF, 0, 0, 0xFF, 0, 0, 0xFF, 0xFF, 0, 0, 0xFF, 0};
 8000274:	4b39      	ldr	r3, [pc, #228]	@ (800035c <main+0x194>)
 8000276:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	682b      	ldr	r3, [r5, #0]
 8000282:	7023      	strb	r3, [r4, #0]
  uint8_t rainbow_mid[17] = {PWM0, 16, 0, 0, 16, 16, 0, 0, 16, 0, 0, 16, 16, 0, 0, 16, 0};
 8000284:	4b36      	ldr	r3, [pc, #216]	@ (8000360 <main+0x198>)
 8000286:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 800028a:	461d      	mov	r5, r3
 800028c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000290:	682b      	ldr	r3, [r5, #0]
 8000292:	7023      	strb	r3, [r4, #0]
  uint8_t rainbow_dim[17] = {PWM0, 8, 0, 0, 8, 8, 0, 0, 8, 0, 0, 8, 8, 0, 0, 8, 0};
 8000294:	4b33      	ldr	r3, [pc, #204]	@ (8000364 <main+0x19c>)
 8000296:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800029a:	461d      	mov	r5, r3
 800029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a0:	682b      	ldr	r3, [r5, #0]
 80002a2:	7023      	strb	r3, [r4, #0]
  uint8_t all_off[17] = {PWM0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80002a4:	4b30      	ldr	r3, [pc, #192]	@ (8000368 <main+0x1a0>)
 80002a6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	682b      	ldr	r3, [r5, #0]
 80002b2:	7023      	strb	r3, [r4, #0]
  uint8_t all_dim[17] = {PWM0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};
 80002b4:	4b2d      	ldr	r3, [pc, #180]	@ (800036c <main+0x1a4>)
 80002b6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80002ba:	461d      	mov	r5, r3
 80002bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c0:	682b      	ldr	r3, [r5, #0]
 80002c2:	7023      	strb	r3, [r4, #0]

  uint8_t rain1[17] = {PWM0, 32, 0, 0, 100, 30, 0, 20, 20, 0, 0, 32, 0, 0, 24, 12, 0};
 80002c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000370 <main+0x1a8>)
 80002c6:	f107 0414 	add.w	r4, r7, #20
 80002ca:	461d      	mov	r5, r3
 80002cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d0:	682b      	ldr	r3, [r5, #0]
 80002d2:	7023      	strb	r3, [r4, #0]


  row1_buf = rainbow_mid;
 80002d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80002d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  row2_buf = rain1;
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  row3_buf = rainbow_mid;
 80002e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80002e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  row4_buf = all_off;
 80002ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  row5_buf = rainbow_mid;
 80002f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80002f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint8_t* matrix[5] = {row1_buf, row2_buf, row3_buf, row4_buf, row5_buf};
 80002fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000318:	613b      	str	r3, [r7, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	display(matrix);
 800031a:	463b      	mov	r3, r7
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f9fd 	bl	800071c <display>


	if (HAL_GetTick() - status_diff_millis > 1000) {
 8000322:	f000 fb6d 	bl	8000a00 <HAL_GetTick>
 8000326:	4602      	mov	r2, r0
 8000328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000332:	bf8c      	ite	hi
 8000334:	2301      	movhi	r3, #1
 8000336:	2300      	movls	r3, #0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0ed      	beq.n	800031a <main+0x152>
		status_diff_millis = HAL_GetTick();
 800033e:	f000 fb5f 	bl	8000a00 <HAL_GetTick>
 8000342:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		LED_heartbeat();
 8000346:	f000 f9b3 	bl	80006b0 <LED_heartbeat>
	display(matrix);
 800034a:	e7e6      	b.n	800031a <main+0x152>
 800034c:	48000800 	.word	0x48000800
 8000350:	48000400 	.word	0x48000400
 8000354:	08002fc0 	.word	0x08002fc0
 8000358:	08002fdc 	.word	0x08002fdc
 800035c:	08002fec 	.word	0x08002fec
 8000360:	08003000 	.word	0x08003000
 8000364:	08003014 	.word	0x08003014
 8000368:	08003028 	.word	0x08003028
 800036c:	0800303c 	.word	0x0800303c
 8000370:	08003050 	.word	0x08003050

08000374 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b09e      	sub	sp, #120	@ 0x78
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800037e:	2228      	movs	r2, #40	@ 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fde4 	bl	8002f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	463b      	mov	r3, r7
 800039a:	223c      	movs	r2, #60	@ 0x3c
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fdd6 	bl	8002f50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	2301      	movs	r3, #1
 80003aa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2310      	movs	r3, #16
 80003ae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fa0b 	bl	80017d4 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	bf14      	ite	ne
 80003c4:	2301      	movne	r3, #1
 80003c6:	2300      	moveq	r3, #0
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80003ce:	f000 f9e3 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f002 fa2f 	bl	8002850 <HAL_RCC_ClockConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	bf14      	ite	ne
 80003f8:	2301      	movne	r3, #1
 80003fa:	2300      	moveq	r3, #0
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000402:	f000 f9c9 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000406:	2320      	movs	r3, #32
 8000408:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040e:	463b      	mov	r3, r7
 8000410:	4618      	mov	r0, r3
 8000412:	f002 fbed 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	bf14      	ite	ne
 800041c:	2301      	movne	r3, #1
 800041e:	2300      	moveq	r3, #0
 8000420:	b2db      	uxtb	r3, r3
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000426:	f000 f9b7 	bl	8000798 <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3778      	adds	r7, #120	@ 0x78
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 8000438:	4b23      	ldr	r3, [pc, #140]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 800043a:	4a24      	ldr	r2, [pc, #144]	@ (80004cc <_ZL12MX_I2C1_Initv+0x98>)
 800043c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x0000020B;
 800043e:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 8000440:	f240 220b 	movw	r2, #523	@ 0x20b
 8000444:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8000446:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044c:	4b1e      	ldr	r3, [pc, #120]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 800044e:	2201      	movs	r2, #1
 8000450:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8000458:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 800045a:	2200      	movs	r2, #0
 800045c:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045e:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000464:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800046a:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000470:	4815      	ldr	r0, [pc, #84]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 8000472:	f000 fd49 	bl	8000f08 <HAL_I2C_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	bf14      	ite	ne
 800047c:	2301      	movne	r3, #1
 800047e:	2300      	moveq	r3, #0
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <_ZL12MX_I2C1_Initv+0x56>
	  {
	    Error_Handler();
 8000486:	f000 f987 	bl	8000798 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048a:	2100      	movs	r1, #0
 800048c:	480e      	ldr	r0, [pc, #56]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 800048e:	f001 f909 	bl	80016a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	bf14      	ite	ne
 8000498:	2301      	movne	r3, #1
 800049a:	2300      	moveq	r3, #0
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <_ZL12MX_I2C1_Initv+0x72>
	  {
	    Error_Handler();
 80004a2:	f000 f979 	bl	8000798 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004a6:	2100      	movs	r1, #0
 80004a8:	4807      	ldr	r0, [pc, #28]	@ (80004c8 <_ZL12MX_I2C1_Initv+0x94>)
 80004aa:	f001 f946 	bl	800173a <HAL_I2CEx_ConfigDigitalFilter>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bf14      	ite	ne
 80004b4:	2301      	movne	r3, #1
 80004b6:	2300      	moveq	r3, #0
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <_ZL12MX_I2C1_Initv+0x8e>
	  {
	    Error_Handler();
 80004be:	f000 f96b 	bl	8000798 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000028 	.word	0x20000028
 80004cc:	40005400 	.word	0x40005400

080004d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b41      	ldr	r3, [pc, #260]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a40      	ldr	r2, [pc, #256]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 80004ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b3e      	ldr	r3, [pc, #248]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b3b      	ldr	r3, [pc, #236]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a3a      	ldr	r2, [pc, #232]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 8000504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b35      	ldr	r3, [pc, #212]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a34      	ldr	r2, [pc, #208]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 800051c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b32      	ldr	r3, [pc, #200]	@ (80005ec <_ZL12MX_GPIO_Initv+0x11c>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000534:	482e      	ldr	r0, [pc, #184]	@ (80005f0 <_ZL12MX_GPIO_Initv+0x120>)
 8000536:	f000 fccf 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f248 0130 	movw	r1, #32816	@ 0x8030
 8000540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000544:	f000 fcc8 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000548:	2200      	movs	r2, #0
 800054a:	21f8      	movs	r1, #248	@ 0xf8
 800054c:	4829      	ldr	r0, [pc, #164]	@ (80005f4 <_ZL12MX_GPIO_Initv+0x124>)
 800054e:	f000 fcc3 	bl	8000ed8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	4821      	ldr	r0, [pc, #132]	@ (80005f0 <_ZL12MX_GPIO_Initv+0x120>)
 800056c:	f000 fb3a 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000570:	f641 730f 	movw	r3, #7951	@ 0x1f0f
 8000574:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f000 fb2c 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 800058c:	f248 0330 	movw	r3, #32816	@ 0x8030
 8000590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f000 fb1c 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <_ZL12MX_GPIO_Initv+0x124>)
 80005c2:	f000 fb0f 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80005c6:	23f8      	movs	r3, #248	@ 0xf8
 80005c8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <_ZL12MX_GPIO_Initv+0x124>)
 80005de:	f000 fb01 	bl	8000be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e2:	bf00      	nop
 80005e4:	3720      	adds	r7, #32
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000800 	.word	0x48000800
 80005f4:	48000400 	.word	0x48000400

080005f8 <TLC_init>:

/* USER CODE BEGIN 4 */

void TLC_init() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af02      	add	r7, sp, #8

	// Reset pin must be held high for LED driver to not be standby mode
	HAL_GPIO_WritePin(GPIOA, TLC_RESET, LOW);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f000 fc66 	bl	8000ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TLC_RESET, HIGH);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000616:	f000 fc5f 	bl	8000ed8 <HAL_GPIO_WritePin>

	uint8_t buffer[2] = {MODE1, 0x01}; // Initialized to MODE1 register init; see section 9.6.1
 800061a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800061e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8000620:	1d3a      	adds	r2, r7, #4
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2302      	movs	r3, #2
 800062a:	21c0      	movs	r1, #192	@ 0xc0
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <TLC_init+0x44>)
 800062e:	f000 fd07 	bl	8001040 <HAL_I2C_Master_Transmit>

#ifdef afterglow
	row_on();
#endif
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028

08000640 <row_off>:


void row_off() {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8
	uint8_t buffer[5] = {LEDOUT0, 0x00, 0x00, 0x00, 0x00};
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <row_off+0x30>)
 8000648:	463b      	mov	r3, r7
 800064a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064e:	6018      	str	r0, [r3, #0]
 8000650:	3304      	adds	r3, #4
 8000652:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 8000654:	463a      	mov	r2, r7
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2305      	movs	r3, #5
 800065e:	21c0      	movs	r1, #192	@ 0xc0
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <row_off+0x34>)
 8000662:	f000 fced 	bl	8001040 <HAL_I2C_Master_Transmit>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	08003064 	.word	0x08003064
 8000674:	20000028 	.word	0x20000028

08000678 <row_on>:

void row_on() {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
	uint8_t buffer[5] = {LEDOUT0, TLC_PWM_MODE, TLC_PWM_MODE, TLC_PWM_MODE, TLC_PWM_MODE};
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <row_on+0x30>)
 8000680:	463b      	mov	r3, r7
 8000682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000686:	6018      	str	r0, [r3, #0]
 8000688:	3304      	adds	r3, #4
 800068a:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 800068c:	463a      	mov	r2, r7
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2305      	movs	r3, #5
 8000696:	21c0      	movs	r1, #192	@ 0xc0
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <row_on+0x34>)
 800069a:	f000 fcd1 	bl	8001040 <HAL_I2C_Master_Transmit>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	0800306c 	.word	0x0800306c
 80006ac:	20000028 	.word	0x20000028

080006b0 <LED_heartbeat>:


void LED_heartbeat() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	static uint8_t led_on = 0;

	if (led_on) {
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <LED_heartbeat+0x38>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d009      	beq.n	80006d0 <LED_heartbeat+0x20>
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, HIGH);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c2:	480a      	ldr	r0, [pc, #40]	@ (80006ec <LED_heartbeat+0x3c>)
 80006c4:	f000 fc08 	bl	8000ed8 <HAL_GPIO_WritePin>
		led_on = 0;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <LED_heartbeat+0x38>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	else {
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, LOW);
		led_on = 1;
	}

}
 80006ce:	e008      	b.n	80006e2 <LED_heartbeat+0x32>
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, LOW);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <LED_heartbeat+0x3c>)
 80006d8:	f000 fbfe 	bl	8000ed8 <HAL_GPIO_WritePin>
		led_on = 1;
 80006dc:	4b02      	ldr	r3, [pc, #8]	@ (80006e8 <LED_heartbeat+0x38>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	48000800 	.word	0x48000800

080006f0 <set_LEDs>:


uint8_t set_LEDs(uint8_t* row_buffer) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]


#ifndef afterglow
	row_off();
 80006f8:	f7ff ffa2 	bl	8000640 <row_off>
#endif

	// sets the colours of the LEDs
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, row_buffer, 17, HAL_MAX_DELAY);
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2311      	movs	r3, #17
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	21c0      	movs	r1, #192	@ 0xc0
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <set_LEDs+0x28>)
 800070a:	f000 fc99 	bl	8001040 <HAL_I2C_Master_Transmit>

	return 1;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000028 	.word	0x20000028

0800071c <display>:

void display(uint8_t** rows) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]


	for (int k = 0; k < 5; ++k) {
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e02a      	b.n	8000780 <display+0x64>
		set_LEDs(rows[k]);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ffdb 	bl	80006f0 <set_LEDs>
		HAL_GPIO_WritePin(MUX_PORT, MUX_1 << ((k+4)%5), HIGH);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	1d19      	adds	r1, r3, #4
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <display+0x74>)
 8000740:	fb83 2301 	smull	r2, r3, r3, r1
 8000744:	105a      	asrs	r2, r3, #1
 8000746:	17cb      	asrs	r3, r1, #31
 8000748:	1ad2      	subs	r2, r2, r3
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	1aca      	subs	r2, r1, r3
 8000752:	2308      	movs	r3, #8
 8000754:	4093      	lsls	r3, r2
 8000756:	b29b      	uxth	r3, r3
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <display+0x78>)
 800075e:	f000 fbbb 	bl	8000ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_PORT, MUX_1 << k, LOW);
 8000762:	2208      	movs	r2, #8
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	b29b      	uxth	r3, r3
 800076c:	2200      	movs	r2, #0
 800076e:	4619      	mov	r1, r3
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <display+0x78>)
 8000772:	f000 fbb1 	bl	8000ed8 <HAL_GPIO_WritePin>
	#ifndef afterglow
		row_on();
 8000776:	f7ff ff7f 	bl	8000678 <row_on>
	for (int k = 0; k < 5; ++k) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b04      	cmp	r3, #4
 8000784:	ddd1      	ble.n	800072a <display+0xe>
	set_LEDs(rows[4]);
	HAL_GPIO_WritePin(GPIOB, MUX_4, HIGH);
	HAL_GPIO_WritePin(GPIOB, MUX_5, LOW);
	row_on();
	*/
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	66666667 	.word	0x66666667
 8000794:	48000400 	.word	0x48000400

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_MspInit+0x44>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_MspInit+0x44>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_MspInit+0x44>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_MspInit+0x44>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <HAL_I2C_MspInit+0x7c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d128      	bne.n	8000860 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <HAL_I2C_MspInit+0x80>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a16      	ldr	r2, [pc, #88]	@ (800086c <HAL_I2C_MspInit+0x80>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <HAL_I2C_MspInit+0x80>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000826:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082c:	2312      	movs	r3, #18
 800082e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000838:	2304      	movs	r3, #4
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <HAL_I2C_MspInit+0x84>)
 8000844:	f000 f9ce 	bl	8000be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_I2C_MspInit+0x80>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_I2C_MspInit+0x80>)
 800084e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000852:	61d3      	str	r3, [r2, #28]
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <HAL_I2C_MspInit+0x80>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	@ 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40005400 	.word	0x40005400
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <UsageFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ca:	f000 f885 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000930 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff ffea 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	@ (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	@ (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 fb1b 	bl	8002f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fc4d 	bl	80001c8 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000930:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	080030ac 	.word	0x080030ac
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	20000084 	.word	0x20000084

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f90d 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff ff1c 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f917 	bl	8000bca <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f8ed 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_IncTick+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <HAL_IncTick+0x24>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000080 	.word	0x20000080

08000a00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000080 	.word	0x20000080

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	@ (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	@ 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	@ 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff8e 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff47 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff5c 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff8e 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffb0 	bl	8000b38 <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	e154      	b.n	8000e9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8146 	beq.w	8000e98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d005      	beq.n	8000c24 <HAL_GPIO_Init+0x40>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d130      	bne.n	8000c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	f003 0201 	and.w	r2, r3, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d017      	beq.n	8000cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d123      	bne.n	8000d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0203 	and.w	r2, r3, #3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80a0 	beq.w	8000e98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	4b58      	ldr	r3, [pc, #352]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a57      	ldr	r2, [pc, #348]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b55      	ldr	r3, [pc, #340]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d70:	4a53      	ldr	r2, [pc, #332]	@ (8000ec0 <HAL_GPIO_Init+0x2dc>)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d9a:	d019      	beq.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a49      	ldr	r2, [pc, #292]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d013      	beq.n	8000dcc <HAL_GPIO_Init+0x1e8>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a48      	ldr	r2, [pc, #288]	@ (8000ec8 <HAL_GPIO_Init+0x2e4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a47      	ldr	r2, [pc, #284]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a46      	ldr	r2, [pc, #280]	@ (8000ed0 <HAL_GPIO_Init+0x2ec>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_GPIO_Init+0x1dc>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e008      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	e006      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e004      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	0092      	lsls	r2, r2, #2
 8000dda:	4093      	lsls	r3, r2
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de2:	4937      	ldr	r1, [pc, #220]	@ (8000ec0 <HAL_GPIO_Init+0x2dc>)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df0:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e14:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e44:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e68:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e92:	4a10      	ldr	r2, [pc, #64]	@ (8000ed4 <HAL_GPIO_Init+0x2f0>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f47f aea3 	bne.w	8000bf4 <HAL_GPIO_Init+0x10>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	371c      	adds	r7, #28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48000c00 	.word	0x48000c00
 8000ed0:	48001000 	.word	0x48001000
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef4:	e002      	b.n	8000efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e08d      	b.n	8001036 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fc5c 	bl	80007ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2224      	movs	r2, #36	@ 0x24
 8000f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	e006      	b.n	8000f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d108      	bne.n	8000faa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	e007      	b.n	8000fba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69d9      	ldr	r1, [r3, #28]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2220      	movs	r2, #32
 8001022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af02      	add	r7, sp, #8
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	461a      	mov	r2, r3
 800104c:	460b      	mov	r3, r1
 800104e:	817b      	strh	r3, [r7, #10]
 8001050:	4613      	mov	r3, r2
 8001052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b20      	cmp	r3, #32
 800105e:	f040 80fd 	bne.w	800125c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_I2C_Master_Transmit+0x30>
 800106c:	2302      	movs	r3, #2
 800106e:	e0f6      	b.n	800125e <HAL_I2C_Master_Transmit+0x21e>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001078:	f7ff fcc2 	bl	8000a00 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2319      	movs	r3, #25
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f914 	bl	80012b8 <I2C_WaitOnFlagUntilTimeout>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0e1      	b.n	800125e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2210      	movs	r2, #16
 80010a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2bff      	cmp	r3, #255	@ 0xff
 80010ca:	d906      	bls.n	80010da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	22ff      	movs	r2, #255	@ 0xff
 80010d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80010d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e007      	b.n	80010ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010de:	b29a      	uxth	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80010e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d024      	beq.n	800113c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800110c:	b29b      	uxth	r3, r3
 800110e:	3b01      	subs	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800111a:	3b01      	subs	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	8979      	ldrh	r1, [r7, #10]
 800112e:	4b4e      	ldr	r3, [pc, #312]	@ (8001268 <HAL_I2C_Master_Transmit+0x228>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 fa83 	bl	8001640 <I2C_TransferConfig>
 800113a:	e066      	b.n	800120a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001140:	b2da      	uxtb	r2, r3
 8001142:	8979      	ldrh	r1, [r7, #10]
 8001144:	4b48      	ldr	r3, [pc, #288]	@ (8001268 <HAL_I2C_Master_Transmit+0x228>)
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 fa78 	bl	8001640 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001150:	e05b      	b.n	800120a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	6a39      	ldr	r1, [r7, #32]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 f907 	bl	800136a <I2C_WaitOnTXISFlagUntilTimeout>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e07b      	b.n	800125e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800118e:	3b01      	subs	r3, #1
 8001190:	b29a      	uxth	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d034      	beq.n	800120a <HAL_I2C_Master_Transmit+0x1ca>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d130      	bne.n	800120a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	@ 0x80
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 f880 	bl	80012b8 <I2C_WaitOnFlagUntilTimeout>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e04d      	b.n	800125e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	2bff      	cmp	r3, #255	@ 0xff
 80011ca:	d90e      	bls.n	80011ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	22ff      	movs	r2, #255	@ 0xff
 80011d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	8979      	ldrh	r1, [r7, #10]
 80011da:	2300      	movs	r3, #0
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 fa2c 	bl	8001640 <I2C_TransferConfig>
 80011e8:	e00f      	b.n	800120a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	8979      	ldrh	r1, [r7, #10]
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 fa1b 	bl	8001640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800120e:	b29b      	uxth	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d19e      	bne.n	8001152 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	6a39      	ldr	r1, [r7, #32]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 f8ed 	bl	80013f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e01a      	b.n	800125e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2220      	movs	r2, #32
 800122e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6859      	ldr	r1, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_I2C_Master_Transmit+0x22c>)
 800123c:	400b      	ands	r3, r1
 800123e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2220      	movs	r2, #32
 8001244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	e000      	b.n	800125e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800125c:	2302      	movs	r3, #2
  }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	80002000 	.word	0x80002000
 800126c:	fe00e800 	.word	0xfe00e800

08001270 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b02      	cmp	r3, #2
 8001284:	d103      	bne.n	800128e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d007      	beq.n	80012ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	619a      	str	r2, [r3, #24]
  }
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012c8:	e03b      	b.n	8001342 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	6839      	ldr	r1, [r7, #0]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 f8d6 	bl	8001480 <I2C_IsErrorOccurred>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e041      	b.n	8001362 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d02d      	beq.n	8001342 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e6:	f7ff fb8b 	bl	8000a00 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d302      	bcc.n	80012fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d122      	bne.n	8001342 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	4013      	ands	r3, r2
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	429a      	cmp	r2, r3
 8001318:	d113      	bne.n	8001342 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f043 0220 	orr.w	r2, r3, #32
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2220      	movs	r2, #32
 800132a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4013      	ands	r3, r2
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	429a      	cmp	r2, r3
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	429a      	cmp	r2, r3
 800135e:	d0b4      	beq.n	80012ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001376:	e033      	b.n	80013e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f87f 	bl	8001480 <I2C_IsErrorOccurred>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e031      	b.n	80013f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001392:	d025      	beq.n	80013e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001394:	f7ff fb34 	bl	8000a00 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d302      	bcc.n	80013aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11a      	bne.n	80013e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d013      	beq.n	80013e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	f043 0220 	orr.w	r2, r3, #32
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2220      	movs	r2, #32
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e007      	b.n	80013f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d1c4      	bne.n	8001378 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001404:	e02f      	b.n	8001466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 f838 	bl	8001480 <I2C_IsErrorOccurred>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e02d      	b.n	8001476 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800141a:	f7ff faf1 	bl	8000a00 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	429a      	cmp	r2, r3
 8001428:	d302      	bcc.n	8001430 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11a      	bne.n	8001466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b20      	cmp	r3, #32
 800143c:	d013      	beq.n	8001466 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f043 0220 	orr.w	r2, r3, #32
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2220      	movs	r2, #32
 800144e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e007      	b.n	8001476 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	2b20      	cmp	r3, #32
 8001472:	d1c8      	bne.n	8001406 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d068      	beq.n	800157e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2210      	movs	r2, #16
 80014b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014b4:	e049      	b.n	800154a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d045      	beq.n	800154a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014be:	f7ff fa9f 	bl	8000a00 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d302      	bcc.n	80014d4 <I2C_IsErrorOccurred+0x54>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d13a      	bne.n	800154a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80014e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014f6:	d121      	bne.n	800153c <I2C_IsErrorOccurred+0xbc>
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014fe:	d01d      	beq.n	800153c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001500:	7cfb      	ldrb	r3, [r7, #19]
 8001502:	2b20      	cmp	r3, #32
 8001504:	d01a      	beq.n	800153c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001514:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001516:	f7ff fa73 	bl	8000a00 <HAL_GetTick>
 800151a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800151c:	e00e      	b.n	800153c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800151e:	f7ff fa6f 	bl	8000a00 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b19      	cmp	r3, #25
 800152a:	d907      	bls.n	800153c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800153a:	e006      	b.n	800154a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	2b20      	cmp	r3, #32
 8001548:	d1e9      	bne.n	800151e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b20      	cmp	r3, #32
 8001556:	d003      	beq.n	8001560 <I2C_IsErrorOccurred+0xe0>
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0aa      	beq.n	80014b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2220      	movs	r2, #32
 800156e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00b      	beq.n	80015a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80015ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01c      	beq.n	800162e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff fe3b 	bl	8001270 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <I2C_IsErrorOccurred+0x1bc>)
 8001606:	400b      	ands	r3, r1
 8001608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	431a      	orrs	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800162e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001632:	4618      	mov	r0, r3
 8001634:	3728      	adds	r7, #40	@ 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	fe00e800 	.word	0xfe00e800

08001640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	817b      	strh	r3, [r7, #10]
 800164e:	4613      	mov	r3, r2
 8001650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001652:	897b      	ldrh	r3, [r7, #10]
 8001654:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001658:	7a7b      	ldrb	r3, [r7, #9]
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001660:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	4313      	orrs	r3, r2
 800166a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800166e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <I2C_TransferConfig+0x60>)
 8001680:	430b      	orrs	r3, r1
 8001682:	43db      	mvns	r3, r3
 8001684:	ea02 0103 	and.w	r1, r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001692:	bf00      	nop
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	03ff63ff 	.word	0x03ff63ff

080016a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d138      	bne.n	800172c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e032      	b.n	800172e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	@ 0x24
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800172c:	2302      	movs	r3, #2
  }
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b20      	cmp	r3, #32
 800174e:	d139      	bne.n	80017c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800175a:	2302      	movs	r3, #2
 800175c:	e033      	b.n	80017c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2224      	movs	r2, #36	@ 0x24
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800178c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e000      	b.n	80017c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017c4:	2302      	movs	r3, #2
  }
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80017da:	af00      	add	r7, sp, #0
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f001 b823 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 817d 	beq.w	8001b0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001810:	4bbc      	ldr	r3, [pc, #752]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d00c      	beq.n	8001836 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181c:	4bb9      	ldr	r3, [pc, #740]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d15c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x10e>
 8001828:	4bb6      	ldr	r3, [pc, #728]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001834:	d155      	bne.n	80018e2 <HAL_RCC_OscConfig+0x10e>
 8001836:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800183a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800184a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	fab3 f383 	clz	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d102      	bne.n	8001868 <HAL_RCC_OscConfig+0x94>
 8001862:	4ba8      	ldr	r3, [pc, #672]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	e015      	b.n	8001894 <HAL_RCC_OscConfig+0xc0>
 8001868:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800186c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800187c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001880:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001884:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001890:	4b9c      	ldr	r3, [pc, #624]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001898:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800189c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018a0:	fa92 f2a2 	rbit	r2, r2
 80018a4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80018a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80018ac:	fab2 f282 	clz	r2, r2
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	f042 0220 	orr.w	r2, r2, #32
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f002 021f 	and.w	r2, r2, #31
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 811f 	beq.w	8001b08 <HAL_RCC_OscConfig+0x334>
 80018ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 8116 	bne.w	8001b08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f000 bfaf 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x12e>
 80018f4:	4b83      	ldr	r3, [pc, #524]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a82      	ldr	r2, [pc, #520]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e036      	b.n	8001970 <HAL_RCC_OscConfig+0x19c>
 8001902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x158>
 8001912:	4b7c      	ldr	r3, [pc, #496]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7b      	ldr	r2, [pc, #492]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b79      	ldr	r3, [pc, #484]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a78      	ldr	r2, [pc, #480]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e021      	b.n	8001970 <HAL_RCC_OscConfig+0x19c>
 800192c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001930:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x184>
 800193e:	4b71      	ldr	r3, [pc, #452]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a70      	ldr	r2, [pc, #448]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6d      	ldr	r2, [pc, #436]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x19c>
 8001958:	4b6a      	ldr	r3, [pc, #424]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a69      	ldr	r2, [pc, #420]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b67      	ldr	r3, [pc, #412]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a66      	ldr	r2, [pc, #408]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001970:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	f023 020f 	bic.w	r2, r3, #15
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	495f      	ldr	r1, [pc, #380]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001986:	4313      	orrs	r3, r2
 8001988:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d059      	beq.n	8001a4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f831 	bl	8000a00 <HAL_GetTick>
 800199e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f82c 	bl	8000a00 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	@ 0x64
 80019b2:	d902      	bls.n	80019ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	f000 bf43 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
 80019ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019be:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80019ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <HAL_RCC_OscConfig+0x218>
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	e015      	b.n	8001a18 <HAL_RCC_OscConfig+0x244>
 80019ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a04:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001a14:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a1c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001a20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a24:	fa92 f2a2 	rbit	r2, r2
 8001a28:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001a2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001a30:	fab2 f282 	clz	r2, r2
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f042 0220 	orr.w	r2, r2, #32
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f002 021f 	and.w	r2, r2, #31
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ab      	beq.n	80019a4 <HAL_RCC_OscConfig+0x1d0>
 8001a4c:	e05d      	b.n	8001b0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7fe ffd7 	bl	8000a00 <HAL_GetTick>
 8001a52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7fe ffd2 	bl	8000a00 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	@ 0x64
 8001a66:	d902      	bls.n	8001a6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	f000 bee9 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a72:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001a82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2cc>
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0x2f8>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001abc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ad0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ad4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ae0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ab      	bne.n	8001a58 <HAL_RCC_OscConfig+0x284>
 8001b00:	e003      	b.n	8001b0a <HAL_RCC_OscConfig+0x336>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 817d 	beq.w	8001e1a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b20:	4ba6      	ldr	r3, [pc, #664]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b2c:	4ba3      	ldr	r3, [pc, #652]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d172      	bne.n	8001c1e <HAL_RCC_OscConfig+0x44a>
 8001b38:	4ba0      	ldr	r3, [pc, #640]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d16c      	bne.n	8001c1e <HAL_RCC_OscConfig+0x44a>
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001b56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d102      	bne.n	8001b74 <HAL_RCC_OscConfig+0x3a0>
 8001b6e:	4b93      	ldr	r3, [pc, #588]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	e013      	b.n	8001b9c <HAL_RCC_OscConfig+0x3c8>
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b98:	4b88      	ldr	r3, [pc, #544]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ba2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ba6:	fa92 f2a2 	rbit	r2, r2
 8001baa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001bae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001bb2:	fab2 f282 	clz	r2, r2
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f042 0220 	orr.w	r2, r2, #32
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f002 021f 	and.w	r2, r2, #31
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <HAL_RCC_OscConfig+0x410>
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d002      	beq.n	8001be4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f000 be2e 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4b75      	ldr	r3, [pc, #468]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	21f8      	movs	r1, #248	@ 0xf8
 8001bfa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c02:	fa91 f1a1 	rbit	r1, r1
 8001c06:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001c0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001c0e:	fab1 f181 	clz	r1, r1
 8001c12:	b2c9      	uxtb	r1, r1
 8001c14:	408b      	lsls	r3, r1
 8001c16:	4969      	ldr	r1, [pc, #420]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1c:	e0fd      	b.n	8001e1a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8088 	beq.w	8001d40 <HAL_RCC_OscConfig+0x56c>
 8001c30:	2301      	movs	r3, #1
 8001c32:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001c42:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	461a      	mov	r2, r3
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7fe fed0 	bl	8000a00 <HAL_GetTick>
 8001c60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c66:	f7fe fecb 	bl	8000a00 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d902      	bls.n	8001c7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	f000 bde2 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001c8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_RCC_OscConfig+0x4d8>
 8001ca6:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	e013      	b.n	8001cd4 <HAL_RCC_OscConfig+0x500>
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001cda:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001cde:	fa92 f2a2 	rbit	r2, r2
 8001ce2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ce6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0af      	beq.n	8001c66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	21f8      	movs	r1, #248	@ 0xf8
 8001d1c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d24:	fa91 f1a1 	rbit	r1, r1
 8001d28:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001d2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001d30:	fab1 f181 	clz	r1, r1
 8001d34:	b2c9      	uxtb	r1, r1
 8001d36:	408b      	lsls	r3, r1
 8001d38:	4920      	ldr	r1, [pc, #128]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
 8001d3e:	e06c      	b.n	8001e1a <HAL_RCC_OscConfig+0x646>
 8001d40:	2301      	movs	r3, #1
 8001d42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001d52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	461a      	mov	r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fe48 	bl	8000a00 <HAL_GetTick>
 8001d70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d76:	f7fe fe43 	bl	8000a00 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d902      	bls.n	8001d8c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	f000 bd5a 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d104      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5ec>
 8001db6:	4b01      	ldr	r3, [pc, #4]	@ (8001dbc <HAL_RCC_OscConfig+0x5e8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e015      	b.n	8001de8 <HAL_RCC_OscConfig+0x614>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001dd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001de4:	4bc8      	ldr	r3, [pc, #800]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	2202      	movs	r2, #2
 8001dea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001dee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001dfa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f002 021f 	and.w	r2, r2, #31
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ad      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8110 	beq.w	8002050 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d079      	beq.n	8001f34 <HAL_RCC_OscConfig+0x760>
 8001e40:	2301      	movs	r3, #1
 8001e42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4bab      	ldr	r3, [pc, #684]	@ (800210c <HAL_RCC_OscConfig+0x938>)
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	461a      	mov	r2, r3
 8001e66:	2301      	movs	r3, #1
 8001e68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fdc9 	bl	8000a00 <HAL_GetTick>
 8001e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7fe fdc4 	bl	8000a00 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d902      	bls.n	8001e8a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f000 bcdb 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ec8:	2202      	movs	r2, #2
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ee2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee4:	4b88      	ldr	r3, [pc, #544]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 8001ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	6019      	str	r1, [r3, #0]
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f1a3 	rbit	r1, r3
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f0a:	6019      	str	r1, [r3, #0]
  return result;
 8001f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0a0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x6a0>
 8001f32:	e08d      	b.n	8002050 <HAL_RCC_OscConfig+0x87c>
 8001f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f56:	601a      	str	r2, [r3, #0]
  return result;
 8001f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b68      	ldr	r3, [pc, #416]	@ (800210c <HAL_RCC_OscConfig+0x938>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	461a      	mov	r2, r3
 8001f72:	2300      	movs	r3, #0
 8001f74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7fe fd43 	bl	8000a00 <HAL_GetTick>
 8001f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f80:	f7fe fd3e 	bl	8000a00 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d902      	bls.n	8001f96 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	f000 bc55 	b.w	8002840 <HAL_RCC_OscConfig+0x106c>
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002000:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002002:	4b41      	ldr	r3, [pc, #260]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 8002004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800200e:	2102      	movs	r1, #2
 8002010:	6019      	str	r1, [r3, #0]
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f1a3 	rbit	r1, r3
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002028:	6019      	str	r1, [r3, #0]
  return result;
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d197      	bne.n	8001f80 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 81a1 	beq.w	80023a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d116      	bne.n	80020a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4a22      	ldr	r2, [pc, #136]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002082:	61d3      	str	r3, [r2, #28]
 8002084:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800208c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002090:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800209e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <HAL_RCC_OscConfig+0x93c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11a      	bne.n	80020e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b2:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <HAL_RCC_OscConfig+0x93c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a16      	ldr	r2, [pc, #88]	@ (8002110 <HAL_RCC_OscConfig+0x93c>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7fe fc9f 	bl	8000a00 <HAL_GetTick>
 80020c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	e009      	b.n	80020dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fc9a 	bl	8000a00 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b64      	cmp	r3, #100	@ 0x64
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e3b1      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_RCC_OscConfig+0x93c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10d      	bne.n	8002114 <HAL_RCC_OscConfig+0x940>
 80020f8:	4b03      	ldr	r3, [pc, #12]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a02      	ldr	r2, [pc, #8]	@ (8002108 <HAL_RCC_OscConfig+0x934>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e03c      	b.n	8002180 <HAL_RCC_OscConfig+0x9ac>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	10908120 	.word	0x10908120
 8002110:	40007000 	.word	0x40007000
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x96a>
 8002124:	4bc1      	ldr	r3, [pc, #772]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4ac0      	ldr	r2, [pc, #768]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	4bbe      	ldr	r3, [pc, #760]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4abd      	ldr	r2, [pc, #756]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002136:	f023 0304 	bic.w	r3, r3, #4
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e020      	b.n	8002180 <HAL_RCC_OscConfig+0x9ac>
 800213e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002142:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b05      	cmp	r3, #5
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x994>
 800214e:	4bb7      	ldr	r3, [pc, #732]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4ab6      	ldr	r2, [pc, #728]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4bb4      	ldr	r3, [pc, #720]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4ab3      	ldr	r2, [pc, #716]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0x9ac>
 8002168:	4bb0      	ldr	r3, [pc, #704]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4aaf      	ldr	r2, [pc, #700]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	4bad      	ldr	r3, [pc, #692]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4aac      	ldr	r2, [pc, #688]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8081 	beq.w	8002294 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe fc35 	bl	8000a00 <HAL_GetTick>
 8002196:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7fe fc30 	bl	8000a00 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e345      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021e0:	2202      	movs	r2, #2
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021fa:	601a      	str	r2, [r3, #0]
  return result;
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002204:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d102      	bne.n	8002220 <HAL_RCC_OscConfig+0xa4c>
 800221a:	4b84      	ldr	r3, [pc, #528]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	e013      	b.n	8002248 <HAL_RCC_OscConfig+0xa74>
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002228:	2202      	movs	r2, #2
 800222a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	4b79      	ldr	r3, [pc, #484]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800224c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002250:	2102      	movs	r1, #2
 8002252:	6011      	str	r1, [r2, #0]
 8002254:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002258:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	fa92 f1a2 	rbit	r1, r2
 8002262:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002266:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800226a:	6011      	str	r1, [r2, #0]
  return result;
 800226c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002270:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	fab2 f282 	clz	r2, r2
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	f002 021f 	and.w	r2, r2, #31
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f202 	lsl.w	r2, r1, r2
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d084      	beq.n	800219c <HAL_RCC_OscConfig+0x9c8>
 8002292:	e07f      	b.n	8002394 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe fbb4 	bl	8000a00 <HAL_GetTick>
 8002298:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00b      	b.n	80022b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fbaf 	bl	8000a00 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e2c4      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022e2:	2202      	movs	r2, #2
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022fc:	601a      	str	r2, [r3, #0]
  return result;
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002306:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d102      	bne.n	8002322 <HAL_RCC_OscConfig+0xb4e>
 800231c:	4b43      	ldr	r3, [pc, #268]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	e013      	b.n	800234a <HAL_RCC_OscConfig+0xb76>
 8002322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002326:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800232a:	2202      	movs	r2, #2
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	4b39      	ldr	r3, [pc, #228]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800234e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002352:	2102      	movs	r1, #2
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800235a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	fa92 f1a2 	rbit	r1, r2
 8002364:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002368:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800236c:	6011      	str	r1, [r2, #0]
  return result;
 800236e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002372:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	fab2 f282 	clz	r2, r2
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f002 021f 	and.w	r2, r2, #31
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d184      	bne.n	800229e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002394:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a22      	ldr	r2, [pc, #136]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8242 	beq.w	800283e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ba:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <HAL_RCC_OscConfig+0xc58>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	f000 8213 	beq.w	80027ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	f040 8162 	bne.w	800269e <HAL_RCC_OscConfig+0xeca>
 80023da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80023e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023fe:	601a      	str	r2, [r3, #0]
  return result;
 8002400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002404:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002408:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002414:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	461a      	mov	r2, r3
 800241c:	2300      	movs	r3, #0
 800241e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe faee 	bl	8000a00 <HAL_GetTick>
 8002424:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	e00c      	b.n	8002444 <HAL_RCC_OscConfig+0xc70>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fae6 	bl	8000a00 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1fd      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800244c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002456:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002464:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002468:	601a      	str	r2, [r3, #0]
  return result;
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002472:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d102      	bne.n	800248e <HAL_RCC_OscConfig+0xcba>
 8002488:	4bb0      	ldr	r3, [pc, #704]	@ (800274c <HAL_RCC_OscConfig+0xf78>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e027      	b.n	80024de <HAL_RCC_OscConfig+0xd0a>
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002496:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	4b9c      	ldr	r3, [pc, #624]	@ (800274c <HAL_RCC_OscConfig+0xf78>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80024e6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024ea:	6011      	str	r1, [r2, #0]
 80024ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024f0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	fa92 f1a2 	rbit	r1, r2
 80024fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002502:	6011      	str	r1, [r2, #0]
  return result;
 8002504:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002508:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	fab2 f282 	clz	r2, r2
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f042 0220 	orr.w	r2, r2, #32
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f002 021f 	and.w	r2, r2, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d182      	bne.n	8002430 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252a:	4b88      	ldr	r3, [pc, #544]	@ (800274c <HAL_RCC_OscConfig+0xf78>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	430b      	orrs	r3, r1
 800254c:	497f      	ldr	r1, [pc, #508]	@ (800274c <HAL_RCC_OscConfig+0xf78>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
 8002552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002556:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800255a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800255e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002576:	601a      	str	r2, [r3, #0]
  return result;
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002580:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800258c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	461a      	mov	r2, r3
 8002594:	2301      	movs	r3, #1
 8002596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fa32 	bl	8000a00 <HAL_GetTick>
 800259c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a0:	e009      	b.n	80025b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fa2d 	bl	8000a00 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e144      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_OscConfig+0xe2c>
 80025fa:	4b54      	ldr	r3, [pc, #336]	@ (800274c <HAL_RCC_OscConfig+0xf78>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	e027      	b.n	8002650 <HAL_RCC_OscConfig+0xe7c>
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002608:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800262e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002646:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	4b3f      	ldr	r3, [pc, #252]	@ (800274c <HAL_RCC_OscConfig+0xf78>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002654:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002658:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800265c:	6011      	str	r1, [r2, #0]
 800265e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002662:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	fa92 f1a2 	rbit	r1, r2
 800266c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002670:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002674:	6011      	str	r1, [r2, #0]
  return result;
 8002676:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800267a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f042 0220 	orr.w	r2, r2, #32
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f002 021f 	and.w	r2, r2, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d082      	beq.n	80025a2 <HAL_RCC_OscConfig+0xdce>
 800269c:	e0cf      	b.n	800283e <HAL_RCC_OscConfig+0x106a>
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80026a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026c2:	601a      	str	r2, [r3, #0]
  return result;
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	461a      	mov	r2, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe f98c 	bl	8000a00 <HAL_GetTick>
 80026e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ec:	e009      	b.n	8002702 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe f987 	bl	8000a00 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e09e      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800270a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002726:	601a      	str	r2, [r3, #0]
  return result;
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002730:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d104      	bne.n	8002750 <HAL_RCC_OscConfig+0xf7c>
 8002746:	4b01      	ldr	r3, [pc, #4]	@ (800274c <HAL_RCC_OscConfig+0xf78>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e029      	b.n	80027a0 <HAL_RCC_OscConfig+0xfcc>
 800274c:	40021000 	.word	0x40021000
 8002750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002754:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002758:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800275c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	fa93 f2a3 	rbit	r2, r3
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800277e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	fa93 f2a3 	rbit	r2, r3
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <HAL_RCC_OscConfig+0x1078>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80027a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027ac:	6011      	str	r1, [r2, #0]
 80027ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	fa92 f1a2 	rbit	r1, r2
 80027bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027c4:	6011      	str	r1, [r2, #0]
  return result;
 80027c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f042 0220 	orr.w	r2, r2, #32
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f002 021f 	and.w	r2, r2, #31
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d180      	bne.n	80026ee <HAL_RCC_OscConfig+0xf1a>
 80027ec:	e027      	b.n	800283e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e01e      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCC_OscConfig+0x1078>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800280a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800280e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	429a      	cmp	r2, r3
 8002820:	d10b      	bne.n	800283a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002822:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002826:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b09e      	sub	sp, #120	@ 0x78
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e162      	b.n	8002b2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b90      	ldr	r3, [pc, #576]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d910      	bls.n	8002898 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b8d      	ldr	r3, [pc, #564]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0207 	bic.w	r2, r3, #7
 800287e:	498b      	ldr	r1, [pc, #556]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b89      	ldr	r3, [pc, #548]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e14a      	b.n	8002b2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b82      	ldr	r3, [pc, #520]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	497f      	ldr	r1, [pc, #508]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80dc 	beq.w	8002a7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d13c      	bne.n	8002946 <HAL_RCC_ClockConfig+0xf6>
 80028cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xa6>
 80028f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	e00f      	b.n	8002916 <HAL_RCC_ClockConfig+0xc6>
 80028f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	667b      	str	r3, [r7, #100]	@ 0x64
 8002904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002908:	663b      	str	r3, [r7, #96]	@ 0x60
 800290a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002912:	4b67      	ldr	r3, [pc, #412]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800291a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800291c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800291e:	fa92 f2a2 	rbit	r2, r2
 8002922:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002924:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0220 	orr.w	r2, r2, #32
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d17b      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0f3      	b.n	8002b2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d13c      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x178>
 800294e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002952:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800295c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d102      	bne.n	8002978 <HAL_RCC_ClockConfig+0x128>
 8002972:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	e00f      	b.n	8002998 <HAL_RCC_ClockConfig+0x148>
 8002978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800297c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
 8002986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800298a:	643b      	str	r3, [r7, #64]	@ 0x40
 800298c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002994:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800299c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800299e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029a0:	fa92 f2a2 	rbit	r2, r2
 80029a4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029a8:	fab2 f282 	clz	r2, r2
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f042 0220 	orr.w	r2, r2, #32
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f002 021f 	and.w	r2, r2, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d13a      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b2      	b.n	8002b2e <HAL_RCC_ClockConfig+0x2de>
 80029c8:	2302      	movs	r3, #2
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x1a0>
 80029ea:	4b31      	ldr	r3, [pc, #196]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	e00d      	b.n	8002a0c <HAL_RCC_ClockConfig+0x1bc>
 80029f0:	2302      	movs	r3, #2
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fc:	2302      	movs	r3, #2
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	4b29      	ldr	r3, [pc, #164]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	61ba      	str	r2, [r7, #24]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	fa92 f2a2 	rbit	r2, r2
 8002a16:	617a      	str	r2, [r7, #20]
  return result;
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	fab2 f282 	clz	r2, r2
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f002 021f 	and.w	r2, r2, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e079      	b.n	8002b2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	491a      	ldr	r1, [pc, #104]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7fd ffd8 	bl	8000a00 <HAL_GetTick>
 8002a50:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fd ffd4 	bl	8000a00 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e061      	b.n	8002b2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d214      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 0207 	bic.w	r2, r3, #7
 8002a92:	4906      	ldr	r1, [pc, #24]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <HAL_RCC_ClockConfig+0x25c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e040      	b.n	8002b2e <HAL_RCC_ClockConfig+0x2de>
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <HAL_RCC_ClockConfig+0x2e8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	491a      	ldr	r1, [pc, #104]	@ (8002b38 <HAL_RCC_ClockConfig+0x2e8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ade:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <HAL_RCC_ClockConfig+0x2e8>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4912      	ldr	r1, [pc, #72]	@ (8002b38 <HAL_RCC_ClockConfig+0x2e8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002af2:	f000 f829 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002af6:	4601      	mov	r1, r0
 8002af8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <HAL_RCC_ClockConfig+0x2e8>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b00:	22f0      	movs	r2, #240	@ 0xf0
 8002b02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	fa92 f2a2 	rbit	r2, r2
 8002b0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	fab2 f282 	clz	r2, r2
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	40d3      	lsrs	r3, r2
 8002b16:	4a09      	ldr	r2, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x2ec>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
 8002b1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b1e:	4a08      	ldr	r2, [pc, #32]	@ (8002b40 <HAL_RCC_ClockConfig+0x2f0>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <HAL_RCC_ClockConfig+0x2f4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd ff26 	bl	8000978 <HAL_InitTick>
  
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3778      	adds	r7, #120	@ 0x78
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08003074 	.word	0x08003074
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x30>
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x36>
 8002b76:	e026      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7a:	613b      	str	r3, [r7, #16]
      break;
 8002b7c:	e026      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0c9b      	lsrs	r3, r3, #18
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002b8c:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e004      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
      break;
 8002bc4:	e002      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bc8:	613b      	str	r3, [r7, #16]
      break;
 8002bca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bcc:	693b      	ldr	r3, [r7, #16]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	007a1200 	.word	0x007a1200
 8002be4:	08003084 	.word	0x08003084
 8002be8:	08003094 	.word	0x08003094
 8002bec:	003d0900 	.word	0x003d0900

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b092      	sub	sp, #72	@ 0x48
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80d4 	beq.w	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c14:	4b4e      	ldr	r3, [pc, #312]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10e      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b4b      	ldr	r3, [pc, #300]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4a4a      	ldr	r2, [pc, #296]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	61d3      	str	r3, [r2, #28]
 8002c2c:	4b48      	ldr	r3, [pc, #288]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b45      	ldr	r3, [pc, #276]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b42      	ldr	r3, [pc, #264]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a41      	ldr	r2, [pc, #260]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fd fed3 	bl	8000a00 <HAL_GetTick>
 8002c5a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fd fecf 	bl	8000a00 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b64      	cmp	r3, #100	@ 0x64
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e169      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c7c:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8084 	beq.w	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d07c      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b26      	ldr	r3, [pc, #152]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cee:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d04b      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fd fe7f 	bl	8000a00 <HAL_GetTick>
 8002d02:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fd fe7b 	bl	8000a00 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e113      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	2302      	movs	r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	61fb      	str	r3, [r7, #28]
  return result;
 8002d34:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d108      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d4a:	4b01      	ldr	r3, [pc, #4]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	e00d      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40007000 	.word	0x40007000
 8002d58:	10908100 	.word	0x10908100
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	4b78      	ldr	r3, [pc, #480]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	613a      	str	r2, [r7, #16]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	fa92 f2a2 	rbit	r2, r2
 8002d76:	60fa      	str	r2, [r7, #12]
  return result;
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	fab2 f282 	clz	r2, r2
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0b7      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d96:	4b6d      	ldr	r3, [pc, #436]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	496a      	ldr	r1, [pc, #424]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002da8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db0:	4b66      	ldr	r3, [pc, #408]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4a65      	ldr	r2, [pc, #404]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc8:	4b60      	ldr	r3, [pc, #384]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	f023 0203 	bic.w	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	495d      	ldr	r1, [pc, #372]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de6:	4b59      	ldr	r3, [pc, #356]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4956      	ldr	r1, [pc, #344]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e04:	4b51      	ldr	r3, [pc, #324]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	494e      	ldr	r1, [pc, #312]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e22:	4b4a      	ldr	r3, [pc, #296]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4947      	ldr	r1, [pc, #284]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e40:	4b42      	ldr	r3, [pc, #264]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	493f      	ldr	r1, [pc, #252]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	f023 0220 	bic.w	r2, r3, #32
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4938      	ldr	r1, [pc, #224]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e7c:	4b33      	ldr	r3, [pc, #204]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	4930      	ldr	r1, [pc, #192]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	4929      	ldr	r1, [pc, #164]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eb8:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	4921      	ldr	r1, [pc, #132]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	491a      	ldr	r1, [pc, #104]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ef4:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	4912      	ldr	r1, [pc, #72]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	490b      	ldr	r1, [pc, #44]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3c:	4903      	ldr	r1, [pc, #12]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3748      	adds	r7, #72	@ 0x48
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000

08002f50 <memset>:
 8002f50:	4402      	add	r2, r0
 8002f52:	4603      	mov	r3, r0
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d100      	bne.n	8002f5a <memset+0xa>
 8002f58:	4770      	bx	lr
 8002f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5e:	e7f9      	b.n	8002f54 <memset+0x4>

08002f60 <__libc_init_array>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	4d0d      	ldr	r5, [pc, #52]	@ (8002f98 <__libc_init_array+0x38>)
 8002f64:	4c0d      	ldr	r4, [pc, #52]	@ (8002f9c <__libc_init_array+0x3c>)
 8002f66:	1b64      	subs	r4, r4, r5
 8002f68:	10a4      	asrs	r4, r4, #2
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	42a6      	cmp	r6, r4
 8002f6e:	d109      	bne.n	8002f84 <__libc_init_array+0x24>
 8002f70:	4d0b      	ldr	r5, [pc, #44]	@ (8002fa0 <__libc_init_array+0x40>)
 8002f72:	4c0c      	ldr	r4, [pc, #48]	@ (8002fa4 <__libc_init_array+0x44>)
 8002f74:	f000 f818 	bl	8002fa8 <_init>
 8002f78:	1b64      	subs	r4, r4, r5
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	42a6      	cmp	r6, r4
 8002f80:	d105      	bne.n	8002f8e <__libc_init_array+0x2e>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f88:	4798      	blx	r3
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7ee      	b.n	8002f6c <__libc_init_array+0xc>
 8002f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f92:	4798      	blx	r3
 8002f94:	3601      	adds	r6, #1
 8002f96:	e7f2      	b.n	8002f7e <__libc_init_array+0x1e>
 8002f98:	080030a4 	.word	0x080030a4
 8002f9c:	080030a4 	.word	0x080030a4
 8002fa0:	080030a4 	.word	0x080030a4
 8002fa4:	080030a8 	.word	0x080030a8

08002fa8 <_init>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	bf00      	nop
 8002fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fae:	bc08      	pop	{r3}
 8002fb0:	469e      	mov	lr, r3
 8002fb2:	4770      	bx	lr

08002fb4 <_fini>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr
