
led_2048.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003148  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080032d0  080032d0  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800336c  0800336c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800336c  0800336c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800336c  0800336c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800336c  0800336c  0000436c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003370  08003370  00004370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003374  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000078  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084bb  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000177c  00000000  00000000  0000d4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0000ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a9  00000000  00000000  0000f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001819  00000000  00000000  0000f999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b59e  00000000  00000000  000111b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad4f2  00000000  00000000  0001c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c9c42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001da8  00000000  00000000  000c9c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000cba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032b8 	.word	0x080032b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032b8 	.word	0x080032b8

080001c8 <main>:
  * @retval int
  */


int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b0c2      	sub	sp, #264	@ 0x108
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fd2d 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f957 	bl	8000484 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fa03 	bl	80005e0 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80001da:	f000 f9b3 	bl	8000544 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, HIGH);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e4:	48a2      	ldr	r0, [pc, #648]	@ (8000470 <main+0x2a8>)
 80001e6:	f000 ffff 	bl	80011e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_B_DEBUG, LOW);
 80001ea:	2200      	movs	r2, #0
 80001ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f0:	489f      	ldr	r0, [pc, #636]	@ (8000470 <main+0x2a8>)
 80001f2:	f000 fff9 	bl	80011e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_G_DEBUG, LOW);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001fc:	489c      	ldr	r0, [pc, #624]	@ (8000470 <main+0x2a8>)
 80001fe:	f000 fff3 	bl	80011e8 <HAL_GPIO_WritePin>



  // Turns off all multiplexer pins
  HAL_GPIO_WritePin(MUX_PORT, MUX_1, HIGH);
 8000202:	2201      	movs	r2, #1
 8000204:	2108      	movs	r1, #8
 8000206:	489b      	ldr	r0, [pc, #620]	@ (8000474 <main+0x2ac>)
 8000208:	f000 ffee 	bl	80011e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_2, HIGH);
 800020c:	2201      	movs	r2, #1
 800020e:	2110      	movs	r1, #16
 8000210:	4898      	ldr	r0, [pc, #608]	@ (8000474 <main+0x2ac>)
 8000212:	f000 ffe9 	bl	80011e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_3, HIGH);
 8000216:	2201      	movs	r2, #1
 8000218:	2120      	movs	r1, #32
 800021a:	4896      	ldr	r0, [pc, #600]	@ (8000474 <main+0x2ac>)
 800021c:	f000 ffe4 	bl	80011e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_4, HIGH);
 8000220:	2201      	movs	r2, #1
 8000222:	2140      	movs	r1, #64	@ 0x40
 8000224:	4893      	ldr	r0, [pc, #588]	@ (8000474 <main+0x2ac>)
 8000226:	f000 ffdf 	bl	80011e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_5, HIGH);
 800022a:	2201      	movs	r2, #1
 800022c:	2180      	movs	r1, #128	@ 0x80
 800022e:	4891      	ldr	r0, [pc, #580]	@ (8000474 <main+0x2ac>)
 8000230:	f000 ffda 	bl	80011e8 <HAL_GPIO_WritePin>

  uint32_t status_diff_millis = HAL_GetTick();
 8000234:	f000 fd54 	bl	8000ce0 <HAL_GetTick>
 8000238:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t led_diff_millis = HAL_GetTick();
 800023c:	f000 fd50 	bl	8000ce0 <HAL_GetTick>
 8000240:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
#define BLU_3 0b00100101
#define MAG_3 0b00100110
#define WHT_3 0b00100111
   */

  uint8_t colours[45] = {
 8000244:	4b8c      	ldr	r3, [pc, #560]	@ (8000478 <main+0x2b0>)
 8000246:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000254:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000258:	c407      	stmia	r4!, {r0, r1, r2}
 800025a:	7023      	strb	r3, [r4, #0]
		  2, 0, 1, // rose, ID 13
		  2, 1, 2, // pink, ID 14
  };


  uint8_t grid[25] =
 800025c:	4b87      	ldr	r3, [pc, #540]	@ (800047c <main+0x2b4>)
 800025e:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8000262:	461d      	mov	r5, r3
 8000264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800026c:	c403      	stmia	r4!, {r0, r1}
 800026e:	7022      	strb	r2, [r4, #0]


  // init variables that hold button data


  uint8_t button_states = 0xFF, prev_button_states = 0xFF;
 8000270:	23ff      	movs	r3, #255	@ 0xff
 8000272:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
 8000276:	23ff      	movs	r3, #255	@ 0xff
 8000278:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  uint16_t button_list[8] = {
 800027c:	4b80      	ldr	r3, [pc, #512]	@ (8000480 <main+0x2b8>)
 800027e:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8000282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  BUTTON_L2
  };

  uint32_t button_time_diffs[8];

  for (int btn = 0; btn < 8; btn++)
 8000288:	2300      	movs	r3, #0
 800028a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800028e:	e00f      	b.n	80002b0 <main+0xe8>
	  button_time_diffs[btn] = HAL_GetTick();
 8000290:	f000 fd26 	bl	8000ce0 <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80002a0:	443b      	add	r3, r7
 80002a2:	f843 2c90 	str.w	r2, [r3, #-144]
  for (int btn = 0; btn < 8; btn++)
 80002a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80002aa:	3301      	adds	r3, #1
 80002ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80002b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80002b4:	2b07      	cmp	r3, #7
 80002b6:	ddeb      	ble.n	8000290 <main+0xc8>
  //uint8_t all_off[17] = {PWM0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  //uint8_t all_dim[17] = {PWM0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16};
  //uint8_t rain1[17] = {PWM0, 32, 0, 0, 100, 30, 0, 20, 20, 0, 0, 32, 0, 0, 24, 12, 0};

  uint8_t row1_buf[17], row2_buf[17], row3_buf[17], row4_buf[17], row5_buf[17];
  uint8_t* matrix[5] = {row1_buf, row2_buf, row3_buf, row4_buf, row5_buf};
 80002b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80002bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002c0:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80002ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002ce:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80002d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002dc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80002e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002ea:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80002f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002f8:	f107 0214 	add.w	r2, r7, #20
 80002fc:	611a      	str	r2, [r3, #16]

  for (int r = 0; r < 5; r++)
 80002fe:	2300      	movs	r3, #0
 8000300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000304:	e00e      	b.n	8000324 <main+0x15c>
	  matrix[r][0] = PWM0;
 8000306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800030a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800030e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8000312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000316:	22a2      	movs	r2, #162	@ 0xa2
 8000318:	701a      	strb	r2, [r3, #0]
  for (int r = 0; r < 5; r++)
 800031a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800031e:	3301      	adds	r3, #1
 8000320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000328:	2b04      	cmp	r3, #4
 800032a:	ddec      	ble.n	8000306 <main+0x13e>

  set_grid(matrix, grid, colours, 8);
 800032c:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8000330:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8000334:	4638      	mov	r0, r7
 8000336:	2308      	movs	r3, #8
 8000338:	f000 fa78 	bl	800082c <set_grid>

  // LED driver initalization
  TLC_init();
 800033c:	f000 f9e4 	bl	8000708 <TLC_init>



  HAL_GPIO_WritePin(GPIOC, LED_B_DEBUG, HIGH);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000346:	484a      	ldr	r0, [pc, #296]	@ (8000470 <main+0x2a8>)
 8000348:	f000 ff4e 	bl	80011e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_G_DEBUG, HIGH);
 800034c:	2201      	movs	r2, #1
 800034e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000352:	4847      	ldr	r0, [pc, #284]	@ (8000470 <main+0x2a8>)
 8000354:	f000 ff48 	bl	80011e8 <HAL_GPIO_WritePin>

  uint8_t cursor_x = 0, cursor_y = 0, last_cursor = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
 800035e:	2300      	movs	r3, #0
 8000360:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
 8000364:	2300      	movs	r3, #0
 8000366:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (prev_button_states != button_states) {
 800036a:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 800036e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000372:	429a      	cmp	r2, r3
 8000374:	d052      	beq.n	800041c <main+0x254>


		  if ((button_states&0x01) == 0 && (prev_button_states&0x01) != 0) {
 8000376:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d10c      	bne.n	800039c <main+0x1d4>
 8000382:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d006      	beq.n	800039c <main+0x1d4>
			  solid_colour_grid(grid, 0x01);
 800038e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000392:	2101      	movs	r1, #1
 8000394:	4618      	mov	r0, r3
 8000396:	f000 faae 	bl	80008f6 <solid_colour_grid>
 800039a:	e037      	b.n	800040c <main+0x244>
		  }
		  else if ((button_states&0x02) == 0 && (prev_button_states&0x02) != 0)
 800039c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80003a0:	f003 0302 	and.w	r3, r3, #2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d10c      	bne.n	80003c2 <main+0x1fa>
 80003a8:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80003ac:	f003 0302 	and.w	r3, r3, #2
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d006      	beq.n	80003c2 <main+0x1fa>
		  {
			  solid_colour_grid(grid, 0x02);
 80003b4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80003b8:	2102      	movs	r1, #2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fa9b 	bl	80008f6 <solid_colour_grid>
 80003c0:	e024      	b.n	800040c <main+0x244>
		  }
		  else if ((button_states&0x04) == 0 && (prev_button_states&0x04) != 0)
 80003c2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80003c6:	f003 0304 	and.w	r3, r3, #4
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d10c      	bne.n	80003e8 <main+0x220>
 80003ce:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d006      	beq.n	80003e8 <main+0x220>
		  {
			  solid_colour_grid(grid, 0x03);
 80003da:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80003de:	2103      	movs	r1, #3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fa88 	bl	80008f6 <solid_colour_grid>
 80003e6:	e011      	b.n	800040c <main+0x244>
		  }
		  else if ((button_states&0x08) == 0 && (prev_button_states&0x08) != 0)
 80003e8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <main+0x244>
 80003f4:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d005      	beq.n	800040c <main+0x244>
		  {
			  solid_colour_grid(grid, 0x04);
 8000400:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000404:	2104      	movs	r1, #4
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fa75 	bl	80008f6 <solid_colour_grid>
		  }




		  set_grid(matrix, grid, colours, 8);
 800040c:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8000410:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8000414:	4638      	mov	r0, r7
 8000416:	2308      	movs	r3, #8
 8000418:	f000 fa08 	bl	800082c <set_grid>





	  prev_button_states = button_states;
 800041c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000420:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
	  button_states = update_button_states(button_states, button_list, button_time_diffs);
 8000424:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000428:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800042c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fab9 	bl	80009a8 <update_button_states>
 8000436:	4603      	mov	r3, r0
 8000438:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103



	  display(matrix);
 800043c:	463b      	mov	r3, r7
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fa74 	bl	800092c <display>


	if (HAL_GetTick() - status_diff_millis > 1000) {
 8000444:	f000 fc4c 	bl	8000ce0 <HAL_GetTick>
 8000448:	4602      	mov	r2, r0
 800044a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800044e:	1ad3      	subs	r3, r2, r3
 8000450:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000454:	bf8c      	ite	hi
 8000456:	2301      	movhi	r3, #1
 8000458:	2300      	movls	r3, #0
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d084      	beq.n	800036a <main+0x1a2>
		status_diff_millis = HAL_GetTick();
 8000460:	f000 fc3e 	bl	8000ce0 <HAL_GetTick>
 8000464:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
		LED_heartbeat();
 8000468:	f000 f9aa 	bl	80007c0 <LED_heartbeat>
	  if (prev_button_states != button_states) {
 800046c:	e77d      	b.n	800036a <main+0x1a2>
 800046e:	bf00      	nop
 8000470:	48000800 	.word	0x48000800
 8000474:	48000400 	.word	0x48000400
 8000478:	080032d0 	.word	0x080032d0
 800047c:	08003300 	.word	0x08003300
 8000480:	0800331c 	.word	0x0800331c

08000484 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09e      	sub	sp, #120	@ 0x78
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800048e:	2228      	movs	r2, #40	@ 0x28
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f002 fee4 	bl	8003260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	223c      	movs	r2, #60	@ 0x3c
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fed6 	bl	8003260 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b4:	2302      	movs	r3, #2
 80004b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004bc:	2310      	movs	r3, #16
 80004be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 fb0b 	bl	8001ae4 <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80004de:	f000 faca 	bl	8000a76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e6:	2300      	movs	r3, #0
 80004e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f002 fb2f 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	bf14      	ite	ne
 8000508:	2301      	movne	r3, #1
 800050a:	2300      	moveq	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000512:	f000 fab0 	bl	8000a76 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000516:	2320      	movs	r3, #32
 8000518:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	4618      	mov	r0, r3
 8000522:	f002 fced 	bl	8002f00 <HAL_RCCEx_PeriphCLKConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000536:	f000 fa9e 	bl	8000a76 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3778      	adds	r7, #120	@ 0x78
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 8000548:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 800054a:	4a24      	ldr	r2, [pc, #144]	@ (80005dc <_ZL12MX_I2C1_Initv+0x98>)
 800054c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x0000020B;
 800054e:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 8000550:	f240 220b 	movw	r2, #523	@ 0x20b
 8000554:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8000556:	4b20      	ldr	r3, [pc, #128]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055c:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 800055e:	2201      	movs	r2, #1
 8000560:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000580:	4815      	ldr	r0, [pc, #84]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 8000582:	f000 fe49 	bl	8001218 <HAL_I2C_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	bf14      	ite	ne
 800058c:	2301      	movne	r3, #1
 800058e:	2300      	moveq	r3, #0
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <_ZL12MX_I2C1_Initv+0x56>
	  {
	    Error_Handler();
 8000596:	f000 fa6e 	bl	8000a76 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800059a:	2100      	movs	r1, #0
 800059c:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 800059e:	f001 fa09 	bl	80019b4 <HAL_I2CEx_ConfigAnalogFilter>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf14      	ite	ne
 80005a8:	2301      	movne	r3, #1
 80005aa:	2300      	moveq	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <_ZL12MX_I2C1_Initv+0x72>
	  {
	    Error_Handler();
 80005b2:	f000 fa60 	bl	8000a76 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <_ZL12MX_I2C1_Initv+0x94>)
 80005ba:	f001 fa46 	bl	8001a4a <HAL_I2CEx_ConfigDigitalFilter>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	bf14      	ite	ne
 80005c4:	2301      	movne	r3, #1
 80005c6:	2300      	moveq	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <_ZL12MX_I2C1_Initv+0x8e>
	  {
	    Error_Handler();
 80005ce:	f000 fa52 	bl	8000a76 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40005400 	.word	0x40005400

080005e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b41      	ldr	r3, [pc, #260]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a40      	ldr	r2, [pc, #256]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 80005fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b3e      	ldr	r3, [pc, #248]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a3a      	ldr	r2, [pc, #232]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b35      	ldr	r3, [pc, #212]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a34      	ldr	r2, [pc, #208]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 800062c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <_ZL12MX_GPIO_Initv+0x11c>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000644:	482e      	ldr	r0, [pc, #184]	@ (8000700 <_ZL12MX_GPIO_Initv+0x120>)
 8000646:	f000 fdcf 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f248 0130 	movw	r1, #32816	@ 0x8030
 8000650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000654:	f000 fdc8 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000658:	2200      	movs	r2, #0
 800065a:	21f8      	movs	r1, #248	@ 0xf8
 800065c:	4829      	ldr	r0, [pc, #164]	@ (8000704 <_ZL12MX_GPIO_Initv+0x124>)
 800065e:	f000 fdc3 	bl	80011e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000662:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	4821      	ldr	r0, [pc, #132]	@ (8000700 <_ZL12MX_GPIO_Initv+0x120>)
 800067c:	f000 fc22 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000680:	f641 730f 	movw	r3, #7951	@ 0x1f0f
 8000684:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f000 fc14 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 800069c:	f248 0330 	movw	r3, #32816	@ 0x8030
 80006a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f000 fc04 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	@ (8000704 <_ZL12MX_GPIO_Initv+0x124>)
 80006d2:	f000 fbf7 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80006d6:	23f8      	movs	r3, #248	@ 0xf8
 80006d8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <_ZL12MX_GPIO_Initv+0x124>)
 80006ee:	f000 fbe9 	bl	8000ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000800 	.word	0x48000800
 8000704:	48000400 	.word	0x48000400

08000708 <TLC_init>:

/* USER CODE BEGIN 4 */

void TLC_init() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af02      	add	r7, sp, #8

	// Reset pin must be held high for LED driver to not be standby mode
	HAL_GPIO_WritePin(GPIOA, TLC_RESET, LOW);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000718:	f000 fd66 	bl	80011e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TLC_RESET, HIGH);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f000 fd5f 	bl	80011e8 <HAL_GPIO_WritePin>

	uint8_t buffer[2] = {MODE1, TLC_OSC_ON}; // Initialized to MODE1 register init; see section 9.6.1
 800072a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8000730:	1d3a      	adds	r2, r7, #4
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2302      	movs	r3, #2
 800073a:	21c0      	movs	r1, #192	@ 0xc0
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <TLC_init+0x44>)
 800073e:	f000 fe07 	bl	8001350 <HAL_I2C_Master_Transmit>

#ifdef afterglow
	row_on();
#endif
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000028 	.word	0x20000028

08000750 <row_off>:


void row_off() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af02      	add	r7, sp, #8
	uint8_t buffer[5] = {LEDOUT0, 0x00, 0x00, 0x00, 0x00};
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <row_off+0x30>)
 8000758:	463b      	mov	r3, r7
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	6018      	str	r0, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 8000764:	463a      	mov	r2, r7
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2305      	movs	r3, #5
 800076e:	21c0      	movs	r1, #192	@ 0xc0
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <row_off+0x34>)
 8000772:	f000 fded 	bl	8001350 <HAL_I2C_Master_Transmit>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	0800332c 	.word	0x0800332c
 8000784:	20000028 	.word	0x20000028

08000788 <row_on>:

void row_on() {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af02      	add	r7, sp, #8
	uint8_t buffer[5] = {LEDOUT0, TLC_PWM_MODE, TLC_PWM_MODE, TLC_PWM_MODE, TLC_PWM_MODE};
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <row_on+0x30>)
 8000790:	463b      	mov	r3, r7
 8000792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000796:	6018      	str	r0, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 800079c:	463a      	mov	r2, r7
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2305      	movs	r3, #5
 80007a6:	21c0      	movs	r1, #192	@ 0xc0
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <row_on+0x34>)
 80007aa:	f000 fdd1 	bl	8001350 <HAL_I2C_Master_Transmit>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	08003334 	.word	0x08003334
 80007bc:	20000028 	.word	0x20000028

080007c0 <LED_heartbeat>:


void LED_heartbeat() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	static uint8_t led_on = 0;

	if (led_on) {
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <LED_heartbeat+0x38>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d009      	beq.n	80007e0 <LED_heartbeat+0x20>
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, HIGH);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d2:	480a      	ldr	r0, [pc, #40]	@ (80007fc <LED_heartbeat+0x3c>)
 80007d4:	f000 fd08 	bl	80011e8 <HAL_GPIO_WritePin>
		led_on = 0;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <LED_heartbeat+0x38>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	else {
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, LOW);
		led_on = 1;
	}

}
 80007de:	e008      	b.n	80007f2 <LED_heartbeat+0x32>
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, LOW);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <LED_heartbeat+0x3c>)
 80007e8:	f000 fcfe 	bl	80011e8 <HAL_GPIO_WritePin>
		led_on = 1;
 80007ec:	4b02      	ldr	r3, [pc, #8]	@ (80007f8 <LED_heartbeat+0x38>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000007c 	.word	0x2000007c
 80007fc:	48000800 	.word	0x48000800

08000800 <set_LEDs>:


void set_LEDs(uint8_t* row_buffer) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af02      	add	r7, sp, #8
 8000806:	6078      	str	r0, [r7, #4]


#ifndef afterglow
	row_off();
 8000808:	f7ff ffa2 	bl	8000750 <row_off>
#endif

	// sets the colours of the LEDs
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, row_buffer, 17, HAL_MAX_DELAY);
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2311      	movs	r3, #17
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	21c0      	movs	r1, #192	@ 0xc0
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <set_LEDs+0x28>)
 800081a:	f000 fd99 	bl	8001350 <HAL_I2C_Master_Transmit>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000028 	.word	0x20000028

0800082c <set_grid>:

void set_grid(uint8_t** rows, uint8_t* grid, uint8_t* colours, uint8_t bright_modifier) {
 800082c:	b480      	push	{r7}
 800082e:	b087      	sub	sp, #28
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	70fb      	strb	r3, [r7, #3]


	uint8_t grid_index = 0, r, c, i, brightness, colour_id;
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]

	uint8_t col, test;

	for (r = 0; r < 5; r++) {
 800083e:	2300      	movs	r3, #0
 8000840:	75bb      	strb	r3, [r7, #22]
 8000842:	e04e      	b.n	80008e2 <set_grid+0xb6>

		for (c = 0; c < 5; c++) {
 8000844:	2300      	movs	r3, #0
 8000846:	757b      	strb	r3, [r7, #21]
 8000848:	e045      	b.n	80008d6 <set_grid+0xaa>

			brightness = bright_modifier * ((grid[grid_index]>>4) + 1) - 1;
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	4413      	add	r3, r2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	091b      	lsrs	r3, r3, #4
 8000854:	b2db      	uxtb	r3, r3
 8000856:	3301      	adds	r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	fb12 f303 	smulbb	r3, r2, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	3b01      	subs	r3, #1
 8000864:	74fb      	strb	r3, [r7, #19]
			colour_id = (grid[grid_index] & 0b00001111)*3;
 8000866:	7dfb      	ldrb	r3, [r7, #23]
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	4413      	add	r3, r2
 800087a:	74bb      	strb	r3, [r7, #18]

			for (i = 0; i < 3; i++) {
 800087c:	2300      	movs	r3, #0
 800087e:	753b      	strb	r3, [r7, #20]
 8000880:	e020      	b.n	80008c4 <set_grid+0x98>
				test = colours[colour_id+i] * brightness;
 8000882:	7cba      	ldrb	r2, [r7, #18]
 8000884:	7d3b      	ldrb	r3, [r7, #20]
 8000886:	4413      	add	r3, r2
 8000888:	461a      	mov	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	7cfa      	ldrb	r2, [r7, #19]
 8000892:	fb12 f303 	smulbb	r3, r2, r3
 8000896:	747b      	strb	r3, [r7, #17]
				col = (c*3) + i + 1;
 8000898:	7d7b      	ldrb	r3, [r7, #21]
 800089a:	461a      	mov	r2, r3
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	4413      	add	r3, r2
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	7d3b      	ldrb	r3, [r7, #20]
 80008a4:	4413      	add	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	743b      	strb	r3, [r7, #16]

				rows[r][col] = test;
 80008ac:	7dbb      	ldrb	r3, [r7, #22]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	7c3b      	ldrb	r3, [r7, #16]
 80008b8:	4413      	add	r3, r2
 80008ba:	7c7a      	ldrb	r2, [r7, #17]
 80008bc:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 3; i++) {
 80008be:	7d3b      	ldrb	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	753b      	strb	r3, [r7, #20]
 80008c4:	7d3b      	ldrb	r3, [r7, #20]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d9db      	bls.n	8000882 <set_grid+0x56>
			}

			grid_index++;
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	3301      	adds	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
		for (c = 0; c < 5; c++) {
 80008d0:	7d7b      	ldrb	r3, [r7, #21]
 80008d2:	3301      	adds	r3, #1
 80008d4:	757b      	strb	r3, [r7, #21]
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d9b6      	bls.n	800084a <set_grid+0x1e>
	for (r = 0; r < 5; r++) {
 80008dc:	7dbb      	ldrb	r3, [r7, #22]
 80008de:	3301      	adds	r3, #1
 80008e0:	75bb      	strb	r3, [r7, #22]
 80008e2:	7dbb      	ldrb	r3, [r7, #22]
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d9ad      	bls.n	8000844 <set_grid+0x18>
	//display_on();

  // index = num & 0b11110000)*3;
  // brightness = 16 * ((num>>4) + 1) - 1;
  // buffer[i] = colours[index+i] * brightness)
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <solid_colour_grid>:

void solid_colour_grid(uint8_t* grid, uint8_t colour) {
 80008f6:	b480      	push	{r7}
 80008f8:	b085      	sub	sp, #20
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 25; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e007      	b.n	8000918 <solid_colour_grid+0x22>
		grid[i] = colour;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	78fa      	ldrb	r2, [r7, #3]
 8000910:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 25; i++) {
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3301      	adds	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b18      	cmp	r3, #24
 800091c:	ddf4      	ble.n	8000908 <solid_colour_grid+0x12>
	}
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <display>:

void display(uint8_t** rows) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]


	for (int k = 0; k < 5; ++k) {
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e02a      	b.n	8000990 <display+0x64>
		set_LEDs(rows[k]);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff5b 	bl	8000800 <set_LEDs>
		HAL_GPIO_WritePin(MUX_PORT, MUX_1 << ((k+4)%5), HIGH);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	1d19      	adds	r1, r3, #4
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <display+0x74>)
 8000950:	fb83 2301 	smull	r2, r3, r3, r1
 8000954:	105a      	asrs	r2, r3, #1
 8000956:	17cb      	asrs	r3, r1, #31
 8000958:	1ad2      	subs	r2, r2, r3
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	1aca      	subs	r2, r1, r3
 8000962:	2308      	movs	r3, #8
 8000964:	4093      	lsls	r3, r2
 8000966:	b29b      	uxth	r3, r3
 8000968:	2201      	movs	r2, #1
 800096a:	4619      	mov	r1, r3
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <display+0x78>)
 800096e:	f000 fc3b 	bl	80011e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_PORT, MUX_1 << k, LOW);
 8000972:	2208      	movs	r2, #8
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <display+0x78>)
 8000982:	f000 fc31 	bl	80011e8 <HAL_GPIO_WritePin>
	#ifndef afterglow
		row_on();
 8000986:	f7ff feff 	bl	8000788 <row_on>
	for (int k = 0; k < 5; ++k) {
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3301      	adds	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b04      	cmp	r3, #4
 8000994:	ddd1      	ble.n	800093a <display+0xe>
	#endif

	}
}
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	66666667 	.word	0x66666667
 80009a4:	48000400 	.word	0x48000400

080009a8 <update_button_states>:

uint8_t update_button_states(uint8_t current_states, uint16_t* buttons, uint32_t* time_diff) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	73fb      	strb	r3, [r7, #15]

	uint8_t new_states = 0x00;
 80009b6:	2300      	movs	r3, #0
 80009b8:	75fb      	strb	r3, [r7, #23]
	uint32_t* temp;

	for (uint8_t btn = 0; btn < 8; btn++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	75bb      	strb	r3, [r7, #22]
 80009be:	e023      	b.n	8000a08 <update_button_states+0x60>
		temp = &time_diff[btn];
 80009c0:	7dbb      	ldrb	r3, [r7, #22]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
		new_states |= ((query_button_change(temp, buttons[btn], (current_states>>btn)&0x01))<<btn);
 80009ca:	7dbb      	ldrb	r3, [r7, #22]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	4413      	add	r3, r2
 80009d2:	8819      	ldrh	r1, [r3, #0]
 80009d4:	7bfa      	ldrb	r2, [r7, #15]
 80009d6:	7dbb      	ldrb	r3, [r7, #22]
 80009d8:	fa42 f303 	asr.w	r3, r2, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	461a      	mov	r2, r3
 80009e6:	6938      	ldr	r0, [r7, #16]
 80009e8:	f000 f819 	bl	8000a1e <query_button_change>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	7dbb      	ldrb	r3, [r7, #22]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	b25a      	sxtb	r2, r3
 80009f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	75fb      	strb	r3, [r7, #23]
	for (uint8_t btn = 0; btn < 8; btn++) {
 8000a02:	7dbb      	ldrb	r3, [r7, #22]
 8000a04:	3301      	adds	r3, #1
 8000a06:	75bb      	strb	r3, [r7, #22]
 8000a08:	7dbb      	ldrb	r3, [r7, #22]
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d9d8      	bls.n	80009c0 <update_button_states+0x18>
	}


	return current_states ^ new_states;
 8000a0e:	7bfa      	ldrb	r2, [r7, #15]
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	4053      	eors	r3, r2
 8000a14:	b2db      	uxtb	r3, r3
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <query_button_change>:

uint8_t query_button_change(uint32_t* last_pressed, uint16_t button, uint8_t current_state) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	807b      	strh	r3, [r7, #2]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	707b      	strb	r3, [r7, #1]


	if (HAL_GPIO_ReadPin(BUTTON_PORT, button) != current_state
 8000a2e:	887b      	ldrh	r3, [r7, #2]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f000 fbbf 	bl	80011b8 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
			&& HAL_GetTick() - *last_pressed > 10)
 8000a3e:	787b      	ldrb	r3, [r7, #1]
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d009      	beq.n	8000a58 <query_button_change+0x3a>
 8000a44:	f000 f94c 	bl	8000ce0 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	2b0a      	cmp	r3, #10
 8000a52:	d901      	bls.n	8000a58 <query_button_change+0x3a>
 8000a54:	2301      	movs	r3, #1
 8000a56:	e000      	b.n	8000a5a <query_button_change+0x3c>
 8000a58:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin(BUTTON_PORT, button) != current_state
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <query_button_change+0x4e>
	{
		*last_pressed = HAL_GetTick();
 8000a5e:	f000 f93f 	bl	8000ce0 <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
		return 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <query_button_change+0x50>
	}


	return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7a:	b672      	cpsid	i
}
 8000a7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7e:	bf00      	nop
 8000a80:	e7fd      	b.n	8000a7e <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <HAL_I2C_MspInit+0x7c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d128      	bne.n	8000b40 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <HAL_I2C_MspInit+0x80>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <HAL_I2C_MspInit+0x80>)
 8000af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <HAL_I2C_MspInit+0x80>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <HAL_I2C_MspInit+0x84>)
 8000b24:	f000 f9ce 	bl	8000ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_I2C_MspInit+0x80>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	@ (8000b4c <HAL_I2C_MspInit+0x80>)
 8000b2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b32:	61d3      	str	r3, [r2, #28]
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_I2C_MspInit+0x80>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000400 	.word	0x48000400

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f885 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c10 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f002 fb33 	bl	8003270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fadd 	bl	80001c8 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c1c:	08003374 	.word	0x08003374
  ldr r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c24:	20000084 	.word	0x20000084

08000c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_2_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <HAL_Init+0x28>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_Init+0x28>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f90d 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f000 f808 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff ff1c 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f917 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 f8ed 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000080 	.word	0x20000080

08000ce0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000080 	.word	0x20000080

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff47 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff5c 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffb0 	bl	8000e18 <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed2:	e154      	b.n	800117e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8146 	beq.w	8001178 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d005      	beq.n	8000f04 <HAL_GPIO_Init+0x40>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d130      	bne.n	8000f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	f003 0201 	and.w	r2, r3, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d017      	beq.n	8000fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d123      	bne.n	8000ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	6939      	ldr	r1, [r7, #16]
 8000ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0203 	and.w	r2, r3, #3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 80a0 	beq.w	8001178 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <HAL_GPIO_Init+0x2d8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a57      	ldr	r2, [pc, #348]	@ (800119c <HAL_GPIO_Init+0x2d8>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b55      	ldr	r3, [pc, #340]	@ (800119c <HAL_GPIO_Init+0x2d8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001050:	4a53      	ldr	r2, [pc, #332]	@ (80011a0 <HAL_GPIO_Init+0x2dc>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800107a:	d019      	beq.n	80010b0 <HAL_GPIO_Init+0x1ec>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a49      	ldr	r2, [pc, #292]	@ (80011a4 <HAL_GPIO_Init+0x2e0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d013      	beq.n	80010ac <HAL_GPIO_Init+0x1e8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a48      	ldr	r2, [pc, #288]	@ (80011a8 <HAL_GPIO_Init+0x2e4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d00d      	beq.n	80010a8 <HAL_GPIO_Init+0x1e4>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a47      	ldr	r2, [pc, #284]	@ (80011ac <HAL_GPIO_Init+0x2e8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x1e0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a46      	ldr	r2, [pc, #280]	@ (80011b0 <HAL_GPIO_Init+0x2ec>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_GPIO_Init+0x1dc>
 800109c:	2304      	movs	r3, #4
 800109e:	e008      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010a0:	2305      	movs	r3, #5
 80010a2:	e006      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010a4:	2303      	movs	r3, #3
 80010a6:	e004      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010b0:	2300      	movs	r3, #0
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4093      	lsls	r3, r2
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c2:	4937      	ldr	r1, [pc, #220]	@ (80011a0 <HAL_GPIO_Init+0x2dc>)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d0:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f4:	4a2f      	ldr	r2, [pc, #188]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800111e:	4a25      	ldr	r2, [pc, #148]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001124:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001148:	4a1a      	ldr	r2, [pc, #104]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3301      	adds	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	f47f aea3 	bne.w	8000ed4 <HAL_GPIO_Init+0x10>
  }
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000800 	.word	0x48000800
 80011ac:	48000c00 	.word	0x48000c00
 80011b0:	48001000 	.word	0x48001000
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001204:	e002      	b.n	800120c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e08d      	b.n	8001346 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fc44 	bl	8000acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2224      	movs	r2, #36	@ 0x24
 8001248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001268:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001278:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d107      	bne.n	8001292 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	e006      	b.n	80012a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800129e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d108      	bne.n	80012ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	e007      	b.n	80012ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69d9      	ldr	r1, [r3, #28]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1a      	ldr	r2, [r3, #32]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2220      	movs	r2, #32
 8001332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af02      	add	r7, sp, #8
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	461a      	mov	r2, r3
 800135c:	460b      	mov	r3, r1
 800135e:	817b      	strh	r3, [r7, #10]
 8001360:	4613      	mov	r3, r2
 8001362:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b20      	cmp	r3, #32
 800136e:	f040 80fd 	bne.w	800156c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_I2C_Master_Transmit+0x30>
 800137c:	2302      	movs	r3, #2
 800137e:	e0f6      	b.n	800156e <HAL_I2C_Master_Transmit+0x21e>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001388:	f7ff fcaa 	bl	8000ce0 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2319      	movs	r3, #25
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f914 	bl	80015c8 <I2C_WaitOnFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e0e1      	b.n	800156e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2221      	movs	r2, #33	@ 0x21
 80013ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2210      	movs	r2, #16
 80013b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	893a      	ldrh	r2, [r7, #8]
 80013ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2bff      	cmp	r3, #255	@ 0xff
 80013da:	d906      	bls.n	80013ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	22ff      	movs	r2, #255	@ 0xff
 80013e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80013e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e007      	b.n	80013fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d024      	beq.n	800144c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800142a:	3b01      	subs	r3, #1
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	8979      	ldrh	r1, [r7, #10]
 800143e:	4b4e      	ldr	r3, [pc, #312]	@ (8001578 <HAL_I2C_Master_Transmit+0x228>)
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fa83 	bl	8001950 <I2C_TransferConfig>
 800144a:	e066      	b.n	800151a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001450:	b2da      	uxtb	r2, r3
 8001452:	8979      	ldrh	r1, [r7, #10]
 8001454:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <HAL_I2C_Master_Transmit+0x228>)
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fa78 	bl	8001950 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001460:	e05b      	b.n	800151a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	6a39      	ldr	r1, [r7, #32]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f907 	bl	800167a <I2C_WaitOnTXISFlagUntilTimeout>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07b      	b.n	800156e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	3b01      	subs	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d034      	beq.n	800151a <HAL_I2C_Master_Transmit+0x1ca>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d130      	bne.n	800151a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2200      	movs	r2, #0
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f880 	bl	80015c8 <I2C_WaitOnFlagUntilTimeout>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e04d      	b.n	800156e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2bff      	cmp	r3, #255	@ 0xff
 80014da:	d90e      	bls.n	80014fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	22ff      	movs	r2, #255	@ 0xff
 80014e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	8979      	ldrh	r1, [r7, #10]
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 fa2c 	bl	8001950 <I2C_TransferConfig>
 80014f8:	e00f      	b.n	800151a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001508:	b2da      	uxtb	r2, r3
 800150a:	8979      	ldrh	r1, [r7, #10]
 800150c:	2300      	movs	r3, #0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fa1b 	bl	8001950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151e:	b29b      	uxth	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d19e      	bne.n	8001462 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f8ed 	bl	8001708 <I2C_WaitOnSTOPFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e01a      	b.n	800156e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2220      	movs	r2, #32
 800153e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6859      	ldr	r1, [r3, #4]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_I2C_Master_Transmit+0x22c>)
 800154c:	400b      	ands	r3, r1
 800154e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2220      	movs	r2, #32
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800156c:	2302      	movs	r3, #2
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	80002000 	.word	0x80002000
 800157c:	fe00e800 	.word	0xfe00e800

08001580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b02      	cmp	r3, #2
 8001594:	d103      	bne.n	800159e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d007      	beq.n	80015bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	619a      	str	r2, [r3, #24]
  }
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	4613      	mov	r3, r2
 80015d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015d8:	e03b      	b.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	6839      	ldr	r1, [r7, #0]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 f8d6 	bl	8001790 <I2C_IsErrorOccurred>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e041      	b.n	8001672 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d02d      	beq.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f6:	f7ff fb73 	bl	8000ce0 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d302      	bcc.n	800160c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d122      	bne.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4013      	ands	r3, r2
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	429a      	cmp	r2, r3
 8001628:	d113      	bne.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f043 0220 	orr.w	r2, r3, #32
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4013      	ands	r3, r2
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	429a      	cmp	r2, r3
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	429a      	cmp	r2, r3
 800166e:	d0b4      	beq.n	80015da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001686:	e033      	b.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f87f 	bl	8001790 <I2C_IsErrorOccurred>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e031      	b.n	8001700 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a2:	d025      	beq.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a4:	f7ff fb1c 	bl	8000ce0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d302      	bcc.n	80016ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11a      	bne.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d013      	beq.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016cc:	f043 0220 	orr.w	r2, r3, #32
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e007      	b.n	8001700 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d1c4      	bne.n	8001688 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001714:	e02f      	b.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f838 	bl	8001790 <I2C_IsErrorOccurred>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e02d      	b.n	8001786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172a:	f7ff fad9 	bl	8000ce0 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	429a      	cmp	r2, r3
 8001738:	d302      	bcc.n	8001740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d11a      	bne.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	2b20      	cmp	r3, #32
 800174c:	d013      	beq.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f043 0220 	orr.w	r2, r3, #32
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e007      	b.n	8001786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	2b20      	cmp	r3, #32
 8001782:	d1c8      	bne.n	8001716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d068      	beq.n	800188e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2210      	movs	r2, #16
 80017c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017c4:	e049      	b.n	800185a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d045      	beq.n	800185a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017ce:	f7ff fa87 	bl	8000ce0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d302      	bcc.n	80017e4 <I2C_IsErrorOccurred+0x54>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d13a      	bne.n	800185a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001806:	d121      	bne.n	800184c <I2C_IsErrorOccurred+0xbc>
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800180e:	d01d      	beq.n	800184c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001810:	7cfb      	ldrb	r3, [r7, #19]
 8001812:	2b20      	cmp	r3, #32
 8001814:	d01a      	beq.n	800184c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001824:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001826:	f7ff fa5b 	bl	8000ce0 <HAL_GetTick>
 800182a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800182c:	e00e      	b.n	800184c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800182e:	f7ff fa57 	bl	8000ce0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b19      	cmp	r3, #25
 800183a:	d907      	bls.n	800184c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800184a:	e006      	b.n	800185a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	2b20      	cmp	r3, #32
 8001858:	d1e9      	bne.n	800182e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	2b20      	cmp	r3, #32
 8001866:	d003      	beq.n	8001870 <I2C_IsErrorOccurred+0xe0>
 8001868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0aa      	beq.n	80017c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001874:	2b00      	cmp	r3, #0
 8001876:	d103      	bne.n	8001880 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2220      	movs	r2, #32
 800187e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00b      	beq.n	80018b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00b      	beq.n	80018fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80018fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01c      	beq.n	800193e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fe3b 	bl	8001580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <I2C_IsErrorOccurred+0x1bc>)
 8001916:	400b      	ands	r3, r1
 8001918:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	431a      	orrs	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800193e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001942:	4618      	mov	r0, r3
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	fe00e800 	.word	0xfe00e800

08001950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	817b      	strh	r3, [r7, #10]
 800195e:	4613      	mov	r3, r2
 8001960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001968:	7a7b      	ldrb	r3, [r7, #9]
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001970:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	4313      	orrs	r3, r2
 800197a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800197e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	0d5b      	lsrs	r3, r3, #21
 800198a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <I2C_TransferConfig+0x60>)
 8001990:	430b      	orrs	r3, r1
 8001992:	43db      	mvns	r3, r3
 8001994:	ea02 0103 	and.w	r1, r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	03ff63ff 	.word	0x03ff63ff

080019b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d138      	bne.n	8001a3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e032      	b.n	8001a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	@ 0x24
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d139      	bne.n	8001ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e033      	b.n	8001ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2224      	movs	r2, #36	@ 0x24
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
  }
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f001 b823 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 817d 	beq.w	8001e1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b20:	4bbc      	ldr	r3, [pc, #752]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2c:	4bb9      	ldr	r3, [pc, #740]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d15c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x10e>
 8001b38:	4bb6      	ldr	r3, [pc, #728]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b44:	d155      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x10e>
 8001b46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b4a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d102      	bne.n	8001b78 <HAL_RCC_OscConfig+0x94>
 8001b72:	4ba8      	ldr	r3, [pc, #672]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	e015      	b.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001b78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b7c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b90:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ba0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ba8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001bac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bb0:	fa92 f2a2 	rbit	r2, r2
 8001bb4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001bb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001bbc:	fab2 f282 	clz	r2, r2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	f042 0220 	orr.w	r2, r2, #32
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f002 021f 	and.w	r2, r2, #31
 8001bcc:	2101      	movs	r1, #1
 8001bce:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 811f 	beq.w	8001e18 <HAL_RCC_OscConfig+0x334>
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 8116 	bne.w	8001e18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f000 bfaf 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12e>
 8001c04:	4b83      	ldr	r3, [pc, #524]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a82      	ldr	r2, [pc, #520]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e036      	b.n	8001c80 <HAL_RCC_OscConfig+0x19c>
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x158>
 8001c22:	4b7c      	ldr	r3, [pc, #496]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7b      	ldr	r2, [pc, #492]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b79      	ldr	r3, [pc, #484]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a78      	ldr	r2, [pc, #480]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e021      	b.n	8001c80 <HAL_RCC_OscConfig+0x19c>
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x184>
 8001c4e:	4b71      	ldr	r3, [pc, #452]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a70      	ldr	r2, [pc, #448]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x19c>
 8001c68:	4b6a      	ldr	r3, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a69      	ldr	r2, [pc, #420]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b67      	ldr	r3, [pc, #412]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a66      	ldr	r2, [pc, #408]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c80:	4b64      	ldr	r3, [pc, #400]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	f023 020f 	bic.w	r2, r3, #15
 8001c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	495f      	ldr	r1, [pc, #380]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d059      	beq.n	8001d5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f819 	bl	8000ce0 <HAL_GetTick>
 8001cae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f814 	bl	8000ce0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	@ 0x64
 8001cc2:	d902      	bls.n	8001cca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f000 bf43 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 8001cca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001cde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0x218>
 8001cf6:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x244>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d00:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d24:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d2c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ab      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1d0>
 8001d5c:	e05d      	b.n	8001e1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe ffbf 	bl	8000ce0 <HAL_GetTick>
 8001d62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d68:	f7fe ffba 	bl	8000ce0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b64      	cmp	r3, #100	@ 0x64
 8001d76:	d902      	bls.n	8001d7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f000 bee9 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 8001d7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d102      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2cc>
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	e015      	b.n	8001ddc <HAL_RCC_OscConfig+0x2f8>
 8001db0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001dcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_RCC_OscConfig+0x330>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001de0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001de4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001de8:	fa92 f2a2 	rbit	r2, r2
 8001dec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001df0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ab      	bne.n	8001d68 <HAL_RCC_OscConfig+0x284>
 8001e10:	e003      	b.n	8001e1a <HAL_RCC_OscConfig+0x336>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 817d 	beq.w	800212a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e30:	4ba6      	ldr	r3, [pc, #664]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e3c:	4ba3      	ldr	r3, [pc, #652]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d172      	bne.n	8001f2e <HAL_RCC_OscConfig+0x44a>
 8001e48:	4ba0      	ldr	r3, [pc, #640]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d16c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x44a>
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d102      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3a0>
 8001e7e:	4b93      	ldr	r3, [pc, #588]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	e013      	b.n	8001eac <HAL_RCC_OscConfig+0x3c8>
 8001e84:	2302      	movs	r3, #2
 8001e86:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ea8:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	2202      	movs	r2, #2
 8001eae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001eb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001eb6:	fa92 f2a2 	rbit	r2, r2
 8001eba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ebe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f042 0220 	orr.w	r2, r2, #32
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f002 021f 	and.w	r2, r2, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x410>
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f000 be2e 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b75      	ldr	r3, [pc, #468]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	21f8      	movs	r1, #248	@ 0xf8
 8001f0a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f12:	fa91 f1a1 	rbit	r1, r1
 8001f16:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f1e:	fab1 f181 	clz	r1, r1
 8001f22:	b2c9      	uxtb	r1, r1
 8001f24:	408b      	lsls	r3, r1
 8001f26:	4969      	ldr	r1, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2c:	e0fd      	b.n	800212a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8088 	beq.w	8002050 <HAL_RCC_OscConfig+0x56c>
 8001f40:	2301      	movs	r3, #1
 8001f42:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f52:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	461a      	mov	r2, r3
 8001f68:	2301      	movs	r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe feb8 	bl	8000ce0 <HAL_GetTick>
 8001f70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7fe feb3 	bl	8000ce0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d902      	bls.n	8001f8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f000 bde2 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4d8>
 8001fb6:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e013      	b.n	8001fe4 <HAL_RCC_OscConfig+0x500>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001fea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fee:	fa92 f2a2 	rbit	r2, r2
 8001ff2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ff6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f002 021f 	and.w	r2, r2, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0af      	beq.n	8001f76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	21f8      	movs	r1, #248	@ 0xf8
 800202c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002034:	fa91 f1a1 	rbit	r1, r1
 8002038:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800203c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002040:	fab1 f181 	clz	r1, r1
 8002044:	b2c9      	uxtb	r1, r1
 8002046:	408b      	lsls	r3, r1
 8002048:	4920      	ldr	r1, [pc, #128]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
 800204e:	e06c      	b.n	800212a <HAL_RCC_OscConfig+0x646>
 8002050:	2301      	movs	r3, #1
 8002052:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002062:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002070:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	461a      	mov	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe fe30 	bl	8000ce0 <HAL_GetTick>
 8002080:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe fe2b 	bl	8000ce0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d902      	bls.n	800209c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	f000 bd5a 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 800209c:	2302      	movs	r3, #2
 800209e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80020ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d104      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5ec>
 80020c6:	4b01      	ldr	r3, [pc, #4]	@ (80020cc <HAL_RCC_OscConfig+0x5e8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e015      	b.n	80020f8 <HAL_RCC_OscConfig+0x614>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020e2:	2302      	movs	r3, #2
 80020e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020f4:	4bc8      	ldr	r3, [pc, #800]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	2202      	movs	r2, #2
 80020fa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800210a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ad      	bne.n	8002086 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8110 	beq.w	8002360 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d079      	beq.n	8002244 <HAL_RCC_OscConfig+0x760>
 8002150:	2301      	movs	r3, #1
 8002152:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4bab      	ldr	r3, [pc, #684]	@ (800241c <HAL_RCC_OscConfig+0x938>)
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	461a      	mov	r2, r3
 8002176:	2301      	movs	r3, #1
 8002178:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7fe fdb1 	bl	8000ce0 <HAL_GetTick>
 800217e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002184:	f7fe fdac 	bl	8000ce0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d902      	bls.n	800219a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	f000 bcdb 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021d8:	2202      	movs	r2, #2
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 80021f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002200:	2102      	movs	r1, #2
 8002202:	6019      	str	r1, [r3, #0]
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f1a3 	rbit	r1, r3
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800221a:	6019      	str	r1, [r3, #0]
  return result;
 800221c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002220:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0a0      	beq.n	8002184 <HAL_RCC_OscConfig+0x6a0>
 8002242:	e08d      	b.n	8002360 <HAL_RCC_OscConfig+0x87c>
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f2a3 	rbit	r2, r3
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002266:	601a      	str	r2, [r3, #0]
  return result;
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002270:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4b68      	ldr	r3, [pc, #416]	@ (800241c <HAL_RCC_OscConfig+0x938>)
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	461a      	mov	r2, r3
 8002282:	2300      	movs	r3, #0
 8002284:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7fe fd2b 	bl	8000ce0 <HAL_GetTick>
 800228a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe fd26 	bl	8000ce0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d902      	bls.n	80022a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	f000 bc55 	b.w	8002b50 <HAL_RCC_OscConfig+0x106c>
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ae:	2202      	movs	r2, #2
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022d2:	2202      	movs	r2, #2
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022f6:	2202      	movs	r2, #2
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002312:	4b41      	ldr	r3, [pc, #260]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 8002314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800231e:	2102      	movs	r1, #2
 8002320:	6019      	str	r1, [r3, #0]
 8002322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002326:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f1a3 	rbit	r1, r3
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002338:	6019      	str	r1, [r3, #0]
  return result;
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d197      	bne.n	8002290 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 81a1 	beq.w	80026b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237c:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d116      	bne.n	80023b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a22      	ldr	r2, [pc, #136]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11a      	bne.n	80023f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fc87 	bl	8000ce0 <HAL_GetTick>
 80023d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	e009      	b.n	80023ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fc82 	bl	8000ce0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	@ 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e3b1      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <HAL_RCC_OscConfig+0x93c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ef      	beq.n	80023d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d10d      	bne.n	8002424 <HAL_RCC_OscConfig+0x940>
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a02      	ldr	r2, [pc, #8]	@ (8002418 <HAL_RCC_OscConfig+0x934>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e03c      	b.n	8002490 <HAL_RCC_OscConfig+0x9ac>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	10908120 	.word	0x10908120
 8002420:	40007000 	.word	0x40007000
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x96a>
 8002434:	4bc1      	ldr	r3, [pc, #772]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4ac0      	ldr	r2, [pc, #768]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4bbe      	ldr	r3, [pc, #760]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4abd      	ldr	r2, [pc, #756]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e020      	b.n	8002490 <HAL_RCC_OscConfig+0x9ac>
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x994>
 800245e:	4bb7      	ldr	r3, [pc, #732]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4ab6      	ldr	r2, [pc, #728]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4bb4      	ldr	r3, [pc, #720]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4ab3      	ldr	r2, [pc, #716]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x9ac>
 8002478:	4bb0      	ldr	r3, [pc, #704]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4aaf      	ldr	r2, [pc, #700]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	4bad      	ldr	r3, [pc, #692]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4aac      	ldr	r2, [pc, #688]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800248a:	f023 0304 	bic.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8081 	beq.w	80025a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fc1d 	bl	8000ce0 <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fc18 	bl	8000ce0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e345      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024cc:	2202      	movs	r2, #2
 80024ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800250a:	601a      	str	r2, [r3, #0]
  return result;
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002514:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d102      	bne.n	8002530 <HAL_RCC_OscConfig+0xa4c>
 800252a:	4b84      	ldr	r3, [pc, #528]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0xa74>
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002538:	2202      	movs	r2, #2
 800253a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	4b79      	ldr	r3, [pc, #484]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002560:	2102      	movs	r1, #2
 8002562:	6011      	str	r1, [r2, #0]
 8002564:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002568:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	fa92 f1a2 	rbit	r1, r2
 8002572:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002576:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800257a:	6011      	str	r1, [r2, #0]
  return result;
 800257c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002580:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d084      	beq.n	80024ac <HAL_RCC_OscConfig+0x9c8>
 80025a2:	e07f      	b.n	80026a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a4:	f7fe fb9c 	bl	8000ce0 <HAL_GetTick>
 80025a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fb97 	bl	8000ce0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e2c4      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025ce:	2202      	movs	r2, #2
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025f2:	2202      	movs	r2, #2
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800260c:	601a      	str	r2, [r3, #0]
  return result;
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002616:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0xb4e>
 800262c:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	e013      	b.n	800265a <HAL_RCC_OscConfig+0xb76>
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	4b39      	ldr	r3, [pc, #228]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002662:	2102      	movs	r1, #2
 8002664:	6011      	str	r1, [r2, #0]
 8002666:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800266a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	fa92 f1a2 	rbit	r1, r2
 8002674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002678:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800267c:	6011      	str	r1, [r2, #0]
  return result;
 800267e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002682:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f002 021f 	and.w	r2, r2, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d184      	bne.n	80025ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4a22      	ldr	r2, [pc, #136]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8242 	beq.w	8002b4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_RCC_OscConfig+0xc58>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	f000 8213 	beq.w	8002afe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f040 8162 	bne.w	80029ae <HAL_RCC_OscConfig+0xeca>
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800270e:	601a      	str	r2, [r3, #0]
  return result;
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002718:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002724:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	461a      	mov	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fad6 	bl	8000ce0 <HAL_GetTick>
 8002734:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	e00c      	b.n	8002754 <HAL_RCC_OscConfig+0xc70>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe face 	bl	8000ce0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1fd      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800275c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f2a3 	rbit	r2, r3
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002778:	601a      	str	r2, [r3, #0]
  return result;
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002782:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_RCC_OscConfig+0xcba>
 8002798:	4bb0      	ldr	r3, [pc, #704]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	e027      	b.n	80027ee <HAL_RCC_OscConfig+0xd0a>
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	4b9c      	ldr	r3, [pc, #624]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027fa:	6011      	str	r1, [r2, #0]
 80027fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002800:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	fa92 f1a2 	rbit	r1, r2
 800280a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002812:	6011      	str	r1, [r2, #0]
  return result;
 8002814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002818:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	fab2 f282 	clz	r2, r2
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f042 0220 	orr.w	r2, r2, #32
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f002 021f 	and.w	r2, r2, #31
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f202 	lsl.w	r2, r1, r2
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d182      	bne.n	8002740 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283a:	4b88      	ldr	r3, [pc, #544]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	430b      	orrs	r3, r1
 800285c:	497f      	ldr	r1, [pc, #508]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800286a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002886:	601a      	str	r2, [r3, #0]
  return result;
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002890:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800289c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	461a      	mov	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fa1a 	bl	8000ce0 <HAL_GetTick>
 80028ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b0:	e009      	b.n	80028c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fa15 	bl	8000ce0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e144      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028ea:	601a      	str	r2, [r3, #0]
  return result;
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_RCC_OscConfig+0xe2c>
 800290a:	4b54      	ldr	r3, [pc, #336]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e027      	b.n	8002960 <HAL_RCC_OscConfig+0xe7c>
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002918:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800293e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fa93 f2a3 	rbit	r2, r3
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002964:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002968:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800296c:	6011      	str	r1, [r2, #0]
 800296e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002972:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	fa92 f1a2 	rbit	r1, r2
 800297c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002980:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002984:	6011      	str	r1, [r2, #0]
  return result;
 8002986:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0220 	orr.w	r2, r2, #32
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d082      	beq.n	80028b2 <HAL_RCC_OscConfig+0xdce>
 80029ac:	e0cf      	b.n	8002b4e <HAL_RCC_OscConfig+0x106a>
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029d2:	601a      	str	r2, [r3, #0]
  return result;
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe f974 	bl	8000ce0 <HAL_GetTick>
 80029f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	e009      	b.n	8002a12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe f96f 	bl	8000ce0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e09e      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f2a3 	rbit	r2, r3
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a36:	601a      	str	r2, [r3, #0]
  return result;
 8002a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d104      	bne.n	8002a60 <HAL_RCC_OscConfig+0xf7c>
 8002a56:	4b01      	ldr	r3, [pc, #4]	@ (8002a5c <HAL_RCC_OscConfig+0xf78>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	e029      	b.n	8002ab0 <HAL_RCC_OscConfig+0xfcc>
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <HAL_RCC_OscConfig+0x1078>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ab8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002abc:	6011      	str	r1, [r2, #0]
 8002abe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ac2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	fa92 f1a2 	rbit	r1, r2
 8002acc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ad0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ad4:	6011      	str	r1, [r2, #0]
  return result;
 8002ad6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ada:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f002 021f 	and.w	r2, r2, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d180      	bne.n	80029fe <HAL_RCC_OscConfig+0xf1a>
 8002afc:	e027      	b.n	8002b4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01e      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCC_OscConfig+0x1078>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b09e      	sub	sp, #120	@ 0x78
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e162      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b90      	ldr	r3, [pc, #576]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b8d      	ldr	r3, [pc, #564]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	498b      	ldr	r1, [pc, #556]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b89      	ldr	r3, [pc, #548]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e14a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b82      	ldr	r3, [pc, #520]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	497f      	ldr	r1, [pc, #508]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80dc 	beq.w	8002d8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d13c      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xf6>
 8002bdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xa6>
 8002c00:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	e00f      	b.n	8002c26 <HAL_RCC_ClockConfig+0xc6>
 8002c06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c22:	4b67      	ldr	r3, [pc, #412]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c2e:	fa92 f2a2 	rbit	r2, r2
 8002c32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c36:	fab2 f282 	clz	r2, r2
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f042 0220 	orr.w	r2, r2, #32
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f002 021f 	and.w	r2, r2, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d17b      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0f3      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d13c      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x178>
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x128>
 8002c82:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	e00f      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
 8002c88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca4:	4b46      	ldr	r3, [pc, #280]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cb0:	fa92 f2a2 	rbit	r2, r2
 8002cb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cb8:	fab2 f282 	clz	r2, r2
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f042 0220 	orr.w	r2, r2, #32
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f002 021f 	and.w	r2, r2, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f202 	lsl.w	r2, r1, r2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d13a      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0b2      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1a0>
 8002cfa:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e00d      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1bc>
 8002d00:	2302      	movs	r3, #2
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	61ba      	str	r2, [r7, #24]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	fa92 f2a2 	rbit	r2, r2
 8002d26:	617a      	str	r2, [r7, #20]
  return result;
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e079      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	491a      	ldr	r1, [pc, #104]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fd ffc0 	bl	8000ce0 <HAL_GetTick>
 8002d60:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fd ffbc 	bl	8000ce0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e061      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <HAL_RCC_ClockConfig+0x260>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d214      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	4906      	ldr	r1, [pc, #24]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e040      	b.n	8002e3e <HAL_RCC_ClockConfig+0x2de>
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	491a      	ldr	r1, [pc, #104]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4912      	ldr	r1, [pc, #72]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e02:	f000 f829 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e06:	4601      	mov	r1, r0
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_RCC_ClockConfig+0x2e8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e10:	22f0      	movs	r2, #240	@ 0xf0
 8002e12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	fa92 f2a2 	rbit	r2, r2
 8002e1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	40d3      	lsrs	r3, r2
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x2ec>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e2e:	4a08      	ldr	r2, [pc, #32]	@ (8002e50 <HAL_RCC_ClockConfig+0x2f0>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_RCC_ClockConfig+0x2f4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd ff0e 	bl	8000c58 <HAL_InitTick>
  
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3778      	adds	r7, #120	@ 0x78
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	0800333c 	.word	0x0800333c
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x30>
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x36>
 8002e86:	e026      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e88:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8a:	613b      	str	r3, [r7, #16]
      break;
 8002e8c:	e026      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	0c9b      	lsrs	r3, r3, #18
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	4a17      	ldr	r2, [pc, #92]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
 8002e9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	4a14      	ldr	r2, [pc, #80]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
      break;
 8002ed4:	e002      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed8:	613b      	str	r3, [r7, #16]
      break;
 8002eda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002edc:	693b      	ldr	r3, [r7, #16]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	007a1200 	.word	0x007a1200
 8002ef4:	0800334c 	.word	0x0800334c
 8002ef8:	0800335c 	.word	0x0800335c
 8002efc:	003d0900 	.word	0x003d0900

08002f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b092      	sub	sp, #72	@ 0x48
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80d4 	beq.w	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f24:	4b4e      	ldr	r3, [pc, #312]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10e      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b4b      	ldr	r3, [pc, #300]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a4a      	ldr	r2, [pc, #296]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
 8002f3c:	4b48      	ldr	r3, [pc, #288]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	4b45      	ldr	r3, [pc, #276]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d118      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5a:	4b42      	ldr	r3, [pc, #264]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a41      	ldr	r2, [pc, #260]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f66:	f7fd febb 	bl	8000ce0 <HAL_GetTick>
 8002f6a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7fd feb7 	bl	8000ce0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	@ 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e169      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b38      	ldr	r3, [pc, #224]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f8c:	4b34      	ldr	r3, [pc, #208]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8084 	beq.w	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d07c      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fac:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ffe:	4a18      	ldr	r2, [pc, #96]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003002:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04b      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fd fe67 	bl	8000ce0 <HAL_GetTick>
 8003012:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fd fe63 	bl	8000ce0 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e113      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800302c:	2302      	movs	r3, #2
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
 8003038:	2302      	movs	r3, #2
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	61fb      	str	r3, [r7, #28]
  return result;
 8003044:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d108      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800305a:	4b01      	ldr	r3, [pc, #4]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	e00d      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	10908100 	.word	0x10908100
 800306c:	2302      	movs	r3, #2
 800306e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	4b78      	ldr	r3, [pc, #480]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	2202      	movs	r2, #2
 800307e:	613a      	str	r2, [r7, #16]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	fa92 f2a2 	rbit	r2, r2
 8003086:	60fa      	str	r2, [r7, #12]
  return result;
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	fab2 f282 	clz	r2, r2
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f002 021f 	and.w	r2, r2, #31
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f202 	lsl.w	r2, r1, r2
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0b7      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030a6:	4b6d      	ldr	r3, [pc, #436]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	496a      	ldr	r1, [pc, #424]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b66      	ldr	r3, [pc, #408]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4a65      	ldr	r2, [pc, #404]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d8:	4b60      	ldr	r3, [pc, #384]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	f023 0203 	bic.w	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	495d      	ldr	r1, [pc, #372]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f6:	4b59      	ldr	r3, [pc, #356]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4956      	ldr	r1, [pc, #344]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003104:	4313      	orrs	r3, r2
 8003106:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003114:	4b51      	ldr	r3, [pc, #324]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	494e      	ldr	r1, [pc, #312]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003132:	4b4a      	ldr	r3, [pc, #296]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f023 0210 	bic.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4947      	ldr	r1, [pc, #284]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003150:	4b42      	ldr	r3, [pc, #264]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	493f      	ldr	r1, [pc, #252]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800316e:	4b3b      	ldr	r3, [pc, #236]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f023 0220 	bic.w	r2, r3, #32
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4938      	ldr	r1, [pc, #224]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800318c:	4b33      	ldr	r3, [pc, #204]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	4930      	ldr	r1, [pc, #192]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031aa:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	4929      	ldr	r1, [pc, #164]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031c8:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	4921      	ldr	r1, [pc, #132]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031e6:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	491a      	ldr	r1, [pc, #104]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	4912      	ldr	r1, [pc, #72]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003212:	4313      	orrs	r3, r2
 8003214:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003222:	4b0e      	ldr	r3, [pc, #56]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	490b      	ldr	r1, [pc, #44]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	4903      	ldr	r1, [pc, #12]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3748      	adds	r7, #72	@ 0x48
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000

08003260 <memset>:
 8003260:	4402      	add	r2, r0
 8003262:	4603      	mov	r3, r0
 8003264:	4293      	cmp	r3, r2
 8003266:	d100      	bne.n	800326a <memset+0xa>
 8003268:	4770      	bx	lr
 800326a:	f803 1b01 	strb.w	r1, [r3], #1
 800326e:	e7f9      	b.n	8003264 <memset+0x4>

08003270 <__libc_init_array>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4d0d      	ldr	r5, [pc, #52]	@ (80032a8 <__libc_init_array+0x38>)
 8003274:	4c0d      	ldr	r4, [pc, #52]	@ (80032ac <__libc_init_array+0x3c>)
 8003276:	1b64      	subs	r4, r4, r5
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	2600      	movs	r6, #0
 800327c:	42a6      	cmp	r6, r4
 800327e:	d109      	bne.n	8003294 <__libc_init_array+0x24>
 8003280:	4d0b      	ldr	r5, [pc, #44]	@ (80032b0 <__libc_init_array+0x40>)
 8003282:	4c0c      	ldr	r4, [pc, #48]	@ (80032b4 <__libc_init_array+0x44>)
 8003284:	f000 f818 	bl	80032b8 <_init>
 8003288:	1b64      	subs	r4, r4, r5
 800328a:	10a4      	asrs	r4, r4, #2
 800328c:	2600      	movs	r6, #0
 800328e:	42a6      	cmp	r6, r4
 8003290:	d105      	bne.n	800329e <__libc_init_array+0x2e>
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	f855 3b04 	ldr.w	r3, [r5], #4
 8003298:	4798      	blx	r3
 800329a:	3601      	adds	r6, #1
 800329c:	e7ee      	b.n	800327c <__libc_init_array+0xc>
 800329e:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a2:	4798      	blx	r3
 80032a4:	3601      	adds	r6, #1
 80032a6:	e7f2      	b.n	800328e <__libc_init_array+0x1e>
 80032a8:	0800336c 	.word	0x0800336c
 80032ac:	0800336c 	.word	0x0800336c
 80032b0:	0800336c 	.word	0x0800336c
 80032b4:	08003370 	.word	0x08003370

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
