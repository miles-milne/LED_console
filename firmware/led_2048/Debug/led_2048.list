
led_2048.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006b6c  08006b6c  00007b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d28  08006d28  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d28  08006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d30  08006d30  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d34  08006d34  00007d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000001cc  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4ba  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002331  00000000  00000000  00015552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00017888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008aa  00000000  00000000  00018408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006329  00000000  00000000  00018cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e0c3  00000000  00000000  0001efdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3402  00000000  00000000  0002d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e04a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e20  00000000  00000000  000e04e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000e4304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b54 	.word	0x08006b54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006b54 	.word	0x08006b54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <main>:
  * @retval int
  */


int main(void)
{
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b0aa      	sub	sp, #168	@ 0xa8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fd3d 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f899 	bl	8000cc8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 f945 	bl	8000e24 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000b9a:	f000 f8f5 	bl	8000d88 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, LOW);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba4:	4845      	ldr	r0, [pc, #276]	@ (8000cbc <main+0x134>)
 8000ba6:	f001 f80f 	bl	8001bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_B_DEBUG, LOW);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bb0:	4842      	ldr	r0, [pc, #264]	@ (8000cbc <main+0x134>)
 8000bb2:	f001 f809 	bl	8001bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_G_DEBUG, LOW);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bbc:	483f      	ldr	r0, [pc, #252]	@ (8000cbc <main+0x134>)
 8000bbe:	f001 f803 	bl	8001bc8 <HAL_GPIO_WritePin>



  // Turns off all multiplexer pins
  HAL_GPIO_WritePin(MUX_PORT, MUX_1, HIGH);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	483e      	ldr	r0, [pc, #248]	@ (8000cc0 <main+0x138>)
 8000bc8:	f000 fffe 	bl	8001bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_2, HIGH);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	483b      	ldr	r0, [pc, #236]	@ (8000cc0 <main+0x138>)
 8000bd2:	f000 fff9 	bl	8001bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_3, HIGH);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4839      	ldr	r0, [pc, #228]	@ (8000cc0 <main+0x138>)
 8000bdc:	f000 fff4 	bl	8001bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_4, HIGH);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2140      	movs	r1, #64	@ 0x40
 8000be4:	4836      	ldr	r0, [pc, #216]	@ (8000cc0 <main+0x138>)
 8000be6:	f000 ffef 	bl	8001bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_PORT, MUX_5, HIGH);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2180      	movs	r1, #128	@ 0x80
 8000bee:	4834      	ldr	r0, [pc, #208]	@ (8000cc0 <main+0x138>)
 8000bf0:	f000 ffea 	bl	8001bc8 <HAL_GPIO_WritePin>
  //uint8_t all_dim[17] = {PWM0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16};
  //uint8_t rain1[17] = {PWM0, 32, 0, 0, 100, 30, 0, 20, 20, 0, 0, 32, 0, 0, 24, 12, 0};


  // init buffers
  uint8_t grid[25] =
 8000bf4:	4b33      	ldr	r3, [pc, #204]	@ (8000cc4 <main+0x13c>)
 8000bf6:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	c403      	stmia	r4!, {r0, r1}
 8000c06:	7022      	strb	r2, [r4, #0]
 		   0, 0, 0, 0, 0,
 		   0, 0, 0, 0, 0,
 		   0, 0, 0, 0, 0
 		  };
  uint8_t row1_buf[17], row2_buf[17], row3_buf[17], row4_buf[17], row5_buf[17];
  uint8_t* matrix[5] = {row1_buf, row2_buf, row3_buf, row4_buf, row5_buf};
 8000c08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	613b      	str	r3, [r7, #16]
  for (int r = 0; r < 5; r++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c2c:	e00d      	b.n	8000c4a <main+0xc2>
  	  matrix[r][0] = PWM0;
 8000c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	33a8      	adds	r3, #168	@ 0xa8
 8000c36:	443b      	add	r3, r7
 8000c38:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000c3c:	22a2      	movs	r2, #162	@ 0xa2
 8000c3e:	701a      	strb	r2, [r3, #0]
  for (int r = 0; r < 5; r++)
 8000c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c44:	3301      	adds	r3, #1
 8000c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	dded      	ble.n	8000c2e <main+0xa6>
  set_grid(matrix, grid, 8);
 8000c52:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8000c56:	463b      	mov	r3, r7
 8000c58:	2208      	movs	r2, #8
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fa08 	bl	8001070 <set_grid>


  // LED driver initalization
  TLC_init();
 8000c60:	f000 f974 	bl	8000f4c <TLC_init>





  HAL_GPIO_WritePin(GPIOC, LED_B_DEBUG, HIGH);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c6a:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <main+0x134>)
 8000c6c:	f000 ffac 	bl	8001bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_G_DEBUG, HIGH);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c76:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <main+0x134>)
 8000c78:	f000 ffa6 	bl	8001bc8 <HAL_GPIO_WritePin>

  //set_pixel(matrix, 12, 0x01, 8);
  uint8_t test = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  uint32_t test_time_diff = HAL_GetTick();
 8000c82:	f000 fd1d 	bl	80016c0 <HAL_GetTick>
 8000c86:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  uint32_t status_diff_millis = HAL_GetTick();
 8000c8a:	f000 fd19 	bl	80016c0 <HAL_GetTick>
 8000c8e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98


  Game_2048* test_2048 = new Game_2048(5, 5);
 8000c92:	2008      	movs	r0, #8
 8000c94:	f004 fcf6 	bl	8005684 <_Znwj>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461c      	mov	r4, r3
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f002 ffee 	bl	8003c82 <_ZN9Game_2048C1Ehh>
 8000ca6:	f8c7 4094 	str.w	r4, [r7, #148]	@ 0x94

	  }
	  */


	  test_2048->main_2048(matrix, grid);
 8000caa:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000cb6:	f003 fcb5 	bl	8004624 <_ZN9Game_20489main_2048EPPhS0_>
 8000cba:	e7f6      	b.n	8000caa <main+0x122>
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	08006b6c 	.word	0x08006b6c

08000cc8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09e      	sub	sp, #120	@ 0x78
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000cd2:	2228      	movs	r2, #40	@ 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f005 f95d 	bl	8005f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	223c      	movs	r2, #60	@ 0x3c
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f005 f94f 	bl	8005f96 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2310      	movs	r3, #16
 8000d02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 fbd9 	bl	80024c4 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bf14      	ite	ne
 8000d18:	2301      	movne	r3, #1
 8000d1a:	2300      	moveq	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8000d22:	f000 fad3 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fbfd 	bl	8003540 <HAL_RCC_ClockConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000d56:	f000 fab9 	bl	80012cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fdbb 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf14      	ite	ne
 8000d70:	2301      	movne	r3, #1
 8000d72:	2300      	moveq	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000d7a:	f000 faa7 	bl	80012cc <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3778      	adds	r7, #120	@ 0x78
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000d8e:	4a24      	ldr	r2, [pc, #144]	@ (8000e20 <_ZL12MX_I2C1_Initv+0x98>)
 8000d90:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x0000020B;
 8000d92:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000d94:	f240 220b 	movw	r2, #523	@ 0x20b
 8000d98:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc4:	4815      	ldr	r0, [pc, #84]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000dc6:	f000 ff17 	bl	8001bf8 <HAL_I2C_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf14      	ite	ne
 8000dd0:	2301      	movne	r3, #1
 8000dd2:	2300      	moveq	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <_ZL12MX_I2C1_Initv+0x56>
	  {
	    Error_Handler();
 8000dda:	f000 fa77 	bl	80012cc <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	480e      	ldr	r0, [pc, #56]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000de2:	f001 fad7 	bl	8002394 <HAL_I2CEx_ConfigAnalogFilter>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf14      	ite	ne
 8000dec:	2301      	movne	r3, #1
 8000dee:	2300      	moveq	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <_ZL12MX_I2C1_Initv+0x72>
	  {
	    Error_Handler();
 8000df6:	f000 fa69 	bl	80012cc <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4807      	ldr	r0, [pc, #28]	@ (8000e1c <_ZL12MX_I2C1_Initv+0x94>)
 8000dfe:	f001 fb14 	bl	800242a <HAL_I2CEx_ConfigDigitalFilter>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <_ZL12MX_I2C1_Initv+0x8e>
	  {
	    Error_Handler();
 8000e12:	f000 fa5b 	bl	80012cc <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000084 	.word	0x20000084
 8000e20:	40005400 	.word	0x40005400

08000e24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b41      	ldr	r3, [pc, #260]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a40      	ldr	r2, [pc, #256]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b3e      	ldr	r3, [pc, #248]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b3b      	ldr	r3, [pc, #236]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a3a      	ldr	r2, [pc, #232]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a34      	ldr	r2, [pc, #208]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <_ZL12MX_GPIO_Initv+0x11c>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e88:	482e      	ldr	r0, [pc, #184]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x120>)
 8000e8a:	f000 fe9d 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f248 0130 	movw	r1, #32816	@ 0x8030
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e98:	f000 fe96 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	21f8      	movs	r1, #248	@ 0xf8
 8000ea0:	4829      	ldr	r0, [pc, #164]	@ (8000f48 <_ZL12MX_GPIO_Initv+0x124>)
 8000ea2:	f000 fe91 	bl	8001bc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4821      	ldr	r0, [pc, #132]	@ (8000f44 <_ZL12MX_GPIO_Initv+0x120>)
 8000ec0:	f000 fcf0 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ec4:	f641 730f 	movw	r3, #7951	@ 0x1f0f
 8000ec8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000edc:	f000 fce2 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8000ee0:	f248 0330 	movw	r3, #32816	@ 0x8030
 8000ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f000 fcd2 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <_ZL12MX_GPIO_Initv+0x124>)
 8000f16:	f000 fcc5 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000f1a:	23f8      	movs	r3, #248	@ 0xf8
 8000f1c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <_ZL12MX_GPIO_Initv+0x124>)
 8000f32:	f000 fcb7 	bl	80018a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48000800 	.word	0x48000800
 8000f48:	48000400 	.word	0x48000400

08000f4c <TLC_init>:

/* USER CODE BEGIN 4 */

void TLC_init() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af02      	add	r7, sp, #8

	// Reset pin must be held high for LED driver to not be standby mode
	HAL_GPIO_WritePin(GPIOA, TLC_RESET, LOW);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5c:	f000 fe34 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TLC_RESET, HIGH);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6a:	f000 fe2d 	bl	8001bc8 <HAL_GPIO_WritePin>

	uint8_t buffer[2] = {MODE1, TLC_OSC_ON}; // Initialized to MODE1 register init; see section 9.6.1
 8000f6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f72:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8000f74:	1d3a      	adds	r2, r7, #4
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	21c0      	movs	r1, #192	@ 0xc0
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <TLC_init+0x44>)
 8000f82:	f000 fed5 	bl	8001d30 <HAL_I2C_Master_Transmit>

#ifdef afterglow
	row_on();
#endif
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000084 	.word	0x20000084

08000f94 <row_off>:


void row_off() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af02      	add	r7, sp, #8
	uint8_t buffer[5] = {LEDOUT0, 0x00, 0x00, 0x00, 0x00};
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <row_off+0x30>)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa2:	6018      	str	r0, [r3, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 8000fa8:	463a      	mov	r2, r7
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	21c0      	movs	r1, #192	@ 0xc0
 8000fb4:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <row_off+0x34>)
 8000fb6:	f000 febb 	bl	8001d30 <HAL_I2C_Master_Transmit>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08006b88 	.word	0x08006b88
 8000fc8:	20000084 	.word	0x20000084

08000fcc <row_on>:

void row_on() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8
	uint8_t buffer[5] = {LEDOUT0, TLC_PWM_MODE, TLC_PWM_MODE, TLC_PWM_MODE, TLC_PWM_MODE};
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <row_on+0x30>)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	6018      	str	r0, [r3, #0]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 8000fe0:	463a      	mov	r2, r7
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2305      	movs	r3, #5
 8000fea:	21c0      	movs	r1, #192	@ 0xc0
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <row_on+0x34>)
 8000fee:	f000 fe9f 	bl	8001d30 <HAL_I2C_Master_Transmit>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	08006b90 	.word	0x08006b90
 8001000:	20000084 	.word	0x20000084

08001004 <LED_heartbeat>:


void LED_heartbeat() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	static uint8_t led_on = 0;

	if (led_on) {
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <LED_heartbeat+0x38>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d009      	beq.n	8001024 <LED_heartbeat+0x20>
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, HIGH);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001016:	480a      	ldr	r0, [pc, #40]	@ (8001040 <LED_heartbeat+0x3c>)
 8001018:	f000 fdd6 	bl	8001bc8 <HAL_GPIO_WritePin>
		led_on = 0;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <LED_heartbeat+0x38>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	else {
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, LOW);
		led_on = 1;
	}

}
 8001022:	e008      	b.n	8001036 <LED_heartbeat+0x32>
		HAL_GPIO_WritePin(GPIOC, LED_R_DEBUG, LOW);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <LED_heartbeat+0x3c>)
 800102c:	f000 fdcc 	bl	8001bc8 <HAL_GPIO_WritePin>
		led_on = 1;
 8001030:	4b02      	ldr	r3, [pc, #8]	@ (800103c <LED_heartbeat+0x38>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000d8 	.word	0x200000d8
 8001040:	48000800 	.word	0x48000800

08001044 <set_LEDs>:


void set_LEDs(uint8_t* row_buffer) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]


#ifndef afterglow
	row_off();
 800104c:	f7ff ffa2 	bl	8000f94 <row_off>
#endif

	// sets the colours of the LEDs
	HAL_I2C_Master_Transmit(&hi2c1, TLC_ADDRESS, row_buffer, 17, HAL_MAX_DELAY);
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2311      	movs	r3, #17
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	21c0      	movs	r1, #192	@ 0xc0
 800105c:	4803      	ldr	r0, [pc, #12]	@ (800106c <set_LEDs+0x28>)
 800105e:	f000 fe67 	bl	8001d30 <HAL_I2C_Master_Transmit>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000084 	.word	0x20000084

08001070 <set_grid>:

void set_grid(uint8_t** rows, uint8_t* grid, uint8_t bright_modifier) {
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	71fb      	strb	r3, [r7, #7]

	uint8_t grid_index = 0, r, c, i, brightness, colour_id;
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]

	uint8_t col, test;

	for (r = 0; r < 5; r++) {
 8001082:	2300      	movs	r3, #0
 8001084:	75bb      	strb	r3, [r7, #22]
 8001086:	e047      	b.n	8001118 <set_grid+0xa8>

		for (c = 0; c < 5; c++) {
 8001088:	2300      	movs	r3, #0
 800108a:	757b      	strb	r3, [r7, #21]
 800108c:	e03e      	b.n	800110c <set_grid+0x9c>

			brightness =((grid[grid_index]>>4) + 1) * bright_modifier - 1;
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3301      	adds	r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	fb12 f303 	smulbb	r3, r2, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	3b01      	subs	r3, #1
 80010a8:	74fb      	strb	r3, [r7, #19]
			colour_id = (grid[grid_index] & 0b00001111)*3;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	0052      	lsls	r2, r2, #1
 80010bc:	4413      	add	r3, r2
 80010be:	74bb      	strb	r3, [r7, #18]

			for (i = 0; i < 3; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	753b      	strb	r3, [r7, #20]
 80010c4:	e019      	b.n	80010fa <set_grid+0x8a>
				rows[r][(c*3) + i + 1] = COLOURS[colour_id+i] * brightness;;
 80010c6:	7cba      	ldrb	r2, [r7, #18]
 80010c8:	7d3b      	ldrb	r3, [r7, #20]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a17      	ldr	r2, [pc, #92]	@ (800112c <set_grid+0xbc>)
 80010ce:	5cd1      	ldrb	r1, [r2, r3]
 80010d0:	7dbb      	ldrb	r3, [r7, #22]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	7d7a      	ldrb	r2, [r7, #21]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	441a      	add	r2, r3
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	4413      	add	r3, r2
 80010e6:	3301      	adds	r3, #1
 80010e8:	4403      	add	r3, r0
 80010ea:	7cfa      	ldrb	r2, [r7, #19]
 80010ec:	fb12 f201 	smulbb	r2, r2, r1
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 3; i++) {
 80010f4:	7d3b      	ldrb	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	753b      	strb	r3, [r7, #20]
 80010fa:	7d3b      	ldrb	r3, [r7, #20]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d9e2      	bls.n	80010c6 <set_grid+0x56>
			}

			grid_index++;
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	3301      	adds	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
		for (c = 0; c < 5; c++) {
 8001106:	7d7b      	ldrb	r3, [r7, #21]
 8001108:	3301      	adds	r3, #1
 800110a:	757b      	strb	r3, [r7, #21]
 800110c:	7d7b      	ldrb	r3, [r7, #21]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d9bd      	bls.n	800108e <set_grid+0x1e>
	for (r = 0; r < 5; r++) {
 8001112:	7dbb      	ldrb	r3, [r7, #22]
 8001114:	3301      	adds	r3, #1
 8001116:	75bb      	strb	r3, [r7, #22]
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d9b4      	bls.n	8001088 <set_grid+0x18>
		}
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	08006be8 	.word	0x08006be8

08001130 <solid_colour_grid>:



}

void solid_colour_grid(uint8_t* grid, uint8_t colour) {
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 25; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e007      	b.n	8001152 <solid_colour_grid+0x22>
		grid[i] = colour;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	78fa      	ldrb	r2, [r7, #3]
 800114a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 25; i++) {
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b18      	cmp	r3, #24
 8001156:	ddf4      	ble.n	8001142 <solid_colour_grid+0x12>
	}
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <display>:

void display(uint8_t** rows) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]


	for (int k = 0; k < 5; ++k) {
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e02a      	b.n	80011cc <display+0x64>
		set_LEDs(rows[k]);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5f 	bl	8001044 <set_LEDs>
		HAL_GPIO_WritePin(MUX_PORT, MUX_1 << ((k+4)%5), HIGH);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1d19      	adds	r1, r3, #4
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <display+0x74>)
 800118c:	fb83 2301 	smull	r2, r3, r3, r1
 8001190:	105a      	asrs	r2, r3, #1
 8001192:	17cb      	asrs	r3, r1, #31
 8001194:	1ad2      	subs	r2, r2, r3
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	1aca      	subs	r2, r1, r3
 800119e:	2308      	movs	r3, #8
 80011a0:	4093      	lsls	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <display+0x78>)
 80011aa:	f000 fd0d 	bl	8001bc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_PORT, MUX_1 << k, LOW);
 80011ae:	2208      	movs	r2, #8
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4808      	ldr	r0, [pc, #32]	@ (80011e0 <display+0x78>)
 80011be:	f000 fd03 	bl	8001bc8 <HAL_GPIO_WritePin>
	#ifndef afterglow
		row_on();
 80011c2:	f7ff ff03 	bl	8000fcc <row_on>
	for (int k = 0; k < 5; ++k) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	ddd1      	ble.n	8001176 <display+0xe>
	#endif

	}
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	66666667 	.word	0x66666667
 80011e0:	48000400 	.word	0x48000400

080011e4 <update_button_states>:

uint8_t update_button_states(uint8_t current_states, uint32_t* time_diff) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]

	uint8_t new_states = 0x00;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
	uint32_t* temp;

	for (uint8_t btn = 0; btn < 8; btn++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	73bb      	strb	r3, [r7, #14]
 80011f8:	e022      	b.n	8001240 <update_button_states+0x5c>
		temp = &time_diff[btn];
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	4413      	add	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
		new_states |= ((query_button_change(temp, BUTTON_LIST[btn], (current_states>>btn)&0x01))<<btn);
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <update_button_states+0x74>)
 8001208:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	fa42 f303 	asr.w	r3, r2, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	68b8      	ldr	r0, [r7, #8]
 8001220:	f000 f81c 	bl	800125c <query_button_change>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	b25a      	sxtb	r2, r3
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	4313      	orrs	r3, r2
 8001236:	b25b      	sxtb	r3, r3
 8001238:	73fb      	strb	r3, [r7, #15]
	for (uint8_t btn = 0; btn < 8; btn++) {
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	3301      	adds	r3, #1
 800123e:	73bb      	strb	r3, [r7, #14]
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d9d9      	bls.n	80011fa <update_button_states+0x16>
	}


	return current_states ^ new_states;
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	4053      	eors	r3, r2
 800124c:	b2db      	uxtb	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	08006bd8 	.word	0x08006bd8

0800125c <query_button_change>:

uint8_t query_button_change(uint32_t* last_pressed, uint16_t button, uint8_t current_state) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]


	if (HAL_GPIO_ReadPin(BUTTON_PORT, button) != current_state
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f000 fc90 	bl	8001b98 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
			&& HAL_GetTick() - *last_pressed > 10)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	4293      	cmp	r3, r2
 8001280:	d009      	beq.n	8001296 <query_button_change+0x3a>
 8001282:	f000 fa1d 	bl	80016c0 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d901      	bls.n	8001296 <query_button_change+0x3a>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <query_button_change+0x3c>
 8001296:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin(BUTTON_PORT, button) != current_state
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <query_button_change+0x4e>
	{
		*last_pressed = HAL_GetTick();
 800129c:	f000 fa10 	bl	80016c0 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
		return 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <query_button_change+0x50>
	}


	return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <disable_mux5>:

void disable_mux5() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MUX_PORT, MUX_5, HIGH);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2180      	movs	r1, #128	@ 0x80
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <disable_mux5+0x14>)
 80012be:	f000 fc83 	bl	8001bc8 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	48000400 	.word	0x48000400

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <Error_Handler+0x8>

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_MspInit+0x44>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <HAL_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <HAL_MspInit+0x44>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_MspInit+0x44>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_MspInit+0x44>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a17      	ldr	r2, [pc, #92]	@ (800139c <HAL_I2C_MspInit+0x7c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d128      	bne.n	8001394 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_I2C_MspInit+0x80>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <HAL_I2C_MspInit+0x80>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_I2C_MspInit+0x80>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800135a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136c:	2304      	movs	r3, #4
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <HAL_I2C_MspInit+0x84>)
 8001378:	f000 fa94 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_I2C_MspInit+0x80>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <HAL_I2C_MspInit+0x80>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_I2C_MspInit+0x80>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	@ 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005400 	.word	0x40005400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <NMI_Handler+0x4>

080013b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <MemManage_Handler+0x4>

080013c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <UsageFault_Handler+0x4>

080013d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 f94b 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}

08001406 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_kill>:

int _kill(int pid, int sig)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001420:	f004 fe5c 	bl	80060dc <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	2216      	movs	r2, #22
 8001428:	601a      	str	r2, [r3, #0]
  return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_exit>:

void _exit (int status)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800143e:	f04f 31ff 	mov.w	r1, #4294967295
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffe7 	bl	8001416 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <_exit+0x12>

0800144c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e00a      	b.n	8001474 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145e:	f3af 8000 	nop.w
 8001462:	4601      	mov	r1, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf0      	blt.n	800145e <_read+0x12>
  }

  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e009      	b.n	80014ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf1      	blt.n	8001498 <_write+0x12>
  }
  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f004 fdc0 	bl	80060dc <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20008000 	.word	0x20008000
 8001588:	00000400 	.word	0x00000400
 800158c:	200000dc 	.word	0x200000dc
 8001590:	20000238 	.word	0x20000238

08001594 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f004 fd7f 	bl	80060e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff facd 	bl	8000b88 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015fc:	08006d38 	.word	0x08006d38
  ldr r2, =_sbss
 8001600:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001604:	20000234 	.word	0x20000234

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_Init+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <HAL_Init+0x28>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f90d 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	200f      	movs	r0, #15
 8001624:	f000 f808 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fe56 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_InitTick+0x54>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_InitTick+0x58>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f917 	bl	800188a <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 f8ed 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	@ (8001694 <HAL_InitTick+0x5c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000000 	.word	0x20000000
 8001690:	20000008 	.word	0x20000008
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x20>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x24>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <HAL_IncTick+0x24>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008
 80016bc:	200000e0 	.word	0x200000e0

080016c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80016c4:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <HAL_GetTick+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200000e0 	.word	0x200000e0

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	@ (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	@ 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	@ 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff8e 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff47 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff5c 	bl	8001720 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff8e 	bl	8001790 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5d 	bl	800173c <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffb0 	bl	80017f8 <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	e154      	b.n	8001b5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8146 	beq.w	8001b58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d005      	beq.n	80018e4 <HAL_GPIO_Init+0x40>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d130      	bne.n	8001946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191a:	2201      	movs	r2, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	f003 0201 	and.w	r2, r3, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b03      	cmp	r3, #3
 8001950:	d017      	beq.n	8001982 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d123      	bne.n	80019d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	6939      	ldr	r1, [r7, #16]
 80019d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0203 	and.w	r2, r3, #3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80a0 	beq.w	8001b58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_GPIO_Init+0x2d8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a57      	ldr	r2, [pc, #348]	@ (8001b7c <HAL_GPIO_Init+0x2d8>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_GPIO_Init+0x2d8>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a30:	4a53      	ldr	r2, [pc, #332]	@ (8001b80 <HAL_GPIO_Init+0x2dc>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a5a:	d019      	beq.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a49      	ldr	r2, [pc, #292]	@ (8001b84 <HAL_GPIO_Init+0x2e0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d013      	beq.n	8001a8c <HAL_GPIO_Init+0x1e8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a48      	ldr	r2, [pc, #288]	@ (8001b88 <HAL_GPIO_Init+0x2e4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00d      	beq.n	8001a88 <HAL_GPIO_Init+0x1e4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a47      	ldr	r2, [pc, #284]	@ (8001b8c <HAL_GPIO_Init+0x2e8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d007      	beq.n	8001a84 <HAL_GPIO_Init+0x1e0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a46      	ldr	r2, [pc, #280]	@ (8001b90 <HAL_GPIO_Init+0x2ec>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_GPIO_Init+0x1dc>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e008      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a80:	2305      	movs	r3, #5
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a84:	2303      	movs	r3, #3
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a90:	2300      	movs	r3, #0
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa2:	4937      	ldr	r1, [pc, #220]	@ (8001b80 <HAL_GPIO_Init+0x2dc>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab0:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ada:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001afe:	4a25      	ldr	r2, [pc, #148]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b04:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b28:	4a1a      	ldr	r2, [pc, #104]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b52:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <HAL_GPIO_Init+0x2f0>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f aea3 	bne.w	80018b4 <HAL_GPIO_Init+0x10>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	48000c00 	.word	0x48000c00
 8001b90:	48001000 	.word	0x48001000
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e08d      	b.n	8001d26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fb7e 	bl	8001320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2224      	movs	r2, #36	@ 0x24
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	e006      	b.n	8001c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d108      	bne.n	8001c9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	e007      	b.n	8001caa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69d9      	ldr	r1, [r3, #28]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	817b      	strh	r3, [r7, #10]
 8001d40:	4613      	mov	r3, r2
 8001d42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	f040 80fd 	bne.w	8001f4c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2C_Master_Transmit+0x30>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0f6      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x21e>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d68:	f7ff fcaa 	bl	80016c0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2319      	movs	r3, #25
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f914 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0e1      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	@ 0x21
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2210      	movs	r2, #16
 8001d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2bff      	cmp	r3, #255	@ 0xff
 8001dba:	d906      	bls.n	8001dca <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	22ff      	movs	r2, #255	@ 0xff
 8001dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001dc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e007      	b.n	8001dda <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001dd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dd8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d024      	beq.n	8001e2c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	8979      	ldrh	r1, [r7, #10]
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f58 <HAL_I2C_Master_Transmit+0x228>)
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fa83 	bl	8002330 <I2C_TransferConfig>
 8001e2a:	e066      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	4b48      	ldr	r3, [pc, #288]	@ (8001f58 <HAL_I2C_Master_Transmit+0x228>)
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 fa78 	bl	8002330 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e40:	e05b      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f907 	bl	800205a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07b      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d034      	beq.n	8001efa <HAL_I2C_Master_Transmit+0x1ca>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d130      	bne.n	8001efa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f880 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04d      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2bff      	cmp	r3, #255	@ 0xff
 8001eba:	d90e      	bls.n	8001eda <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	22ff      	movs	r2, #255	@ 0xff
 8001ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa2c 	bl	8002330 <I2C_TransferConfig>
 8001ed8:	e00f      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	8979      	ldrh	r1, [r7, #10]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fa1b 	bl	8002330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d19e      	bne.n	8001e42 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	6a39      	ldr	r1, [r7, #32]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f8ed 	bl	80020e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e01a      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <HAL_I2C_Master_Transmit+0x22c>)
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	80002000 	.word	0x80002000
 8001f5c:	fe00e800 	.word	0xfe00e800

08001f60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d103      	bne.n	8001f7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d007      	beq.n	8001f9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	619a      	str	r2, [r3, #24]
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb8:	e03b      	b.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f8d6 	bl	8002170 <I2C_IsErrorOccurred>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e041      	b.n	8002052 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d02d      	beq.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7ff fb73 	bl	80016c0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnFlagUntilTimeout+0x44>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d122      	bne.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	429a      	cmp	r2, r3
 8002008:	d113      	bne.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4013      	ands	r3, r2
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	429a      	cmp	r2, r3
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	429a      	cmp	r2, r3
 800204e:	d0b4      	beq.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002066:	e033      	b.n	80020d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68b9      	ldr	r1, [r7, #8]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f87f 	bl	8002170 <I2C_IsErrorOccurred>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e031      	b.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002082:	d025      	beq.n	80020d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002084:	f7ff fb1c 	bl	80016c0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	d302      	bcc.n	800209a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11a      	bne.n	80020d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d013      	beq.n	80020d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e007      	b.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d1c4      	bne.n	8002068 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	e02f      	b.n	8002156 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f838 	bl	8002170 <I2C_IsErrorOccurred>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e02d      	b.n	8002166 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210a:	f7ff fad9 	bl	80016c0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d11a      	bne.n	8002156 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b20      	cmp	r3, #32
 800212c:	d013      	beq.n	8002156 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e007      	b.n	8002166 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b20      	cmp	r3, #32
 8002162:	d1c8      	bne.n	80020f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d068      	beq.n	800226e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021a4:	e049      	b.n	800223a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d045      	beq.n	800223a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7ff fa87 	bl	80016c0 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_IsErrorOccurred+0x54>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d13a      	bne.n	800223a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021e6:	d121      	bne.n	800222c <I2C_IsErrorOccurred+0xbc>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021ee:	d01d      	beq.n	800222c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d01a      	beq.n	800222c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002204:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002206:	f7ff fa5b 	bl	80016c0 <HAL_GetTick>
 800220a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220c:	e00e      	b.n	800222c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800220e:	f7ff fa57 	bl	80016c0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b19      	cmp	r3, #25
 800221a:	d907      	bls.n	800222c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f043 0320 	orr.w	r3, r3, #32
 8002222:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800222a:	e006      	b.n	800223a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d1e9      	bne.n	800220e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b20      	cmp	r3, #32
 8002246:	d003      	beq.n	8002250 <I2C_IsErrorOccurred+0xe0>
 8002248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0aa      	beq.n	80021a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2220      	movs	r2, #32
 800225e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002290:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00b      	beq.n	80022dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80022dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01c      	beq.n	800231e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff fe3b 	bl	8001f60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <I2C_IsErrorOccurred+0x1bc>)
 80022f6:	400b      	ands	r3, r1
 80022f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	431a      	orrs	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800231e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002322:	4618      	mov	r0, r3
 8002324:	3728      	adds	r7, #40	@ 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	fe00e800 	.word	0xfe00e800

08002330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	4613      	mov	r3, r2
 8002340:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002348:	7a7b      	ldrb	r3, [r7, #9]
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002350:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	4313      	orrs	r3, r2
 800235a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800235e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	0d5b      	lsrs	r3, r3, #21
 800236a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800236e:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <I2C_TransferConfig+0x60>)
 8002370:	430b      	orrs	r3, r1
 8002372:	43db      	mvns	r3, r3
 8002374:	ea02 0103 	and.w	r1, r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	03ff63ff 	.word	0x03ff63ff

08002394 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d138      	bne.n	800241c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e032      	b.n	800241e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	@ 0x24
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b20      	cmp	r3, #32
 800243e:	d139      	bne.n	80024b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800244a:	2302      	movs	r3, #2
 800244c:	e033      	b.n	80024b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2224      	movs	r2, #36	@ 0x24
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800247c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e000      	b.n	80024b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
  }
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f001 b823 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 817d 	beq.w	80027fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002500:	4bbc      	ldr	r3, [pc, #752]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800250c:	4bb9      	ldr	r3, [pc, #740]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d15c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x10e>
 8002518:	4bb6      	ldr	r3, [pc, #728]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002524:	d155      	bne.n	80025d2 <HAL_RCC_OscConfig+0x10e>
 8002526:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800252a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800253a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0x94>
 8002552:	4ba8      	ldr	r3, [pc, #672]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0xc0>
 8002558:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800256c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002570:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002574:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002580:	4b9c      	ldr	r3, [pc, #624]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002588:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800258c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002598:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f002 021f 	and.w	r2, r2, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 811f 	beq.w	80027f8 <HAL_RCC_OscConfig+0x334>
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 8116 	bne.w	80027f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f000 bfaf 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12e>
 80025e4:	4b83      	ldr	r3, [pc, #524]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a82      	ldr	r2, [pc, #520]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e036      	b.n	8002660 <HAL_RCC_OscConfig+0x19c>
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x158>
 8002602:	4b7c      	ldr	r3, [pc, #496]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7b      	ldr	r2, [pc, #492]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b79      	ldr	r3, [pc, #484]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a78      	ldr	r2, [pc, #480]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e021      	b.n	8002660 <HAL_RCC_OscConfig+0x19c>
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x184>
 800262e:	4b71      	ldr	r3, [pc, #452]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a70      	ldr	r2, [pc, #448]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6e      	ldr	r3, [pc, #440]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6d      	ldr	r2, [pc, #436]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x19c>
 8002648:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a69      	ldr	r2, [pc, #420]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b67      	ldr	r3, [pc, #412]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a66      	ldr	r2, [pc, #408]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002660:	4b64      	ldr	r3, [pc, #400]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	f023 020f 	bic.w	r2, r3, #15
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	495f      	ldr	r1, [pc, #380]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002676:	4313      	orrs	r3, r2
 8002678:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d059      	beq.n	800273e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff f819 	bl	80016c0 <HAL_GetTick>
 800268e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff f814 	bl	80016c0 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	@ 0x64
 80026a2:	d902      	bls.n	80026aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	f000 bf43 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 80026aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80026be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x218>
 80026d6:	4b47      	ldr	r3, [pc, #284]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e015      	b.n	8002708 <HAL_RCC_OscConfig+0x244>
 80026dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026e0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80026f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026f4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80026f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002704:	4b3b      	ldr	r3, [pc, #236]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800270c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002710:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002714:	fa92 f2a2 	rbit	r2, r2
 8002718:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800271c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f002 021f 	and.w	r2, r2, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ab      	beq.n	8002694 <HAL_RCC_OscConfig+0x1d0>
 800273c:	e05d      	b.n	80027fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe ffbf 	bl	80016c0 <HAL_GetTick>
 8002742:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe ffba 	bl	80016c0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	@ 0x64
 8002756:	d902      	bls.n	800275e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	f000 bee9 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 800275e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002762:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002772:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0x2cc>
 800278a:	4b1a      	ldr	r3, [pc, #104]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e015      	b.n	80027bc <HAL_RCC_OscConfig+0x2f8>
 8002790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002794:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80027a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027a8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <HAL_RCC_OscConfig+0x330>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027c0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80027c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80027d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ab      	bne.n	8002748 <HAL_RCC_OscConfig+0x284>
 80027f0:	e003      	b.n	80027fa <HAL_RCC_OscConfig+0x336>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 817d 	beq.w	8002b0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002810:	4ba6      	ldr	r3, [pc, #664]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800281c:	4ba3      	ldr	r3, [pc, #652]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d172      	bne.n	800290e <HAL_RCC_OscConfig+0x44a>
 8002828:	4ba0      	ldr	r3, [pc, #640]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d16c      	bne.n	800290e <HAL_RCC_OscConfig+0x44a>
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002846:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_RCC_OscConfig+0x3a0>
 800285e:	4b93      	ldr	r3, [pc, #588]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e013      	b.n	800288c <HAL_RCC_OscConfig+0x3c8>
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800287c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002888:	4b88      	ldr	r3, [pc, #544]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	2202      	movs	r2, #2
 800288e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002892:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002896:	fa92 f2a2 	rbit	r2, r2
 800289a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800289e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCC_OscConfig+0x410>
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f000 be2e 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b75      	ldr	r3, [pc, #468]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	21f8      	movs	r1, #248	@ 0xf8
 80028ea:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80028f2:	fa91 f1a1 	rbit	r1, r1
 80028f6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80028fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80028fe:	fab1 f181 	clz	r1, r1
 8002902:	b2c9      	uxtb	r1, r1
 8002904:	408b      	lsls	r3, r1
 8002906:	4969      	ldr	r1, [pc, #420]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290c:	e0fd      	b.n	8002b0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8088 	beq.w	8002a30 <HAL_RCC_OscConfig+0x56c>
 8002920:	2301      	movs	r3, #1
 8002922:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002932:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002940:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	461a      	mov	r2, r3
 8002948:	2301      	movs	r3, #1
 800294a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe feb8 	bl	80016c0 <HAL_GetTick>
 8002950:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe feb3 	bl	80016c0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	f000 bde2 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800297e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d102      	bne.n	800299c <HAL_RCC_OscConfig+0x4d8>
 8002996:	4b45      	ldr	r3, [pc, #276]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e013      	b.n	80029c4 <HAL_RCC_OscConfig+0x500>
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80029b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80029c0:	4b3a      	ldr	r3, [pc, #232]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	2202      	movs	r2, #2
 80029c6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80029ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80029d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f042 0220 	orr.w	r2, r2, #32
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f002 021f 	and.w	r2, r2, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0af      	beq.n	8002956 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	21f8      	movs	r1, #248	@ 0xf8
 8002a0c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a14:	fa91 f1a1 	rbit	r1, r1
 8002a18:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a20:	fab1 f181 	clz	r1, r1
 8002a24:	b2c9      	uxtb	r1, r1
 8002a26:	408b      	lsls	r3, r1
 8002a28:	4920      	ldr	r1, [pc, #128]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
 8002a2e:	e06c      	b.n	8002b0a <HAL_RCC_OscConfig+0x646>
 8002a30:	2301      	movs	r3, #1
 8002a32:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fe30 	bl	80016c0 <HAL_GetTick>
 8002a60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fe2b 	bl	80016c0 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d902      	bls.n	8002a7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	f000 bd5a 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d104      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5ec>
 8002aa6:	4b01      	ldr	r3, [pc, #4]	@ (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	e015      	b.n	8002ad8 <HAL_RCC_OscConfig+0x614>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ac8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ad4:	4bc8      	ldr	r3, [pc, #800]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002ade:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ae2:	fa92 f2a2 	rbit	r2, r2
 8002ae6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002aea:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002aee:	fab2 f282 	clz	r2, r2
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f042 0220 	orr.w	r2, r2, #32
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f002 021f 	and.w	r2, r2, #31
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ad      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8110 	beq.w	8002d40 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d079      	beq.n	8002c24 <HAL_RCC_OscConfig+0x760>
 8002b30:	2301      	movs	r3, #1
 8002b32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4bab      	ldr	r3, [pc, #684]	@ (8002dfc <HAL_RCC_OscConfig+0x938>)
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	461a      	mov	r2, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fdb1 	bl	80016c0 <HAL_GetTick>
 8002b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fe fdac 	bl	80016c0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d902      	bls.n	8002b7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	f000 bcdb 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	fa93 f2a3 	rbit	r2, r3
 8002ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd4:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002be0:	2102      	movs	r1, #2
 8002be2:	6019      	str	r1, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f1a3 	rbit	r1, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bfa:	6019      	str	r1, [r3, #0]
  return result;
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0a0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x6a0>
 8002c22:	e08d      	b.n	8002d40 <HAL_RCC_OscConfig+0x87c>
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c50:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b68      	ldr	r3, [pc, #416]	@ (8002dfc <HAL_RCC_OscConfig+0x938>)
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	461a      	mov	r2, r3
 8002c62:	2300      	movs	r3, #0
 8002c64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fd2b 	bl	80016c0 <HAL_GetTick>
 8002c6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c70:	f7fe fd26 	bl	80016c0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d902      	bls.n	8002c86 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	f000 bc55 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c8e:	2202      	movs	r2, #2
 8002c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	fa93 f2a3 	rbit	r2, r3
 8002ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cf0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf2:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002cfe:	2102      	movs	r1, #2
 8002d00:	6019      	str	r1, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f1a3 	rbit	r1, r3
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d18:	6019      	str	r1, [r3, #0]
  return result;
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d197      	bne.n	8002c70 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 81a1 	beq.w	8003098 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5c:	4b26      	ldr	r3, [pc, #152]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4a22      	ldr	r2, [pc, #136]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	61d3      	str	r3, [r2, #28]
 8002d74:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d8e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d96:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da2:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a16      	ldr	r2, [pc, #88]	@ (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fc87 	bl	80016c0 <HAL_GetTick>
 8002db2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	e009      	b.n	8002dcc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe fc82 	bl	80016c0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	@ 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e3b1      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCC_OscConfig+0x940>
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a02      	ldr	r2, [pc, #8]	@ (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	e03c      	b.n	8002e70 <HAL_RCC_OscConfig+0x9ac>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	10908120 	.word	0x10908120
 8002e00:	40007000 	.word	0x40007000
 8002e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10c      	bne.n	8002e2e <HAL_RCC_OscConfig+0x96a>
 8002e14:	4bc1      	ldr	r3, [pc, #772]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4ac0      	ldr	r2, [pc, #768]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	4bbe      	ldr	r3, [pc, #760]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4abd      	ldr	r2, [pc, #756]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e26:	f023 0304 	bic.w	r3, r3, #4
 8002e2a:	6213      	str	r3, [r2, #32]
 8002e2c:	e020      	b.n	8002e70 <HAL_RCC_OscConfig+0x9ac>
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x994>
 8002e3e:	4bb7      	ldr	r3, [pc, #732]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4ab6      	ldr	r2, [pc, #728]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4bb4      	ldr	r3, [pc, #720]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4ab3      	ldr	r2, [pc, #716]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0x9ac>
 8002e58:	4bb0      	ldr	r3, [pc, #704]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4aaf      	ldr	r2, [pc, #700]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	4bad      	ldr	r3, [pc, #692]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4aac      	ldr	r2, [pc, #688]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e6a:	f023 0304 	bic.w	r3, r3, #4
 8002e6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8081 	beq.w	8002f84 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fc1d 	bl	80016c0 <HAL_GetTick>
 8002e86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fc18 	bl	80016c0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e345      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 8002ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002eac:	2202      	movs	r2, #2
 8002eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f2a3 	rbit	r2, r3
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ecc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002eea:	601a      	str	r2, [r3, #0]
  return result;
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ef4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_OscConfig+0xa4c>
 8002f0a:	4b84      	ldr	r3, [pc, #528]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	e013      	b.n	8002f38 <HAL_RCC_OscConfig+0xa74>
 8002f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f14:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f18:	2202      	movs	r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	4b79      	ldr	r3, [pc, #484]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f3c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f40:	2102      	movs	r1, #2
 8002f42:	6011      	str	r1, [r2, #0]
 8002f44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f48:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	fa92 f1a2 	rbit	r1, r2
 8002f52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f56:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f5a:	6011      	str	r1, [r2, #0]
  return result;
 8002f5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f60:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d084      	beq.n	8002e8c <HAL_RCC_OscConfig+0x9c8>
 8002f82:	e07f      	b.n	8003084 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7fe fb9c 	bl	80016c0 <HAL_GetTick>
 8002f88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00b      	b.n	8002fa6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe fb97 	bl	80016c0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e2c4      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 8002fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002faa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fae:	2202      	movs	r2, #2
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fec:	601a      	str	r2, [r3, #0]
  return result;
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ff6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f043 0302 	orr.w	r3, r3, #2
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d102      	bne.n	8003012 <HAL_RCC_OscConfig+0xb4e>
 800300c:	4b43      	ldr	r3, [pc, #268]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	e013      	b.n	800303a <HAL_RCC_OscConfig+0xb76>
 8003012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003016:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003030:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4b39      	ldr	r3, [pc, #228]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800303e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003042:	2102      	movs	r1, #2
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800304a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	fa92 f1a2 	rbit	r1, r2
 8003054:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003058:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800305c:	6011      	str	r1, [r2, #0]
  return result;
 800305e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003062:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f002 021f 	and.w	r2, r2, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d184      	bne.n	8002f8e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003084:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4a22      	ldr	r2, [pc, #136]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003096:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8242 	beq.w	800352e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030aa:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <HAL_RCC_OscConfig+0xc58>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	f000 8213 	beq.w	80034de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	f040 8162 	bne.w	800338e <HAL_RCC_OscConfig+0xeca>
 80030ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ce:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030dc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030ee:	601a      	str	r2, [r3, #0]
  return result;
 80030f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003104:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fad6 	bl	80016c0 <HAL_GetTick>
 8003114:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	e00c      	b.n	8003134 <HAL_RCC_OscConfig+0xc70>
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe face 	bl	80016c0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1fd      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800313c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003158:	601a      	str	r2, [r3, #0]
  return result;
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003162:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <HAL_RCC_OscConfig+0xcba>
 8003178:	4bb0      	ldr	r3, [pc, #704]	@ (800343c <HAL_RCC_OscConfig+0xf78>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	e027      	b.n	80031ce <HAL_RCC_OscConfig+0xd0a>
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003186:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800318a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003190:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	4b9c      	ldr	r3, [pc, #624]	@ (800343c <HAL_RCC_OscConfig+0xf78>)
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031d2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031d6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031da:	6011      	str	r1, [r2, #0]
 80031dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	fa92 f1a2 	rbit	r1, r2
 80031ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031f2:	6011      	str	r1, [r2, #0]
  return result;
 80031f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	fab2 f282 	clz	r2, r2
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f042 0220 	orr.w	r2, r2, #32
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f002 021f 	and.w	r2, r2, #31
 800320e:	2101      	movs	r1, #1
 8003210:	fa01 f202 	lsl.w	r2, r1, r2
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d182      	bne.n	8003120 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321a:	4b88      	ldr	r3, [pc, #544]	@ (800343c <HAL_RCC_OscConfig+0xf78>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	430b      	orrs	r3, r1
 800323c:	497f      	ldr	r1, [pc, #508]	@ (800343c <HAL_RCC_OscConfig+0xf78>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800324a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003262:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003266:	601a      	str	r2, [r3, #0]
  return result;
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003270:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800327c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	461a      	mov	r2, r3
 8003284:	2301      	movs	r3, #1
 8003286:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fa1a 	bl	80016c0 <HAL_GetTick>
 800328c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fa15 	bl	80016c0 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e144      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 80032a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	fa93 f2a3 	rbit	r2, r3
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032ca:	601a      	str	r2, [r3, #0]
  return result;
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0xe2c>
 80032ea:	4b54      	ldr	r3, [pc, #336]	@ (800343c <HAL_RCC_OscConfig+0xf78>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e027      	b.n	8003340 <HAL_RCC_OscConfig+0xe7c>
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003302:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	fa93 f2a3 	rbit	r2, r3
 800330c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003310:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800331e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	4b3f      	ldr	r3, [pc, #252]	@ (800343c <HAL_RCC_OscConfig+0xf78>)
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003344:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003348:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800334c:	6011      	str	r1, [r2, #0]
 800334e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003352:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	fa92 f1a2 	rbit	r1, r2
 800335c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003360:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003364:	6011      	str	r1, [r2, #0]
  return result;
 8003366:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800336a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	fab2 f282 	clz	r2, r2
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	f042 0220 	orr.w	r2, r2, #32
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f002 021f 	and.w	r2, r2, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d082      	beq.n	8003292 <HAL_RCC_OscConfig+0xdce>
 800338c:	e0cf      	b.n	800352e <HAL_RCC_OscConfig+0x106a>
 800338e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003392:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003396:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800339a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	fa93 f2a3 	rbit	r2, r3
 80033aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ae:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033b2:	601a      	str	r2, [r3, #0]
  return result;
 80033b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	461a      	mov	r2, r3
 80033d0:	2300      	movs	r3, #0
 80033d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe f974 	bl	80016c0 <HAL_GetTick>
 80033d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033dc:	e009      	b.n	80033f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe f96f 	bl	80016c0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e09e      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003416:	601a      	str	r2, [r3, #0]
  return result;
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003420:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d104      	bne.n	8003440 <HAL_RCC_OscConfig+0xf7c>
 8003436:	4b01      	ldr	r3, [pc, #4]	@ (800343c <HAL_RCC_OscConfig+0xf78>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e029      	b.n	8003490 <HAL_RCC_OscConfig+0xfcc>
 800343c:	40021000 	.word	0x40021000
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800344c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003460:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800346e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003478:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003486:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <HAL_RCC_OscConfig+0x1078>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003494:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003498:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fa92 f1a2 	rbit	r1, r2
 80034ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034b4:	6011      	str	r1, [r2, #0]
  return result;
 80034b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f042 0220 	orr.w	r2, r2, #32
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f002 021f 	and.w	r2, r2, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d180      	bne.n	80033de <HAL_RCC_OscConfig+0xf1a>
 80034dc:	e027      	b.n	800352e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e01e      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f2:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_RCC_OscConfig+0x1078>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034fe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	429a      	cmp	r2, r3
 8003510:	d10b      	bne.n	800352a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003512:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003516:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800351a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003526:	429a      	cmp	r2, r3
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b09e      	sub	sp, #120	@ 0x78
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e162      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b90      	ldr	r3, [pc, #576]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b8d      	ldr	r3, [pc, #564]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	498b      	ldr	r1, [pc, #556]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b89      	ldr	r3, [pc, #548]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e14a      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b82      	ldr	r3, [pc, #520]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	497f      	ldr	r1, [pc, #508]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80dc 	beq.w	800376c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d13c      	bne.n	8003636 <HAL_RCC_ClockConfig+0xf6>
 80035bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d102      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xa6>
 80035e0:	4b6f      	ldr	r3, [pc, #444]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	e00f      	b.n	8003606 <HAL_RCC_ClockConfig+0xc6>
 80035e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003602:	4b67      	ldr	r3, [pc, #412]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800360a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800360c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800360e:	fa92 f2a2 	rbit	r2, r2
 8003612:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003614:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d17b      	bne.n	800372a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0f3      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d13c      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x178>
 800363e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003642:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800364c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_RCC_ClockConfig+0x128>
 8003662:	4b4f      	ldr	r3, [pc, #316]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	e00f      	b.n	8003688 <HAL_RCC_ClockConfig+0x148>
 8003668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800366c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	647b      	str	r3, [r7, #68]	@ 0x44
 8003676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800367a:	643b      	str	r3, [r7, #64]	@ 0x40
 800367c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003684:	4b46      	ldr	r3, [pc, #280]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800368c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800368e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003690:	fa92 f2a2 	rbit	r2, r2
 8003694:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003696:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003698:	fab2 f282 	clz	r2, r2
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f042 0220 	orr.w	r2, r2, #32
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f002 021f 	and.w	r2, r2, #31
 80036a8:	2101      	movs	r1, #1
 80036aa:	fa01 f202 	lsl.w	r2, r1, r2
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d13a      	bne.n	800372a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b2      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
 80036b8:	2302      	movs	r3, #2
 80036ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x1a0>
 80036da:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e00d      	b.n	80036fc <HAL_RCC_ClockConfig+0x1bc>
 80036e0:	2302      	movs	r3, #2
 80036e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ec:	2302      	movs	r3, #2
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	4b29      	ldr	r3, [pc, #164]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	2202      	movs	r2, #2
 80036fe:	61ba      	str	r2, [r7, #24]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	fa92 f2a2 	rbit	r2, r2
 8003706:	617a      	str	r2, [r7, #20]
  return result;
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	fab2 f282 	clz	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f042 0220 	orr.w	r2, r2, #32
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f002 021f 	and.w	r2, r2, #31
 800371a:	2101      	movs	r1, #1
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e079      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b1d      	ldr	r3, [pc, #116]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	491a      	ldr	r1, [pc, #104]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373c:	f7fd ffc0 	bl	80016c0 <HAL_GetTick>
 8003740:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fd ffbc 	bl	80016c0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e061      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d214      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	4906      	ldr	r1, [pc, #24]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b04      	ldr	r3, [pc, #16]	@ (800379c <HAL_RCC_ClockConfig+0x25c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e040      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	491a      	ldr	r1, [pc, #104]	@ (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ce:	4b16      	ldr	r3, [pc, #88]	@ (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4912      	ldr	r1, [pc, #72]	@ (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037e2:	f000 f829 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037e6:	4601      	mov	r1, r0
 80037e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f0:	22f0      	movs	r2, #240	@ 0xf0
 80037f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	60fa      	str	r2, [r7, #12]
  return result;
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	fab2 f282 	clz	r2, r2
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	40d3      	lsrs	r3, r2
 8003806:	4a09      	ldr	r2, [pc, #36]	@ (800382c <HAL_RCC_ClockConfig+0x2ec>)
 8003808:	5cd3      	ldrb	r3, [r2, r3]
 800380a:	fa21 f303 	lsr.w	r3, r1, r3
 800380e:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <HAL_RCC_ClockConfig+0x2f0>)
 8003810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <HAL_RCC_ClockConfig+0x2f4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd ff0e 	bl	8001638 <HAL_InitTick>
  
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3778      	adds	r7, #120	@ 0x78
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	08006c18 	.word	0x08006c18
 8003830:	20000000 	.word	0x20000000
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003852:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x30>
 8003862:	2b08      	cmp	r3, #8
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x36>
 8003866:	e026      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003868:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800386a:	613b      	str	r3, [r7, #16]
      break;
 800386c:	e026      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0c9b      	lsrs	r3, r3, #18
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003878:	5cd3      	ldrb	r3, [r2, r3]
 800387a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x94>)
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	4a14      	ldr	r2, [pc, #80]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003894:	4a0e      	ldr	r2, [pc, #56]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	fbb2 f2f3 	udiv	r2, r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e004      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a0c      	ldr	r2, [pc, #48]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	613b      	str	r3, [r7, #16]
      break;
 80038b4:	e002      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038b8:	613b      	str	r3, [r7, #16]
      break;
 80038ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038bc:	693b      	ldr	r3, [r7, #16]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	007a1200 	.word	0x007a1200
 80038d4:	08006c28 	.word	0x08006c28
 80038d8:	08006c38 	.word	0x08006c38
 80038dc:	003d0900 	.word	0x003d0900

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b092      	sub	sp, #72	@ 0x48
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80d4 	beq.w	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003904:	4b4e      	ldr	r3, [pc, #312]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10e      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b4b      	ldr	r3, [pc, #300]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4a4a      	ldr	r2, [pc, #296]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	4b48      	ldr	r3, [pc, #288]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b45      	ldr	r3, [pc, #276]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d118      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393a:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a41      	ldr	r2, [pc, #260]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003944:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7fd febb 	bl	80016c0 <HAL_GetTick>
 800394a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	e008      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7fd feb7 	bl	80016c0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b64      	cmp	r3, #100	@ 0x64
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e169      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b38      	ldr	r3, [pc, #224]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396c:	4b34      	ldr	r3, [pc, #208]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003974:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8084 	beq.w	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003986:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003988:	429a      	cmp	r2, r3
 800398a:	d07c      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800398c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003996:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800399a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039a6:	fab3 f383 	clz	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b26      	ldr	r3, [pc, #152]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	461a      	mov	r2, r3
 80039b6:	2301      	movs	r3, #1
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80039c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	461a      	mov	r2, r3
 80039da:	2300      	movs	r3, #0
 80039dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039de:	4a18      	ldr	r2, [pc, #96]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04b      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fd fe67 	bl	80016c0 <HAL_GetTick>
 80039f2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fd fe63 	bl	80016c0 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e113      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a18:	2302      	movs	r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	61fb      	str	r3, [r7, #28]
  return result;
 8003a24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d108      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a3a:	4b01      	ldr	r3, [pc, #4]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	e00d      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40007000 	.word	0x40007000
 8003a48:	10908100 	.word	0x10908100
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	4b78      	ldr	r3, [pc, #480]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	613a      	str	r2, [r7, #16]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	fa92 f2a2 	rbit	r2, r2
 8003a66:	60fa      	str	r2, [r7, #12]
  return result;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	fab2 f282 	clz	r2, r2
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	f002 021f 	and.w	r2, r2, #31
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0b7      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a86:	4b6d      	ldr	r3, [pc, #436]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	496a      	ldr	r1, [pc, #424]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa0:	4b66      	ldr	r3, [pc, #408]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4a65      	ldr	r2, [pc, #404]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab8:	4b60      	ldr	r3, [pc, #384]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	f023 0203 	bic.w	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	495d      	ldr	r1, [pc, #372]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad6:	4b59      	ldr	r3, [pc, #356]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	4956      	ldr	r1, [pc, #344]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003af4:	4b51      	ldr	r3, [pc, #324]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	494e      	ldr	r1, [pc, #312]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b12:	4b4a      	ldr	r3, [pc, #296]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	f023 0210 	bic.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4947      	ldr	r1, [pc, #284]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b30:	4b42      	ldr	r3, [pc, #264]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3c:	493f      	ldr	r1, [pc, #252]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	f023 0220 	bic.w	r2, r3, #32
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4938      	ldr	r1, [pc, #224]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b6c:	4b33      	ldr	r3, [pc, #204]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	4930      	ldr	r1, [pc, #192]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	4929      	ldr	r1, [pc, #164]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ba8:	4b24      	ldr	r3, [pc, #144]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4921      	ldr	r1, [pc, #132]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	491a      	ldr	r1, [pc, #104]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003be4:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	4912      	ldr	r1, [pc, #72]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c02:	4b0e      	ldr	r3, [pc, #56]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	490b      	ldr	r1, [pc, #44]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2c:	4903      	ldr	r1, [pc, #12]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3748      	adds	r7, #72	@ 0x48
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000

08003c40 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c66:	d205      	bcs.n	8003c74 <_ZSt16__deque_buf_sizej+0x1c>
 8003c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	e000      	b.n	8003c76 <_ZSt16__deque_buf_sizej+0x1e>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <_ZN9Game_2048C1Ehh>:
#include <cstdlib>
#include <cmath>



Game_2048:: Game_2048(uint8_t rows, uint8_t cols) {
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	70fb      	strb	r3, [r7, #3]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	70bb      	strb	r3, [r7, #2]
	_row = rows;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	701a      	strb	r2, [r3, #0]
	_col = cols;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	78ba      	ldrb	r2, [r7, #2]
 8003c9c:	705a      	strb	r2, [r3, #1]
	_score = 0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	805a      	strh	r2, [r3, #2]

	_grid = new int[_row * _col];
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d201      	bcs.n	8003cbe <_ZN9Game_2048C1Ehh+0x3c>
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	e001      	b.n	8003cc2 <_ZN9Game_2048C1Ehh+0x40>
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fcef 	bl	80056a6 <_Znaj>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	461a      	mov	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	605a      	str	r2, [r3, #4]
}
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_ZN9Game_20487vacancyEv>:
	delete[] _grid;
	_grid = nullptr;
}


bool Game_2048:: vacancy() {
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
	for (int k = 0; k < _row*_col; ++k) {
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e00c      	b.n	8003d02 <_ZN9Game_20487vacancyEv+0x28>
		if (_grid[k] == 0) return true;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <_ZN9Game_20487vacancyEv+0x22>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e00d      	b.n	8003d18 <_ZN9Game_20487vacancyEv+0x3e>
	for (int k = 0; k < _row*_col; ++k) {
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	dbe8      	blt.n	8003ce8 <_ZN9Game_20487vacancyEv+0xe>
	}

	return false;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <_ZN9Game_20484moveEhPPh>:


// updates the board in accordance to the user input
bool Game_2048:: move(uint8_t input, uint8_t** rows) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b096      	sub	sp, #88	@ 0x58
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	72fb      	strb	r3, [r7, #11]

	int* temp_line;
	int* temp_grid = new int[_row * _col];
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d201      	bcs.n	8003d4c <_ZN9Game_20484moveEhPPh+0x28>
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	e001      	b.n	8003d50 <_ZN9Game_20484moveEhPPh+0x2c>
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fca8 	bl	80056a6 <_Znaj>
 8003d56:	4603      	mov	r3, r0
 8003d58:	617b      	str	r3, [r7, #20]

	// creates copy of _grid
	for (int i = 0; i < _row * _col; ++i)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d5e:	e00d      	b.n	8003d7c <_ZN9Game_20484moveEhPPh+0x58>
		temp_grid[i] = _grid[i];
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	440b      	add	r3, r1
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < _row * _col; ++i)
 8003d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d78:	3301      	adds	r3, #1
 8003d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	dbe7      	blt.n	8003d60 <_ZN9Game_20484moveEhPPh+0x3c>

	if ((input&0x01) == 0) { // UP
 8003d90:	7afb      	ldrb	r3, [r7, #11]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d169      	bne.n	8003e6e <_ZN9Game_20484moveEhPPh+0x14a>
		temp_line = new int[_row];
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d201      	bcs.n	8003daa <_ZN9Game_20484moveEhPPh+0x86>
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	e001      	b.n	8003dae <_ZN9Game_20484moveEhPPh+0x8a>
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 fc79 	bl	80056a6 <_Znaj>
 8003db4:	4603      	mov	r3, r0
 8003db6:	657b      	str	r3, [r7, #84]	@ 0x54

		for (int c = 0; c < _col; ++c) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dbc:	e050      	b.n	8003e60 <_ZN9Game_20484moveEhPPh+0x13c>
			for (int r = 0; r < _row; ++r)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc2:	e014      	b.n	8003dee <_ZN9Game_20484moveEhPPh+0xca>
				temp_line[r] = _grid[c + _col * r];
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd0:	fb03 f101 	mul.w	r1, r3, r1
 8003dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd6:	440b      	add	r3, r1
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	441a      	add	r2, r3
 8003ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003de2:	440b      	add	r3, r1
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	601a      	str	r2, [r3, #0]
			for (int r = 0; r < _row; ++r)
 8003de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dea:	3301      	adds	r3, #1
 8003dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df6:	4293      	cmp	r3, r2
 8003df8:	dbe4      	blt.n	8003dc4 <_ZN9Game_20484moveEhPPh+0xa0>

			_score += shift_line(temp_line, _row);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f9d4 	bl	80041b0 <_ZN9Game_204810shift_lineEPii>
 8003e08:	4601      	mov	r1, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	885a      	ldrh	r2, [r3, #2]
 8003e0e:	b28b      	uxth	r3, r1
 8003e10:	4413      	add	r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	805a      	strh	r2, [r3, #2]
			display(rows); // prevents flashing
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd f9a5 	bl	8001168 <display>

			for (int r = 0; r < _row; ++r)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e22:	e014      	b.n	8003e4e <_ZN9Game_20484moveEhPPh+0x12a>
				_grid[c + _col * r] = temp_line[r];
 8003e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e2a:	441a      	add	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	4618      	mov	r0, r3
 8003e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e38:	fb03 f000 	mul.w	r0, r3, r0
 8003e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e3e:	4403      	add	r3, r0
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	601a      	str	r2, [r3, #0]
			for (int r = 0; r < _row; ++r)
 8003e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e56:	4293      	cmp	r3, r2
 8003e58:	dbe4      	blt.n	8003e24 <_ZN9Game_20484moveEhPPh+0x100>
		for (int c = 0; c < _col; ++c) {
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	dba8      	blt.n	8003dbe <_ZN9Game_20484moveEhPPh+0x9a>
 8003e6c:	e160      	b.n	8004130 <_ZN9Game_20484moveEhPPh+0x40c>
		}

	} else if ((input&0x02) == 0) { // RIGHT
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d16f      	bne.n	8003f58 <_ZN9Game_20484moveEhPPh+0x234>
		temp_line = new int[_col];
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d201      	bcs.n	8003e88 <_ZN9Game_20484moveEhPPh+0x164>
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	e001      	b.n	8003e8c <_ZN9Game_20484moveEhPPh+0x168>
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fc0a 	bl	80056a6 <_Znaj>
 8003e92:	4603      	mov	r3, r0
 8003e94:	657b      	str	r3, [r7, #84]	@ 0x54

		for (int r = 0; r < _row; ++r) {
 8003e96:	2300      	movs	r3, #0
 8003e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e9a:	e056      	b.n	8003f4a <_ZN9Game_20484moveEhPPh+0x226>

			for (int c = _col - 1; c >= 0; --c)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea4:	e018      	b.n	8003ed8 <_ZN9Game_20484moveEhPPh+0x1b4>
				temp_line[_col - 1 - c] = _grid[_col * r + c];
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb2:	fb03 f101 	mul.w	r1, r3, r1
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb8:	440b      	add	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	1e59      	subs	r1, r3, #1
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec6:	1acb      	subs	r3, r1, r3
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ecc:	440b      	add	r3, r1
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	601a      	str	r2, [r3, #0]
			for (int c = _col - 1; c >= 0; --c)
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	dae3      	bge.n	8003ea6 <_ZN9Game_20484moveEhPPh+0x182>

			_score += shift_line(temp_line, _col);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f962 	bl	80041b0 <_ZN9Game_204810shift_lineEPii>
 8003eec:	4601      	mov	r1, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	885a      	ldrh	r2, [r3, #2]
 8003ef2:	b28b      	uxth	r3, r1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	805a      	strh	r2, [r3, #2]
			display(rows);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fd f933 	bl	8001168 <display>

			for (int c = _col - 1; c >= 0; --c)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f0a:	e018      	b.n	8003f3e <_ZN9Game_20484moveEhPPh+0x21a>
				_grid[_col * r + c] = temp_line[_col - 1 - c];
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	1e5a      	subs	r2, r3, #1
 8003f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f1a:	441a      	add	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	4618      	mov	r0, r3
 8003f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f28:	fb03 f000 	mul.w	r0, r3, r0
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2e:	4403      	add	r3, r0
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	601a      	str	r2, [r3, #0]
			for (int c = _col - 1; c >= 0; --c)
 8003f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	dae3      	bge.n	8003f0c <_ZN9Game_20484moveEhPPh+0x1e8>
		for (int r = 0; r < _row; ++r) {
 8003f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f46:	3301      	adds	r3, #1
 8003f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f52:	4293      	cmp	r3, r2
 8003f54:	dba2      	blt.n	8003e9c <_ZN9Game_20484moveEhPPh+0x178>
 8003f56:	e0eb      	b.n	8004130 <_ZN9Game_20484moveEhPPh+0x40c>

		}

	} else if ((input&0x04) == 0) { // DOWN
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d16f      	bne.n	8004042 <_ZN9Game_20484moveEhPPh+0x31e>
		temp_line = new int[_row];
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d201      	bcs.n	8003f72 <_ZN9Game_20484moveEhPPh+0x24e>
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	e001      	b.n	8003f76 <_ZN9Game_20484moveEhPPh+0x252>
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fb95 	bl	80056a6 <_Znaj>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	657b      	str	r3, [r7, #84]	@ 0x54

		for (int c = 0; c < _col; ++c) {
 8003f80:	2300      	movs	r3, #0
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f84:	e056      	b.n	8004034 <_ZN9Game_20484moveEhPPh+0x310>
			for (int r = _row - 1; r >= 0; --r)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8e:	e018      	b.n	8003fc2 <_ZN9Game_20484moveEhPPh+0x29e>
				temp_line[_row - 1 - r] = _grid[c + _col * r];
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	fb03 f101 	mul.w	r1, r3, r1
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa2:	440b      	add	r3, r1
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	1e59      	subs	r1, r3, #1
 8003fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb0:	1acb      	subs	r3, r1, r3
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fb6:	440b      	add	r3, r1
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	601a      	str	r2, [r3, #0]
			for (int r = _row - 1; r >= 0; --r)
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	dae3      	bge.n	8003f90 <_ZN9Game_20484moveEhPPh+0x26c>

			_score += shift_line(temp_line, _row);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f8ed 	bl	80041b0 <_ZN9Game_204810shift_lineEPii>
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	885a      	ldrh	r2, [r3, #2]
 8003fdc:	b28b      	uxth	r3, r1
 8003fde:	4413      	add	r3, r2
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	805a      	strh	r2, [r3, #2]
			display(rows);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd f8be 	bl	8001168 <display>

			for (int r = _row - 1; r >= 0; --r)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff4:	e018      	b.n	8004028 <_ZN9Game_20484moveEhPPh+0x304>
				_grid[c + _col * r] = temp_line[_row - 1 - r];
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	1e5a      	subs	r2, r3, #1
 8003ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	4618      	mov	r0, r3
 8004010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004012:	fb03 f000 	mul.w	r0, r3, r0
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	4403      	add	r3, r0
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	601a      	str	r2, [r3, #0]
			for (int r = _row - 1; r >= 0; --r)
 8004022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004024:	3b01      	subs	r3, #1
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	2b00      	cmp	r3, #0
 800402c:	dae3      	bge.n	8003ff6 <_ZN9Game_20484moveEhPPh+0x2d2>
		for (int c = 0; c < _col; ++c) {
 800402e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004030:	3301      	adds	r3, #1
 8004032:	637b      	str	r3, [r7, #52]	@ 0x34
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	461a      	mov	r2, r3
 800403a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403c:	4293      	cmp	r3, r2
 800403e:	dba2      	blt.n	8003f86 <_ZN9Game_20484moveEhPPh+0x262>
 8004040:	e076      	b.n	8004130 <_ZN9Game_20484moveEhPPh+0x40c>

		}

	} else if ((input&0x08) == 0) { // LEFT
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d169      	bne.n	8004120 <_ZN9Game_20484moveEhPPh+0x3fc>
		temp_line = new int[_col];
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8004054:	4293      	cmp	r3, r2
 8004056:	d201      	bcs.n	800405c <_ZN9Game_20484moveEhPPh+0x338>
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	e001      	b.n	8004060 <_ZN9Game_20484moveEhPPh+0x33c>
 800405c:	f04f 33ff 	mov.w	r3, #4294967295
 8004060:	4618      	mov	r0, r3
 8004062:	f001 fb20 	bl	80056a6 <_Znaj>
 8004066:	4603      	mov	r3, r0
 8004068:	657b      	str	r3, [r7, #84]	@ 0x54

		for (int r = 0; r < _row; ++r) {
 800406a:	2300      	movs	r3, #0
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406e:	e050      	b.n	8004112 <_ZN9Game_20484moveEhPPh+0x3ee>

			for (int c = 0; c < _col; ++c)
 8004070:	2300      	movs	r3, #0
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
 8004074:	e014      	b.n	80040a0 <_ZN9Game_20484moveEhPPh+0x37c>
				temp_line[c] = _grid[_col * r + c];
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	4619      	mov	r1, r3
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	fb03 f101 	mul.w	r1, r3, r1
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	440b      	add	r3, r1
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	441a      	add	r2, r3
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004094:	440b      	add	r3, r1
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	601a      	str	r2, [r3, #0]
			for (int c = 0; c < _col; ++c)
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	3301      	adds	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	785b      	ldrb	r3, [r3, #1]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	4293      	cmp	r3, r2
 80040aa:	dbe4      	blt.n	8004076 <_ZN9Game_20484moveEhPPh+0x352>

			_score += shift_line(temp_line, _col);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f87b 	bl	80041b0 <_ZN9Game_204810shift_lineEPii>
 80040ba:	4601      	mov	r1, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	885a      	ldrh	r2, [r3, #2]
 80040c0:	b28b      	uxth	r3, r1
 80040c2:	4413      	add	r3, r2
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	805a      	strh	r2, [r3, #2]
			display(rows);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd f84c 	bl	8001168 <display>

			for (int c = 0; c < _col; ++c)
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	e014      	b.n	8004100 <_ZN9Game_20484moveEhPPh+0x3dc>
				_grid[_col * r + c] = temp_line[c];
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040dc:	441a      	add	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	785b      	ldrb	r3, [r3, #1]
 80040e6:	4618      	mov	r0, r3
 80040e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ea:	fb03 f000 	mul.w	r0, r3, r0
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	4403      	add	r3, r0
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	601a      	str	r2, [r3, #0]
			for (int c = 0; c < _col; ++c)
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	3301      	adds	r3, #1
 80040fe:	623b      	str	r3, [r7, #32]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	461a      	mov	r2, r3
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	4293      	cmp	r3, r2
 800410a:	dbe4      	blt.n	80040d6 <_ZN9Game_20484moveEhPPh+0x3b2>
		for (int r = 0; r < _row; ++r) {
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	3301      	adds	r3, #1
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	4293      	cmp	r3, r2
 800411c:	dba8      	blt.n	8004070 <_ZN9Game_20484moveEhPPh+0x34c>
 800411e:	e007      	b.n	8004130 <_ZN9Game_20484moveEhPPh+0x40c>

		}

	}
	else {
		delete[] temp_grid;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <_ZN9Game_20484moveEhPPh+0x408>
 8004126:	6978      	ldr	r0, [r7, #20]
 8004128:	f001 faaa 	bl	8005680 <_ZdaPv>
		return false;
 800412c:	2300      	movs	r3, #0
 800412e:	e02e      	b.n	800418e <_ZN9Game_20484moveEhPPh+0x46a>
	}

	bool not_identical = false;
 8004130:	2300      	movs	r3, #0
 8004132:	77fb      	strb	r3, [r7, #31]

	// checks if grid is identical before and after.
	for (int k = 0; k < _row*_col; ++k) {
 8004134:	2300      	movs	r3, #0
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e012      	b.n	8004160 <_ZN9Game_20484moveEhPPh+0x43c>
		if (_grid[k] != temp_grid[k]) {
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	6979      	ldr	r1, [r7, #20]
 800414c:	440b      	add	r3, r1
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d002      	beq.n	800415a <_ZN9Game_20484moveEhPPh+0x436>
			not_identical = true;
 8004154:	2301      	movs	r3, #1
 8004156:	77fb      	strb	r3, [r7, #31]
			break;
 8004158:	e00c      	b.n	8004174 <_ZN9Game_20484moveEhPPh+0x450>
	for (int k = 0; k < _row*_col; ++k) {
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3301      	adds	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	dbe2      	blt.n	800413a <_ZN9Game_20484moveEhPPh+0x416>
		}
	}

	delete[] temp_line;
 8004174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <_ZN9Game_20484moveEhPPh+0x45c>
 800417a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800417c:	f001 fa80 	bl	8005680 <_ZdaPv>
	delete[] temp_grid;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <_ZN9Game_20484moveEhPPh+0x468>
 8004186:	6978      	ldr	r0, [r7, #20]
 8004188:	f001 fa7a 	bl	8005680 <_ZdaPv>
	return not_identical;
 800418c:	7ffb      	ldrb	r3, [r7, #31]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3758      	adds	r7, #88	@ 0x58
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <_ZNSt5stackIiSt5dequeIiSaIiEEED1Ev>:
   *  which is a typedef for the second Sequence parameter, and @c
   *  push, @c pop, and @c top, which are standard %stack/FILO
   *  operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class stack
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 faf7 	bl	8004794 <_ZNSt5dequeIiSaIiEED1Ev>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <_ZN9Game_204810shift_lineEPii>:


// helper function that deals with shifting and merging cells in a line (i.e. row/col) after the user makes a move
// This function will be called regardless if the given line has no valid shifts or is completely empty
int Game_2048:: shift_line(int* line, int size) { // TODO should this be static???
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b093      	sub	sp, #76	@ 0x4c
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
	std:: stack<int> s;
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fad3 	bl	800476c <_ZNSt5stackIiSt5dequeIiSaIiEEEC1IS2_vEEv>
	int num_empty = 0, score = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ca:	2300      	movs	r3, #0
 80041cc:	643b      	str	r3, [r7, #64]	@ 0x40

	for (int k = 0; k < size; ++k) {
 80041ce:	2300      	movs	r3, #0
 80041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d2:	e06a      	b.n	80042aa <_ZN9Game_204810shift_lineEPii+0xfa>

		if (line[k] != 0) {
 80041d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4413      	add	r3, r2
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d05d      	beq.n	800429e <_ZN9Game_204810shift_lineEPii+0xee>

			if (!s.empty() && s.top() == line[k]) {  //TODO will this if statement terminate before it checks for an undefined equality?
 80041e2:	f107 0310 	add.w	r3, r7, #16
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 faf9 	bl	80047de <_ZNKSt5stackIiSt5dequeIiSaIiEEE5emptyEv>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00f      	beq.n	8004218 <_ZN9Game_204810shift_lineEPii+0x68>
 80041f8:	f107 0310 	add.w	r3, r7, #16
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fafb 	bl	80047f8 <_ZNSt5stackIiSt5dequeIiSaIiEEE3topEv>
 8004202:	4603      	mov	r3, r0
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	440b      	add	r3, r1
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d101      	bne.n	8004218 <_ZN9Game_204810shift_lineEPii+0x68>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <_ZN9Game_204810shift_lineEPii+0x6a>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d034      	beq.n	8004288 <_ZN9Game_204810shift_lineEPii+0xd8>
				num_empty++;
 800421e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004220:	3301      	adds	r3, #1
 8004222:	647b      	str	r3, [r7, #68]	@ 0x44
				s.top() *= 2;
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fae5 	bl	80047f8 <_ZNSt5stackIiSt5dequeIiSaIiEEE3topEv>
 800422e:	4603      	mov	r3, r0
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	0052      	lsls	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
				score += s.top();
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fadc 	bl	80047f8 <_ZNSt5stackIiSt5dequeIiSaIiEEE3topEv>
 8004240:	4603      	mov	r3, r0
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004246:	4413      	add	r3, r2
 8004248:	643b      	str	r3, [r7, #64]	@ 0x40

				// This while loop ensures the next cell is properly pushed to the stack,
				// as to avoid a "double merge"; for instance
				// [0, 2, 2, 4] ---> [4, 4, 0, 0], NOT [0, 2, 2, 4] ---> [4, 4, 0, 0] --> [8, 0, 0, 0]
				while (k < size-1) {
 800424a:	e017      	b.n	800427c <_ZN9Game_204810shift_lineEPii+0xcc>
					k++;
 800424c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424e:	3301      	adds	r3, #1
 8004250:	63fb      	str	r3, [r7, #60]	@ 0x3c

					if (line[k] != 0) {
 8004252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4413      	add	r3, r2
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <_ZN9Game_204810shift_lineEPii+0xc6>
						s.push(line[k]);
 8004260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	441a      	add	r2, r3
 8004268:	f107 0310 	add.w	r3, r7, #16
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 facf 	bl	8004812 <_ZNSt5stackIiSt5dequeIiSaIiEEE4pushERKi>
						break;
 8004274:	e016      	b.n	80042a4 <_ZN9Game_204810shift_lineEPii+0xf4>
					}

					num_empty++;
 8004276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004278:	3301      	adds	r3, #1
 800427a:	647b      	str	r3, [r7, #68]	@ 0x44
				while (k < size-1) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3b01      	subs	r3, #1
 8004280:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004282:	429a      	cmp	r2, r3
 8004284:	dbe2      	blt.n	800424c <_ZN9Game_204810shift_lineEPii+0x9c>
 8004286:	e00d      	b.n	80042a4 <_ZN9Game_204810shift_lineEPii+0xf4>
				}
			}
			else { // merge does not occur
				s.push(line[k]);
 8004288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	441a      	add	r2, r3
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fabb 	bl	8004812 <_ZNSt5stackIiSt5dequeIiSaIiEEE4pushERKi>
 800429c:	e002      	b.n	80042a4 <_ZN9Game_204810shift_lineEPii+0xf4>
			}

		}
		else {
			num_empty++;
 800429e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a0:	3301      	adds	r3, #1
 80042a2:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int k = 0; k < size; ++k) {
 80042a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a6:	3301      	adds	r3, #1
 80042a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	db90      	blt.n	80041d4 <_ZN9Game_204810shift_lineEPii+0x24>
		}
	}

	if (num_empty == size)
 80042b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d101      	bne.n	80042be <_ZN9Game_204810shift_lineEPii+0x10e>
		return 0;
 80042ba:	2400      	movs	r4, #0
 80042bc:	e028      	b.n	8004310 <_ZN9Game_204810shift_lineEPii+0x160>


	// pops the stack back into the array in reverse order
	for (int j = size-1; j >= 0; --j) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042c4:	e020      	b.n	8004308 <_ZN9Game_204810shift_lineEPii+0x158>

		if (num_empty > 0) {
 80042c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dd09      	ble.n	80042e0 <_ZN9Game_204810shift_lineEPii+0x130>
			line[j] = 0;
 80042cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	4413      	add	r3, r2
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
			--num_empty;
 80042d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042da:	3b01      	subs	r3, #1
 80042dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042de:	e010      	b.n	8004302 <_ZN9Game_204810shift_lineEPii+0x152>
		}
		else {
			line[j] = s.top();
 80042e0:	f107 0310 	add.w	r3, r7, #16
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fa87 	bl	80047f8 <_ZNSt5stackIiSt5dequeIiSaIiEEE3topEv>
 80042ea:	4601      	mov	r1, r0
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4413      	add	r3, r2
 80042f4:	680a      	ldr	r2, [r1, #0]
 80042f6:	601a      	str	r2, [r3, #0]
			s.pop();
 80042f8:	f107 0310 	add.w	r3, r7, #16
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fa96 	bl	800482e <_ZNSt5stackIiSt5dequeIiSaIiEEE3popEv>
	for (int j = size-1; j >= 0; --j) {
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	3b01      	subs	r3, #1
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	2b00      	cmp	r3, #0
 800430c:	dadb      	bge.n	80042c6 <_ZN9Game_204810shift_lineEPii+0x116>
		}
	}

	return score;
 800430e:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
}
 8004310:	f107 0310 	add.w	r3, r7, #16
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff3e 	bl	8004196 <_ZNSt5stackIiSt5dequeIiSaIiEEED1Ev>
 800431a:	4623      	mov	r3, r4
 800431c:	4618      	mov	r0, r3
 800431e:	374c      	adds	r7, #76	@ 0x4c
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}

08004324 <_ZN9Game_20489has_movesEv>:


// Checks if there are any valid moves
bool Game_2048:: has_moves() {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

	if (vacancy())
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff fcd4 	bl	8003cda <_ZN9Game_20487vacancyEv>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <_ZN9Game_20489has_movesEv+0x18>
		return true;
 8004338:	2301      	movs	r3, #1
 800433a:	e064      	b.n	8004406 <_ZN9Game_20489has_movesEv+0xe2>

	for (int r = 0; r < _row; ++r) {
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e05a      	b.n	80043f8 <_ZN9Game_20489has_movesEv+0xd4>
		for (int c = 0; c < _col; ++c) {
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	e04e      	b.n	80043e6 <_ZN9Game_20489has_movesEv+0xc2>

			// checks for equality to element on its right
		   if (c < _col-1 && _grid[_col*r + c] == _grid[_col*r + c + 1])
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	3b01      	subs	r3, #1
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	da1e      	bge.n	8004392 <_ZN9Game_20489has_movesEv+0x6e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	4619      	mov	r1, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	fb03 f101 	mul.w	r1, r3, r1
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	440b      	add	r3, r1
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6859      	ldr	r1, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	4618      	mov	r0, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	fb03 f000 	mul.w	r0, r3, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4403      	add	r3, r0
 8004382:	3301      	adds	r3, #1
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d101      	bne.n	8004392 <_ZN9Game_20489has_movesEv+0x6e>
			   return true;
 800438e:	2301      	movs	r3, #1
 8004390:	e039      	b.n	8004406 <_ZN9Game_20489has_movesEv+0xe2>

		   // checks for equality to element below
		   if (r < _row-1 && _grid[_col*r + c] == _grid[_col*r + c + _col])
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	429a      	cmp	r2, r3
 800439c:	da20      	bge.n	80043e0 <_ZN9Game_20489has_movesEv+0xbc>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	4619      	mov	r1, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	fb03 f101 	mul.w	r1, r3, r1
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	440b      	add	r3, r1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	4618      	mov	r0, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	fb03 f000 	mul.w	r0, r3, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4403      	add	r3, r0
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	7840      	ldrb	r0, [r0, #1]
 80043d0:	4403      	add	r3, r0
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d101      	bne.n	80043e0 <_ZN9Game_20489has_movesEv+0xbc>
			   return true;
 80043dc:	2301      	movs	r3, #1
 80043de:	e012      	b.n	8004406 <_ZN9Game_20489has_movesEv+0xe2>
		for (int c = 0; c < _col; ++c) {
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4293      	cmp	r3, r2
 80043f0:	dbaa      	blt.n	8004348 <_ZN9Game_20489has_movesEv+0x24>
	for (int r = 0; r < _row; ++r) {
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4293      	cmp	r3, r2
 8004402:	db9e      	blt.n	8004342 <_ZN9Game_20489has_movesEv+0x1e>
		}
	}

	return false;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <_ZN9Game_20488populateEm>:


// Adds a random "2" or "4" to a random empty grid space
// TODO change populate algorithm for larger boards
void Game_2048:: populate(uint32_t seed) {
 800440e:	b580      	push	{r7, lr}
 8004410:	b088      	sub	sp, #32
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]

	int* empty = new int[_row*_col];
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800442a:	4293      	cmp	r3, r2
 800442c:	d201      	bcs.n	8004432 <_ZN9Game_20488populateEm+0x24>
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	e001      	b.n	8004436 <_ZN9Game_20488populateEm+0x28>
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f935 	bl	80056a6 <_Znaj>
 800443c:	4603      	mov	r3, r0
 800443e:	617b      	str	r3, [r7, #20]
	int num_empty = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]

	for (int k = 0; k < _row*_col; ++k) {
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	e013      	b.n	8004472 <_ZN9Game_20488populateEm+0x64>
		if(_grid[k] == 0) {
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <_ZN9Game_20488populateEm+0x5e>
			empty[num_empty] = k;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	601a      	str	r2, [r3, #0]
			num_empty++;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
	for (int k = 0; k < _row*_col; ++k) {
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	3301      	adds	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	429a      	cmp	r2, r3
 8004484:	dbe1      	blt.n	800444a <_ZN9Game_20488populateEm+0x3c>
		}
	}

	srand(seed);
 8004486:	6838      	ldr	r0, [r7, #0]
 8004488:	f001 fbfa 	bl	8005c80 <srand>
	int element = (rand() % static_cast<int>(num_empty));
 800448c:	f001 fc26 	bl	8005cdc <rand>
 8004490:	4603      	mov	r3, r0
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	fb93 f2f2 	sdiv	r2, r3, r2
 8004498:	69f9      	ldr	r1, [r7, #28]
 800449a:	fb01 f202 	mul.w	r2, r1, r2
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
	int val = (rand() % static_cast<int>(4));
 80044a2:	f001 fc1b 	bl	8005cdc <rand>
 80044a6:	4603      	mov	r3, r0
 80044a8:	425a      	negs	r2, r3
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	f002 0203 	and.w	r2, r2, #3
 80044b2:	bf58      	it	pl
 80044b4:	4253      	negpl	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]


	if (val == 2) {
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d10b      	bne.n	80044d6 <_ZN9Game_20488populateEm+0xc8>
		_grid[empty[element]] = 4;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	440b      	add	r3, r1
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	2204      	movs	r2, #4
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e00a      	b.n	80044ec <_ZN9Game_20488populateEm+0xde>
	}
	else {
		_grid[empty[element]] = 2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	440b      	add	r3, r1
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	2202      	movs	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]
	}

	delete[] empty;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <_ZN9Game_20488populateEm+0xea>
 80044f2:	6978      	ldr	r0, [r7, #20]
 80044f4:	f001 f8c4 	bl	8005680 <_ZdaPv>
}
 80044f8:	bf00      	nop
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZN9Game_204810clear_gridEv>:


void Game_2048:: clear_grid() {
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

	for (int k = 0; k < _row*_col; ++k) {
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e009      	b.n	8004522 <_ZN9Game_204810clear_gridEv+0x22>
		_grid[k] = 0;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
	for (int k = 0; k < _row*_col; ++k) {
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3301      	adds	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	429a      	cmp	r2, r3
 8004534:	dbeb      	blt.n	800450e <_ZN9Game_204810clear_gridEv+0xe>
	}
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <_ZN9Game_204810get_colourEi>:


// Returns the colour depending on the value of _grid
uint8_t Game_2048:: get_colour(int val) {
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]

	if (val == 0)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <_ZN9Game_204810get_colourEi+0x14>
		return 0;
 8004554:	2300      	movs	r3, #0
 8004556:	e018      	b.n	800458a <_ZN9Game_204810get_colourEi+0x46>

	const uint8_t COLOUR_LIST[15] = {0,
 8004558:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <_ZN9Game_204810get_colourEi+0x50>)
 800455a:	f107 0408 	add.w	r4, r7, #8
 800455e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004560:	c407      	stmia	r4!, {r0, r1, r2}
 8004562:	8023      	strh	r3, [r4, #0]
 8004564:	3402      	adds	r4, #2
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	7023      	strb	r3, [r4, #0]
			0b11000110, // 8192 --> magenta-13
			0b11110110 // 16384 --> magenta-16
	};


	uint8_t index = (uint8_t) std::log2(val); // TODO this is likely bad
 800456a:	6838      	ldr	r0, [r7, #0]
 800456c:	f000 f96b 	bl	8004846 <_ZSt4log2IiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8004570:	ec53 2b10 	vmov	r2, r3, d0
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	f7fc fae6 	bl	8000b48 <__aeabi_d2uiz>
 800457c:	4603      	mov	r3, r0
 800457e:	75fb      	strb	r3, [r7, #23]


	return COLOUR_LIST[index];
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	3318      	adds	r3, #24
 8004584:	443b      	add	r3, r7
 8004586:	f813 3c10 	ldrb.w	r3, [r3, #-16]

}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd90      	pop	{r4, r7, pc}
 8004592:	bf00      	nop
 8004594:	08006b98 	.word	0x08006b98

08004598 <_ZN9Game_204811update_gridEPh>:


void Game_2048:: update_grid(uint8_t* led_grid) {
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]

	for (uint8_t k = 0; k < 25; k++) {
 80045a6:	2300      	movs	r3, #0
 80045a8:	73bb      	strb	r3, [r7, #14]
 80045aa:	e031      	b.n	8004610 <_ZN9Game_204811update_gridEPh+0x78>

		if (k/5 < _col || k%5 < _row) {
 80045ac:	7bbb      	ldrb	r3, [r7, #14]
 80045ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004620 <_ZN9Game_204811update_gridEPh+0x88>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d30d      	bcc.n	80045dc <_ZN9Game_204811update_gridEPh+0x44>
 80045c0:	7bba      	ldrb	r2, [r7, #14]
 80045c2:	4b17      	ldr	r3, [pc, #92]	@ (8004620 <_ZN9Game_204811update_gridEPh+0x88>)
 80045c4:	fba3 1302 	umull	r1, r3, r3, r2
 80045c8:	0899      	lsrs	r1, r3, #2
 80045ca:	460b      	mov	r3, r1
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d211      	bcs.n	8004600 <_ZN9Game_204811update_gridEPh+0x68>
			led_grid[k] = get_colour(_grid[i]);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	6819      	ldr	r1, [r3, #0]
 80045e8:	7bbb      	ldrb	r3, [r7, #14]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	18d4      	adds	r4, r2, r3
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ffa8 	bl	8004544 <_ZN9Game_204810get_colourEi>
 80045f4:	4603      	mov	r3, r0
 80045f6:	7023      	strb	r3, [r4, #0]
			i++;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	3301      	adds	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e004      	b.n	800460a <_ZN9Game_204811update_gridEPh+0x72>
		}
		else
			led_grid[k] = 0;
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	4413      	add	r3, r2
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
	for (uint8_t k = 0; k < 25; k++) {
 800460a:	7bbb      	ldrb	r3, [r7, #14]
 800460c:	3301      	adds	r3, #1
 800460e:	73bb      	strb	r3, [r7, #14]
 8004610:	7bbb      	ldrb	r3, [r7, #14]
 8004612:	2b18      	cmp	r3, #24
 8004614:	d9ca      	bls.n	80045ac <_ZN9Game_204811update_gridEPh+0x14>
	}

}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	cccccccd 	.word	0xcccccccd

08004624 <_ZN9Game_20489main_2048EPPhS0_>:
	return 0; // no change
}
*/


int Game_2048:: main_2048(uint8_t** rows, uint8_t* grid) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b090      	sub	sp, #64	@ 0x40
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]

	clear_grid();
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff ff65 	bl	8004500 <_ZN9Game_204810clear_gridEv>
	solid_colour_grid(grid, 0);
 8004636:	2100      	movs	r1, #0
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fc fd79 	bl	8001130 <solid_colour_grid>
	bool lost = false;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	uint32_t status_diff_millis = HAL_GetTick();
 8004644:	f7fd f83c 	bl	80016c0 <HAL_GetTick>
 8004648:	63b8      	str	r0, [r7, #56]	@ 0x38

	uint8_t button_states = 0xFF, prev_button_states = 0xFF;
 800464a:	23ff      	movs	r3, #255	@ 0xff
 800464c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004650:	23ff      	movs	r3, #255	@ 0xff
 8004652:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint32_t button_time_diffs[8];
	for (int btn = 0; btn < 8; btn++)
 8004656:	2300      	movs	r3, #0
 8004658:	633b      	str	r3, [r7, #48]	@ 0x30
 800465a:	e00b      	b.n	8004674 <_ZN9Game_20489main_2048EPPhS0_+0x50>
		 button_time_diffs[btn] = HAL_GetTick();
 800465c:	f7fd f830 	bl	80016c0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	3340      	adds	r3, #64	@ 0x40
 8004668:	443b      	add	r3, r7
 800466a:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int btn = 0; btn < 8; btn++)
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	3301      	adds	r3, #1
 8004672:	633b      	str	r3, [r7, #48]	@ 0x30
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	2b07      	cmp	r3, #7
 8004678:	ddf0      	ble.n	800465c <_ZN9Game_20489main_2048EPPhS0_+0x38>

	populate(HAL_GetTick());
 800467a:	f7fd f821 	bl	80016c0 <HAL_GetTick>
 800467e:	4603      	mov	r3, r0
 8004680:	4619      	mov	r1, r3
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff fec3 	bl	800440e <_ZN9Game_20488populateEm>

	while(!lost) {
 8004688:	e057      	b.n	800473a <_ZN9Game_20489main_2048EPPhS0_+0x116>

		if (prev_button_states != button_states) {
 800468a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800468e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004692:	429a      	cmp	r2, r3
 8004694:	d02d      	beq.n	80046f2 <_ZN9Game_20489main_2048EPPhS0_+0xce>

			// prevents bottom row from momentarily flashing due to polling
			disable_mux5();
 8004696:	f7fc fe0d 	bl	80012b4 <disable_mux5>

			if (move(button_states, rows)) { // if change has been made to the grid
 800469a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	4619      	mov	r1, r3
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fb3e 	bl	8003d24 <_ZN9Game_20484moveEhPPh>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d021      	beq.n	80046f2 <_ZN9Game_20489main_2048EPPhS0_+0xce>

				if (vacancy())
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff fb13 	bl	8003cda <_ZN9Game_20487vacancyEv>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <_ZN9Game_20489main_2048EPPhS0_+0xa4>
					populate(HAL_GetTick());
 80046ba:	f7fd f801 	bl	80016c0 <HAL_GetTick>
 80046be:	4603      	mov	r3, r0
 80046c0:	4619      	mov	r1, r3
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fea3 	bl	800440e <_ZN9Game_20488populateEm>

				if (!has_moves())
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fe2b 	bl	8004324 <_ZN9Game_20489has_movesEv>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <_ZN9Game_20489main_2048EPPhS0_+0xbc>
					lost=true; // no valid moves
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f


				update_grid(grid);
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff ff58 	bl	8004598 <_ZN9Game_204811update_gridEPh>
				set_grid(rows, grid, 6);
 80046e8:	2206      	movs	r2, #6
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	68b8      	ldr	r0, [r7, #8]
 80046ee:	f7fc fcbf 	bl	8001070 <set_grid>
			}
		}



		prev_button_states = button_states;
 80046f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80046f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		button_states = update_button_states(button_states, button_time_diffs);
 80046fa:	f107 0210 	add.w	r2, r7, #16
 80046fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f7fc fd6d 	bl	80011e4 <update_button_states>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		display(rows);
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f7fc fd29 	bl	8001168 <display>

		if (HAL_GetTick() - status_diff_millis > 1000) {
 8004716:	f7fc ffd3 	bl	80016c0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004724:	bf8c      	ite	hi
 8004726:	2301      	movhi	r3, #1
 8004728:	2300      	movls	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <_ZN9Game_20489main_2048EPPhS0_+0x116>
		  	status_diff_millis = HAL_GetTick();
 8004730:	f7fc ffc6 	bl	80016c0 <HAL_GetTick>
 8004734:	63b8      	str	r0, [r7, #56]	@ 0x38
		  	LED_heartbeat();
 8004736:	f7fc fc65 	bl	8001004 <LED_heartbeat>
	while(!lost) {
 800473a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800473e:	f083 0301 	eor.w	r3, r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1a0      	bne.n	800468a <_ZN9Game_20489main_2048EPPhS0_+0x66>
		}

	}

	return EXIT_SUCCESS;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3740      	adds	r7, #64	@ 0x40
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <_ZNSt5dequeIiSaIiEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f896 	bl	800488e <_ZNSt11_Deque_baseIiSaIiEEC1Ev>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <_ZNSt5stackIiSt5dequeIiSaIiEEEC1IS2_vEEv>:
      stack(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	stack()
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	: c() { }
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4618      	mov	r0, r3
 8004778:	2328      	movs	r3, #40	@ 0x28
 800477a:	461a      	mov	r2, r3
 800477c:	2100      	movs	r1, #0
 800477e:	f001 fc0a 	bl	8005f96 <memset>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ffe4 	bl	8004752 <_ZNSt5dequeIiSaIiEEC1Ev>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <_ZNSt5dequeIiSaIiEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	@ 0x28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800479c:	f107 0308 	add.w	r3, r7, #8
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f8a6 	bl	80048f4 <_ZNSt5dequeIiSaIiEE5beginEv>
 80047a8:	f107 0318 	add.w	r3, r7, #24
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f8af 	bl	8004912 <_ZNSt5dequeIiSaIiEE3endEv>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f8ba 	bl	8004930 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	f107 0218 	add.w	r2, r7, #24
 80047c2:	f107 0108 	add.w	r1, r7, #8
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8d9 	bl	800497e <_ZNSt5dequeIiSaIiEE15_M_destroy_dataESt15_Deque_iteratorIiRiPiES5_RKS0_>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f86e 	bl	80048b0 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	3728      	adds	r7, #40	@ 0x28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <_ZNKSt5stackIiSt5dequeIiSaIiEEE5emptyEv>:

      /**
       *  Returns true if the %stack is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f8d5 	bl	8004998 <_ZNKSt5dequeIiSaIiEE5emptyEv>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <_ZNSt5stackIiSt5dequeIiSaIiEEE3topEv>:
       *  Returns a read/write reference to the data at the first
       *  element of the %stack.
       */
      _GLIBCXX_NODISCARD
      reference
      top()
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.back();
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f8da 	bl	80049bc <_ZNSt5dequeIiSaIiEE4backEv>
 8004808:	4603      	mov	r3, r0
      }
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <_ZNSt5stackIiSt5dequeIiSaIiEEE4pushERKi>:
       *  element at the top of the %stack and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6839      	ldr	r1, [r7, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f8e4 	bl	80049ee <_ZNSt5dequeIiSaIiEE9push_backERKi>
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <_ZNSt5stackIiSt5dequeIiSaIiEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_back();
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f8f9 	bl	8004a30 <_ZNSt5dequeIiSaIiEE8pop_backEv>
      }
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <_ZSt4log2IiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    log2(_Tp __x)
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
    { return __builtin_log2(__x); }
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fb fe60 	bl	8000514 <__aeabi_i2d>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	ec43 2b10 	vmov	d0, r2, r3
 800485c:	f000 ff38 	bl	80056d0 <log2>
 8004860:	eeb0 7a40 	vmov.f32	s14, s0
 8004864:	eef0 7a60 	vmov.f32	s15, s1
 8004868:	eeb0 0a47 	vmov.f32	s0, s14
 800486c:	eef0 0a67 	vmov.f32	s1, s15
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f908 	bl	8004a94 <_ZNSaIiED1Ev>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <_ZNSt11_Deque_baseIiSaIiEEC1Ev>:
      _Deque_base()
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f8eb 	bl	8004a74 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800489e:	2100      	movs	r1, #0
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f903 	bl	8004aac <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80048c8:	3304      	adds	r3, #4
 80048ca:	461a      	mov	r2, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f950 	bl	8004b72 <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f963 	bl	8004ba8 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>
    }
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ffc6 	bl	8004876 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implD1Ev>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_ZNSt5dequeIiSaIiEE5beginEv>:
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      _GLIBCXX_NODISCARD
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f81e 	bl	8004946 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_ZNSt5dequeIiSaIiEE3endEv>:
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD
      iterator
      end() _GLIBCXX_NOEXCEPT
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	3318      	adds	r3, #24
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f80f 	bl	8004946 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <_ZNSt5dequeIiSaIiEE15_M_destroy_dataESt15_Deque_iteratorIiRiPiES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800497e:	b480      	push	{r7}
 8004980:	b08d      	sub	sp, #52	@ 0x34
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800498c:	bf00      	nop
 800498e:	3734      	adds	r7, #52	@ 0x34
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <_ZNKSt5dequeIiSaIiEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f103 0218 	add.w	r2, r3, #24
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3308      	adds	r3, #8
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f000 f916 	bl	8004bde <_ZSteqRKSt15_Deque_iteratorIiRiPiES4_>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <_ZNSt5dequeIiSaIiEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff ffa1 	bl	8004912 <_ZNSt5dequeIiSaIiEE3endEv>
	--__tmp;
 80049d0:	f107 0308 	add.w	r3, r7, #8
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f916 	bl	8004c06 <_ZNSt15_Deque_iteratorIiRiPiEmmEv>
	return *__tmp;
 80049da:	f107 0308 	add.w	r3, r7, #8
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f930 	bl	8004c44 <_ZNKSt15_Deque_iteratorIiRiPiEdeEv>
 80049e4:	4603      	mov	r3, r0
      }
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d00c      	beq.n	8004a20 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f000 f924 	bl	8004c5c <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	619a      	str	r2, [r3, #24]
      }
 8004a1e:	e003      	b.n	8004a28 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  _M_push_back_aux(__x);
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f92e 	bl	8004c84 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZNSt5dequeIiSaIiEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d010      	beq.n	8004a66 <_ZNSt5dequeIiSaIiEE8pop_backEv+0x36>
	    --this->_M_impl._M_finish._M_cur;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	1f1a      	subs	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff ff6d 	bl	8004930 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8004a56:	4602      	mov	r2, r0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f000 f954 	bl	8004d0c <_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_>
      }
 8004a64:	e002      	b.n	8004a6c <_ZNSt5dequeIiSaIiEE8pop_backEv+0x3c>
	  _M_pop_back_aux();
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f95d 	bl	8004d26 <_ZNSt5dequeIiSaIiEE15_M_pop_back_auxEv>
      }
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f97b 	bl	8004d78 <_ZNSaIiEC1Ev>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f983 	bl	8004d90 <_ZNSt11_Deque_baseIiSaIiEE16_Deque_impl_dataC1Ev>
	{ }
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f990 	bl	8004dc2 <_ZNSt15__new_allocatorIiED1Ev>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b089      	sub	sp, #36	@ 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8004ab6:	2004      	movs	r0, #4
 8004ab8:	f7ff f8ce 	bl	8003c58 <_ZSt16__deque_buf_sizej>
 8004abc:	4602      	mov	r2, r0
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004ac8:	2308      	movs	r3, #8
 8004aca:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3302      	adds	r3, #2
 8004ad0:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004ad2:	f107 0210 	add.w	r2, r7, #16
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f97b 	bl	8004dd8 <_ZSt3maxIjERKT_S2_S2_>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f985 	bl	8004e00 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>
 8004af6:	4602      	mov	r2, r0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1acb      	subs	r3, r1, r3
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4413      	add	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f98b 	bl	8004e3a <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3308      	adds	r3, #8
 8004b28:	69b9      	ldr	r1, [r7, #24]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f9a0 	bl	8004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f103 0218 	add.w	r2, r3, #24
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f000 f997 	bl	8004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004b4e:	2004      	movs	r0, #4
 8004b50:	f7ff f882 	bl	8003c58 <_ZSt16__deque_buf_sizej>
 8004b54:	4602      	mov	r2, r0
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b5c:	fb01 f202 	mul.w	r2, r1, r2
 8004b60:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	619a      	str	r2, [r3, #24]
    }
 8004b6a:	bf00      	nop
 8004b6c:	3724      	adds	r7, #36	@ 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd90      	pop	{r4, r7, pc}

08004b72 <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_>:
    _Deque_base<_Tp, _Alloc>::
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e008      	b.n	8004b96 <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_+0x24>
	_M_deallocate_node(*__n);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f989 	bl	8004ea2 <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3304      	adds	r3, #4
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3f2      	bcc.n	8004b84 <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_+0x12>
    }
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f984 	bl	8004ec8 <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f99a 	bl	8004f02 <_ZNSt16allocator_traitsISaIPiEE10deallocateERS1_PS0_j>
      }
 8004bce:	f107 0314 	add.w	r3, r7, #20
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f989 	bl	8004eea <_ZNSaIPiED1Ev>
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <_ZSteqRKSt15_Deque_iteratorIiRiPiES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <_ZNSt15_Deque_iteratorIiRiPiEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10a      	bne.n	8004c30 <_ZNSt15_Deque_iteratorIiRiPiEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f924 	bl	8004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1f1a      	subs	r2, r3, #4
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
	return *this;
 8004c3a:	687b      	ldr	r3, [r7, #4]
      }
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZNKSt15_Deque_iteratorIiRiPiEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f959 	bl	8004f20 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f95e 	bl	8004f36 <_ZNSt15__new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8004c84:	b5b0      	push	{r4, r5, r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f967 	bl	8004f62 <_ZNKSt5dequeIiSaIiEE4sizeEv>
 8004c94:	4604      	mov	r4, r0
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f975 	bl	8004f86 <_ZNKSt5dequeIiSaIiEE8max_sizeEv>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x2e>
	  __throw_length_error(
 8004cac:	4816      	ldr	r0, [pc, #88]	@ (8004d08 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x84>)
 8004cae:	f000 fd02 	bl	80056b6 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f977 	bl	8004fa8 <_ZNSt5dequeIiSaIiEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	1d1c      	adds	r4, r3, #4
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f000 f98b 	bl	8004fde <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8004ccc:	687c      	ldr	r4, [r7, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699d      	ldr	r5, [r3, #24]
 8004cd2:	6838      	ldr	r0, [r7, #0]
 8004cd4:	f000 f924 	bl	8004f20 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4629      	mov	r1, r5
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f7ff ffbc 	bl	8004c5c <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f103 0218 	add.w	r2, r3, #24
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 f8bc 	bl	8004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bdb0      	pop	{r4, r5, r7, pc}
 8004d08:	08006ba8 	.word	0x08006ba8

08004d0c <_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f972 	bl	8005002 <_ZNSt15__new_allocatorIiE7destroyIiEEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <_ZNSt5dequeIiSaIiEE15_M_pop_back_auxEv>:
	  }
      }

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f000 f8b3 	bl	8004ea2 <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f103 0218 	add.w	r2, r3, #24
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	3b04      	subs	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f000 f890 	bl	8004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	1f1a      	subs	r2, r3, #4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fde7 	bl	8004930 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8004d62:	4602      	mov	r2, r0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f7ff ffce 	bl	8004d0c <_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZNSaIiEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f949 	bl	8005018 <_ZNSt15__new_allocatorIiEC1Ev>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_ZNSt11_Deque_baseIiSaIiEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3308      	adds	r3, #8
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f940 	bl	800502e <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3318      	adds	r3, #24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f93b 	bl	800502e <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
	{ }
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <_ZNSt15__new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d201      	bcs.n	8004df2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	e000      	b.n	8004df4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004df2:	687b      	ldr	r3, [r7, #4]
    }
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004e0a:	f107 030c 	add.w	r3, r7, #12
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f859 	bl	8004ec8 <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f91d 	bl	800505c <_ZNSt16allocator_traitsISaIPiEE8allocateERS1_j>
 8004e22:	4604      	mov	r4, r0
 8004e24:	bf00      	nop
      }
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f85d 	bl	8004eea <_ZNSaIPiED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004e30:	4623      	mov	r3, r4
      }
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}

08004e3a <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>:
    _Deque_base<_Tp, _Alloc>::
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b086      	sub	sp, #24
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e008      	b.n	8004e5e <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f8c6 	bl	8004fde <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>
 8004e52:	4602      	mov	r2, r0
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d3f2      	bcc.n	8004e4c <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x12>
    }
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685c      	ldr	r4, [r3, #4]
 8004e8c:	f000 f8f5 	bl	800507a <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>
 8004e90:	4603      	mov	r3, r0
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	18e2      	adds	r2, r4, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
      }
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd90      	pop	{r4, r7, pc}

08004ea2 <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004ea2:	b590      	push	{r4, r7, lr}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004eac:	687c      	ldr	r4, [r7, #4]
 8004eae:	2004      	movs	r0, #4
 8004eb0:	f7fe fed2 	bl	8003c58 <_ZSt16__deque_buf_sizej>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 f8e5 	bl	800508a <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd90      	pop	{r4, r7, pc}

08004ec8 <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004ed2:	6838      	ldr	r0, [r7, #0]
 8004ed4:	f000 f8e8 	bl	80050a8 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8ee 	bl	80050be <_ZNSaIPiEC1IiEERKSaIT_E>
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_ZNSaIPiED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8f0 	bl	80050d8 <_ZNSt15__new_allocatorIPiED1Ev>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <_ZNSt16allocator_traitsISaIPiEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f8eb 	bl	80050ee <_ZNSt15__new_allocatorIPiE10deallocateEPS0_j>
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_ZNSt15__new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8004f36:	b590      	push	{r4, r7, lr}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4619      	mov	r1, r3
 8004f46:	2004      	movs	r0, #4
 8004f48:	f7fe fe7a 	bl	8003c40 <_ZnwjPv>
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff ffe6 	bl	8004f20 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8004f54:	4603      	mov	r3, r0
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd90      	pop	{r4, r7, pc}

08004f62 <_ZNKSt5dequeIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f103 0218 	add.w	r2, r3, #24
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3308      	adds	r3, #8
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f000 f8c9 	bl	800510e <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZNKSt5dequeIiSaIiEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f889 	bl	80050a8 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8004f96:	4603      	mov	r3, r0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f8e4 	bl	8005166 <_ZNSt5dequeIiSaIiEE11_S_max_sizeERKS0_>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <_ZNSt5dequeIiSaIiEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	6809      	ldr	r1, [r1, #0]
 8004fc2:	1a41      	subs	r1, r0, r1
 8004fc4:	1089      	asrs	r1, r1, #2
 8004fc6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d904      	bls.n	8004fd6 <_ZNSt5dequeIiSaIiEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f8e2 	bl	800519a <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>
      }
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004fde:	b590      	push	{r4, r7, lr}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004fe6:	687c      	ldr	r4, [r7, #4]
 8004fe8:	2004      	movs	r0, #4
 8004fea:	f7fe fe35 	bl	8003c58 <_ZSt16__deque_buf_sizej>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f96b 	bl	80052ce <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8004ff8:	4603      	mov	r3, r0
      }
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd90      	pop	{r4, r7, pc}

08005002 <_ZNSt15__new_allocatorIiE7destroyIiEEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_ZNSt15__new_allocatorIiEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <_ZNSt16allocator_traitsISaIPiEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005066:	2200      	movs	r2, #0
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f93e 	bl	80052ec <_ZNSt15__new_allocatorIPiE8allocateEjPKv>
 8005070:	4603      	mov	r3, r0
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800507a:	b580      	push	{r7, lr}
 800507c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800507e:	2004      	movs	r0, #4
 8005080:	f7fe fdea 	bl	8003c58 <_ZSt16__deque_buf_sizej>
 8005084:	4603      	mov	r3, r0
 8005086:	4618      	mov	r0, r3
 8005088:	bd80      	pop	{r7, pc}

0800508a <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f94f 	bl	800533e <_ZNSt15__new_allocatorIiE10deallocateEPij>
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <_ZNSaIPiEC1IiEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f948 	bl	800535e <_ZNSt15__new_allocatorIPiEC1Ev>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZNSt15__new_allocatorIPiED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <_ZNSt15__new_allocatorIPiE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4619      	mov	r1, r3
 8005100:	68b8      	ldr	r0, [r7, #8]
 8005102:	f000 fabb 	bl	800567c <_ZdlPvj>
      }
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8005118:	f7ff ffaf 	bl	800507a <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>
 800511c:	4603      	mov	r3, r0
 800511e:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	109b      	asrs	r3, r3, #2
 800512c:	461a      	mov	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6811      	ldr	r1, [r2, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6852      	ldr	r2, [r2, #4]
 800514a:	1a8a      	subs	r2, r1, r2
 800514c:	1092      	asrs	r2, r2, #2
 800514e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	6891      	ldr	r1, [r2, #8]
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	1a8a      	subs	r2, r1, r2
 800515a:	1092      	asrs	r2, r2, #2
 800515c:	4413      	add	r3, r2
      }
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <_ZNSt5dequeIiSaIiEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800516e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005172:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8fd 	bl	8005374 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 800517a:	4603      	mov	r3, r0
 800517c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800517e:	f107 0208 	add.w	r2, r7, #8
 8005182:	f107 030c 	add.w	r3, r7, #12
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f000 f8ff 	bl	800538c <_ZSt3minIjERKT_S2_S2_>
 800518e:	4603      	mov	r3, r0
 8005190:	681b      	ldr	r3, [r3, #0]
      }
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800519a:	b590      	push	{r4, r7, lr}
 800519c:	b08b      	sub	sp, #44	@ 0x2c
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	4613      	mov	r3, r2
 80051a6:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	109b      	asrs	r3, r3, #2
 80051b4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80051b6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	4413      	add	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d92d      	bls.n	8005228 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	1acb      	subs	r3, r1, r3
 80051d8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80051da:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x4e>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	e000      	b.n	80051ea <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x50>
 80051e8:	2300      	movs	r3, #0
 80051ea:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80051ec:	4413      	add	r3, r2
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d209      	bcs.n	800520e <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8005202:	3304      	adds	r3, #4
 8005204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005206:	4619      	mov	r1, r3
 8005208:	f000 f8d4 	bl	80053b4 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>
 800520c:	e048      	b.n	80052a0 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005216:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800521c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521e:	4413      	add	r3, r2
 8005220:	461a      	mov	r2, r3
 8005222:	f000 f8df 	bl	80053e4 <_ZSt13copy_backwardIPPiS1_ET0_T_S3_S2_>
 8005226:	e03b      	b.n	80052a0 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3304      	adds	r3, #4
 8005230:	f107 0208 	add.w	r2, r7, #8
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fdce 	bl	8004dd8 <_ZSt3maxIjERKT_S2_S2_>
 800523c:	4603      	mov	r3, r0
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005242:	3302      	adds	r3, #2
 8005244:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fdd8 	bl	8004e00 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>
 8005250:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xce>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	e000      	b.n	800526a <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xd0>
 8005268:	2300      	movs	r3, #0
 800526a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800527a:	3304      	adds	r3, #4
 800527c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527e:	4619      	mov	r1, r3
 8005280:	f000 f898 	bl	80053b4 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6819      	ldr	r1, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	461a      	mov	r2, r3
 8005290:	f7ff fc8a 	bl	8004ba8 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>

	  this->_M_impl._M_map = __new_map;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3308      	adds	r3, #8
 80052a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fde2 	bl	8004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f103 0018 	add.w	r0, r3, #24
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052b8:	3b01      	subs	r3, #1
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052be:	4413      	add	r3, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	f7ff fdd5 	bl	8004e70 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
    }
 80052c6:	bf00      	nop
 80052c8:	372c      	adds	r7, #44	@ 0x2c
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd90      	pop	{r4, r7, pc}

080052ce <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80052d8:	2200      	movs	r2, #0
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f899 	bl	8005414 <_ZNSt15__new_allocatorIiE8allocateEjPKv>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <_ZNSt15__new_allocatorIPiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f8b4 	bl	8005466 <_ZNKSt15__new_allocatorIPiE11_M_max_sizeEv>
 80052fe:	4602      	mov	r2, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4293      	cmp	r3, r2
 8005304:	bf8c      	ite	hi
 8005306:	2301      	movhi	r3, #1
 8005308:	2300      	movls	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <_ZNSt15__new_allocatorIPiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005320:	d301      	bcc.n	8005326 <_ZNSt15__new_allocatorIPiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8005322:	f000 f9c5 	bl	80056b0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8005326:	f000 f9c0 	bl	80056aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f9a8 	bl	8005684 <_Znwj>
 8005334:	4603      	mov	r3, r0
      }
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <_ZNSt15__new_allocatorIiE10deallocateEPij>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4619      	mov	r1, r3
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f000 f993 	bl	800567c <_ZdlPvj>
      }
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZNSt15__new_allocatorIPiEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f87e 	bl	800547e <_ZNKSt15__new_allocatorIiE8max_sizeEv>
 8005382:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d201      	bcs.n	80053a6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	e000      	b.n	80053a8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80053a6:	687b      	ldr	r3, [r7, #4]
    }
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f868 	bl	8005496 <_ZSt12__miter_baseIPPiET_S2_>
 80053c6:	4604      	mov	r4, r0
 80053c8:	68b8      	ldr	r0, [r7, #8]
 80053ca:	f000 f864 	bl	8005496 <_ZSt12__miter_baseIPPiET_S2_>
 80053ce:	4603      	mov	r3, r0
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4619      	mov	r1, r3
 80053d4:	4620      	mov	r0, r4
 80053d6:	f000 f869 	bl	80054ac <_ZSt13__copy_move_aILb0EPPiS1_ET1_T0_S3_S2_>
 80053da:	4603      	mov	r3, r0
    }
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd90      	pop	{r4, r7, pc}

080053e4 <_ZSt13copy_backwardIPPiS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_BI2,
	    typename iterator_traits<_BI1>::reference>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f850 	bl	8005496 <_ZSt12__miter_baseIPPiET_S2_>
 80053f6:	4604      	mov	r4, r0
 80053f8:	68b8      	ldr	r0, [r7, #8]
 80053fa:	f000 f84c 	bl	8005496 <_ZSt12__miter_baseIPPiET_S2_>
 80053fe:	4603      	mov	r3, r0
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4619      	mov	r1, r3
 8005404:	4620      	mov	r0, r4
 8005406:	f000 f874 	bl	80054f2 <_ZSt22__copy_move_backward_aILb0EPPiS1_ET1_T0_S3_S2_>
 800540a:	4603      	mov	r3, r0
    }
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	bd90      	pop	{r4, r7, pc}

08005414 <_ZNSt15__new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f889 	bl	8005538 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 8005426:	4602      	mov	r2, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4293      	cmp	r3, r2
 800542c:	bf8c      	ite	hi
 800542e:	2301      	movhi	r3, #1
 8005430:	2300      	movls	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005448:	d301      	bcc.n	800544e <_ZNSt15__new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800544a:	f000 f931 	bl	80056b0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800544e:	f000 f92c 	bl	80056aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f914 	bl	8005684 <_Znwj>
 800545c:	4603      	mov	r3, r0
      }
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <_ZNKSt15__new_allocatorIPiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800546e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <_ZNKSt15__new_allocatorIiE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f856 	bl	8005538 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>
 800548c:	4603      	mov	r3, r0
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <_ZSt12__miter_baseIPPiET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <_ZSt13__copy_move_aILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80054ac:	b5b0      	push	{r4, r5, r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f849 	bl	8005550 <_ZSt12__niter_baseIPPiET_S2_>
 80054be:	4604      	mov	r4, r0
 80054c0:	68b8      	ldr	r0, [r7, #8]
 80054c2:	f000 f845 	bl	8005550 <_ZSt12__niter_baseIPPiET_S2_>
 80054c6:	4605      	mov	r5, r0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f840 	bl	8005550 <_ZSt12__niter_baseIPPiET_S2_>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	4629      	mov	r1, r5
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 f845 	bl	8005566 <_ZSt14__copy_move_a1ILb0EPPiS1_ET1_T0_S3_S2_>
 80054dc:	4602      	mov	r2, r0
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f84f 	bl	8005586 <_ZSt12__niter_wrapIPPiET_RKS2_S2_>
 80054e8:	4603      	mov	r3, r0
    }
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bdb0      	pop	{r4, r5, r7, pc}

080054f2 <_ZSt22__copy_move_backward_aILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80054f2:	b5b0      	push	{r4, r5, r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f826 	bl	8005550 <_ZSt12__niter_baseIPPiET_S2_>
 8005504:	4604      	mov	r4, r0
 8005506:	68b8      	ldr	r0, [r7, #8]
 8005508:	f000 f822 	bl	8005550 <_ZSt12__niter_baseIPPiET_S2_>
 800550c:	4605      	mov	r5, r0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f81d 	bl	8005550 <_ZSt12__niter_baseIPPiET_S2_>
 8005516:	4603      	mov	r3, r0
 8005518:	461a      	mov	r2, r3
 800551a:	4629      	mov	r1, r5
 800551c:	4620      	mov	r0, r4
 800551e:	f000 f83e 	bl	800559e <_ZSt23__copy_move_backward_a1ILb0EPPiS1_ET1_T0_S3_S2_>
 8005522:	4602      	mov	r2, r0
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f82c 	bl	8005586 <_ZSt12__niter_wrapIPPiET_RKS2_S2_>
 800552e:	4603      	mov	r3, r0
    }
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bdb0      	pop	{r4, r5, r7, pc}

08005538 <_ZNKSt15__new_allocatorIiE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005540:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <_ZSt12__niter_baseIPPiET_S2_>:
    __niter_base(_Iterator __it)
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <_ZSt14__copy_move_a1ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f821 	bl	80055be <_ZSt14__copy_move_a2ILb0EPPiS1_ET1_T0_S3_S2_>
 800557c:	4603      	mov	r3, r0
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_ZSt12__niter_wrapIPPiET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <_ZSt23__copy_move_backward_a1ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f815 	bl	80055de <_ZSt23__copy_move_backward_a2ILb0EPPiS1_ET1_T0_S3_S2_>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <_ZSt14__copy_move_a2ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f815 	bl	80055fe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_>
 80055d4:	4603      	mov	r3, r0
    }
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <_ZSt23__copy_move_backward_a2ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f822 	bl	8005638 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_>
 80055f4:	4603      	mov	r3, r0
    }
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	109b      	asrs	r3, r3, #2
 8005612:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	461a      	mov	r2, r3
 8005620:	68f9      	ldr	r1, [r7, #12]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fc9d 	bl	8005f62 <memmove>
	  return __result + _Num;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
	}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	109b      	asrs	r3, r3, #2
 800564c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	425b      	negs	r3, r3
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	18d0      	adds	r0, r2, r3
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	461a      	mov	r2, r3
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	f000 fc7c 	bl	8005f62 <memmove>
	  return __result - _Num;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	425b      	negs	r3, r3
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
	}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <_ZdlPvj>:
 800567c:	f000 b81e 	b.w	80056bc <_ZdlPv>

08005680 <_ZdaPv>:
 8005680:	f000 b81c 	b.w	80056bc <_ZdlPv>

08005684 <_Znwj>:
 8005684:	2801      	cmp	r0, #1
 8005686:	bf38      	it	cc
 8005688:	2001      	movcc	r0, #1
 800568a:	b510      	push	{r4, lr}
 800568c:	4604      	mov	r4, r0
 800568e:	4620      	mov	r0, r4
 8005690:	f000 fa38 	bl	8005b04 <malloc>
 8005694:	b100      	cbz	r0, 8005698 <_Znwj+0x14>
 8005696:	bd10      	pop	{r4, pc}
 8005698:	f000 f812 	bl	80056c0 <_ZSt15get_new_handlerv>
 800569c:	b908      	cbnz	r0, 80056a2 <_Znwj+0x1e>
 800569e:	f000 fa29 	bl	8005af4 <abort>
 80056a2:	4780      	blx	r0
 80056a4:	e7f3      	b.n	800568e <_Znwj+0xa>

080056a6 <_Znaj>:
 80056a6:	f7ff bfed 	b.w	8005684 <_Znwj>

080056aa <_ZSt17__throw_bad_allocv>:
 80056aa:	b508      	push	{r3, lr}
 80056ac:	f000 fa22 	bl	8005af4 <abort>

080056b0 <_ZSt28__throw_bad_array_new_lengthv>:
 80056b0:	b508      	push	{r3, lr}
 80056b2:	f000 fa1f 	bl	8005af4 <abort>

080056b6 <_ZSt20__throw_length_errorPKc>:
 80056b6:	b508      	push	{r3, lr}
 80056b8:	f000 fa1c 	bl	8005af4 <abort>

080056bc <_ZdlPv>:
 80056bc:	f000 ba2a 	b.w	8005b14 <free>

080056c0 <_ZSt15get_new_handlerv>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	@ (80056cc <_ZSt15get_new_handlerv+0xc>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	f3bf 8f5b 	dmb	ish
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	200000e4 	.word	0x200000e4

080056d0 <log2>:
 80056d0:	b508      	push	{r3, lr}
 80056d2:	f000 f811 	bl	80056f8 <log>
 80056d6:	a306      	add	r3, pc, #24	@ (adr r3, 80056f0 <log2+0x20>)
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	ec51 0b10 	vmov	r0, r1, d0
 80056e0:	f7fb f8ac 	bl	800083c <__aeabi_ddiv>
 80056e4:	ec41 0b10 	vmov	d0, r0, r1
 80056e8:	bd08      	pop	{r3, pc}
 80056ea:	bf00      	nop
 80056ec:	f3af 8000 	nop.w
 80056f0:	fefa39ef 	.word	0xfefa39ef
 80056f4:	3fe62e42 	.word	0x3fe62e42

080056f8 <log>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	ed2d 8b02 	vpush	{d8}
 80056fe:	ec55 4b10 	vmov	r4, r5, d0
 8005702:	f000 f841 	bl	8005788 <__ieee754_log>
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	4620      	mov	r0, r4
 800570c:	4629      	mov	r1, r5
 800570e:	eeb0 8a40 	vmov.f32	s16, s0
 8005712:	eef0 8a60 	vmov.f32	s17, s1
 8005716:	f7fb fa01 	bl	8000b1c <__aeabi_dcmpun>
 800571a:	b998      	cbnz	r0, 8005744 <log+0x4c>
 800571c:	2200      	movs	r2, #0
 800571e:	2300      	movs	r3, #0
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fb f9f0 	bl	8000b08 <__aeabi_dcmpgt>
 8005728:	b960      	cbnz	r0, 8005744 <log+0x4c>
 800572a:	2200      	movs	r2, #0
 800572c:	2300      	movs	r3, #0
 800572e:	4620      	mov	r0, r4
 8005730:	4629      	mov	r1, r5
 8005732:	f7fb f9c1 	bl	8000ab8 <__aeabi_dcmpeq>
 8005736:	b160      	cbz	r0, 8005752 <log+0x5a>
 8005738:	f000 fcd0 	bl	80060dc <__errno>
 800573c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8005768 <log+0x70>
 8005740:	2322      	movs	r3, #34	@ 0x22
 8005742:	6003      	str	r3, [r0, #0]
 8005744:	eeb0 0a48 	vmov.f32	s0, s16
 8005748:	eef0 0a68 	vmov.f32	s1, s17
 800574c:	ecbd 8b02 	vpop	{d8}
 8005750:	bd38      	pop	{r3, r4, r5, pc}
 8005752:	f000 fcc3 	bl	80060dc <__errno>
 8005756:	ecbd 8b02 	vpop	{d8}
 800575a:	2321      	movs	r3, #33	@ 0x21
 800575c:	6003      	str	r3, [r0, #0]
 800575e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005762:	4803      	ldr	r0, [pc, #12]	@ (8005770 <log+0x78>)
 8005764:	f000 b808 	b.w	8005778 <nan>
 8005768:	00000000 	.word	0x00000000
 800576c:	fff00000 	.word	0xfff00000
 8005770:	08006cf2 	.word	0x08006cf2
 8005774:	00000000 	.word	0x00000000

08005778 <nan>:
 8005778:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005780 <nan+0x8>
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	00000000 	.word	0x00000000
 8005784:	7ff80000 	.word	0x7ff80000

08005788 <__ieee754_log>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	ec51 0b10 	vmov	r0, r1, d0
 8005790:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005794:	b087      	sub	sp, #28
 8005796:	460d      	mov	r5, r1
 8005798:	da26      	bge.n	80057e8 <__ieee754_log+0x60>
 800579a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800579e:	4303      	orrs	r3, r0
 80057a0:	4602      	mov	r2, r0
 80057a2:	d10a      	bne.n	80057ba <__ieee754_log+0x32>
 80057a4:	49ce      	ldr	r1, [pc, #824]	@ (8005ae0 <__ieee754_log+0x358>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	2300      	movs	r3, #0
 80057aa:	2000      	movs	r0, #0
 80057ac:	f7fb f846 	bl	800083c <__aeabi_ddiv>
 80057b0:	ec41 0b10 	vmov	d0, r0, r1
 80057b4:	b007      	add	sp, #28
 80057b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ba:	2900      	cmp	r1, #0
 80057bc:	da05      	bge.n	80057ca <__ieee754_log+0x42>
 80057be:	460b      	mov	r3, r1
 80057c0:	f7fa fd5a 	bl	8000278 <__aeabi_dsub>
 80057c4:	2200      	movs	r2, #0
 80057c6:	2300      	movs	r3, #0
 80057c8:	e7f0      	b.n	80057ac <__ieee754_log+0x24>
 80057ca:	4bc6      	ldr	r3, [pc, #792]	@ (8005ae4 <__ieee754_log+0x35c>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	f7fa ff0b 	bl	80005e8 <__aeabi_dmul>
 80057d2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80057d6:	460d      	mov	r5, r1
 80057d8:	4ac3      	ldr	r2, [pc, #780]	@ (8005ae8 <__ieee754_log+0x360>)
 80057da:	4295      	cmp	r5, r2
 80057dc:	dd06      	ble.n	80057ec <__ieee754_log+0x64>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	f7fa fd4b 	bl	800027c <__adddf3>
 80057e6:	e7e3      	b.n	80057b0 <__ieee754_log+0x28>
 80057e8:	2300      	movs	r3, #0
 80057ea:	e7f5      	b.n	80057d8 <__ieee754_log+0x50>
 80057ec:	152c      	asrs	r4, r5, #20
 80057ee:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80057f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80057f6:	441c      	add	r4, r3
 80057f8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80057fc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8005800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005804:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8005808:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800580c:	ea42 0105 	orr.w	r1, r2, r5
 8005810:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005814:	2200      	movs	r2, #0
 8005816:	4bb5      	ldr	r3, [pc, #724]	@ (8005aec <__ieee754_log+0x364>)
 8005818:	f7fa fd2e 	bl	8000278 <__aeabi_dsub>
 800581c:	1cab      	adds	r3, r5, #2
 800581e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005822:	2b02      	cmp	r3, #2
 8005824:	4682      	mov	sl, r0
 8005826:	468b      	mov	fp, r1
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	dc53      	bgt.n	80058d6 <__ieee754_log+0x14e>
 800582e:	2300      	movs	r3, #0
 8005830:	f7fb f942 	bl	8000ab8 <__aeabi_dcmpeq>
 8005834:	b1d0      	cbz	r0, 800586c <__ieee754_log+0xe4>
 8005836:	2c00      	cmp	r4, #0
 8005838:	f000 8120 	beq.w	8005a7c <__ieee754_log+0x2f4>
 800583c:	4620      	mov	r0, r4
 800583e:	f7fa fe69 	bl	8000514 <__aeabi_i2d>
 8005842:	a391      	add	r3, pc, #580	@ (adr r3, 8005a88 <__ieee754_log+0x300>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	4606      	mov	r6, r0
 800584a:	460f      	mov	r7, r1
 800584c:	f7fa fecc 	bl	80005e8 <__aeabi_dmul>
 8005850:	a38f      	add	r3, pc, #572	@ (adr r3, 8005a90 <__ieee754_log+0x308>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	4604      	mov	r4, r0
 8005858:	460d      	mov	r5, r1
 800585a:	4630      	mov	r0, r6
 800585c:	4639      	mov	r1, r7
 800585e:	f7fa fec3 	bl	80005e8 <__aeabi_dmul>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4620      	mov	r0, r4
 8005868:	4629      	mov	r1, r5
 800586a:	e7ba      	b.n	80057e2 <__ieee754_log+0x5a>
 800586c:	a38a      	add	r3, pc, #552	@ (adr r3, 8005a98 <__ieee754_log+0x310>)
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	4650      	mov	r0, sl
 8005874:	4659      	mov	r1, fp
 8005876:	f7fa feb7 	bl	80005e8 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	2000      	movs	r0, #0
 8005880:	499b      	ldr	r1, [pc, #620]	@ (8005af0 <__ieee754_log+0x368>)
 8005882:	f7fa fcf9 	bl	8000278 <__aeabi_dsub>
 8005886:	4652      	mov	r2, sl
 8005888:	4606      	mov	r6, r0
 800588a:	460f      	mov	r7, r1
 800588c:	465b      	mov	r3, fp
 800588e:	4650      	mov	r0, sl
 8005890:	4659      	mov	r1, fp
 8005892:	f7fa fea9 	bl	80005e8 <__aeabi_dmul>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4630      	mov	r0, r6
 800589c:	4639      	mov	r1, r7
 800589e:	f7fa fea3 	bl	80005e8 <__aeabi_dmul>
 80058a2:	4606      	mov	r6, r0
 80058a4:	460f      	mov	r7, r1
 80058a6:	b914      	cbnz	r4, 80058ae <__ieee754_log+0x126>
 80058a8:	4632      	mov	r2, r6
 80058aa:	463b      	mov	r3, r7
 80058ac:	e0a0      	b.n	80059f0 <__ieee754_log+0x268>
 80058ae:	4620      	mov	r0, r4
 80058b0:	f7fa fe30 	bl	8000514 <__aeabi_i2d>
 80058b4:	a374      	add	r3, pc, #464	@ (adr r3, 8005a88 <__ieee754_log+0x300>)
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	4680      	mov	r8, r0
 80058bc:	4689      	mov	r9, r1
 80058be:	f7fa fe93 	bl	80005e8 <__aeabi_dmul>
 80058c2:	a373      	add	r3, pc, #460	@ (adr r3, 8005a90 <__ieee754_log+0x308>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	4640      	mov	r0, r8
 80058ce:	4649      	mov	r1, r9
 80058d0:	f7fa fe8a 	bl	80005e8 <__aeabi_dmul>
 80058d4:	e0a5      	b.n	8005a22 <__ieee754_log+0x29a>
 80058d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80058da:	f7fa fccf 	bl	800027c <__adddf3>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4650      	mov	r0, sl
 80058e4:	4659      	mov	r1, fp
 80058e6:	f7fa ffa9 	bl	800083c <__aeabi_ddiv>
 80058ea:	e9cd 0100 	strd	r0, r1, [sp]
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7fa fe10 	bl	8000514 <__aeabi_i2d>
 80058f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	f7fa fe72 	bl	80005e8 <__aeabi_dmul>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800590c:	f7fa fe6c 	bl	80005e8 <__aeabi_dmul>
 8005910:	a363      	add	r3, pc, #396	@ (adr r3, 8005aa0 <__ieee754_log+0x318>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	4680      	mov	r8, r0
 8005918:	4689      	mov	r9, r1
 800591a:	f7fa fe65 	bl	80005e8 <__aeabi_dmul>
 800591e:	a362      	add	r3, pc, #392	@ (adr r3, 8005aa8 <__ieee754_log+0x320>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fcaa 	bl	800027c <__adddf3>
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	f7fa fe5c 	bl	80005e8 <__aeabi_dmul>
 8005930:	a35f      	add	r3, pc, #380	@ (adr r3, 8005ab0 <__ieee754_log+0x328>)
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	f7fa fca1 	bl	800027c <__adddf3>
 800593a:	4642      	mov	r2, r8
 800593c:	464b      	mov	r3, r9
 800593e:	f7fa fe53 	bl	80005e8 <__aeabi_dmul>
 8005942:	a35d      	add	r3, pc, #372	@ (adr r3, 8005ab8 <__ieee754_log+0x330>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f7fa fc98 	bl	800027c <__adddf3>
 800594c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005950:	f7fa fe4a 	bl	80005e8 <__aeabi_dmul>
 8005954:	a35a      	add	r3, pc, #360	@ (adr r3, 8005ac0 <__ieee754_log+0x338>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	f7fa fe41 	bl	80005e8 <__aeabi_dmul>
 8005966:	a358      	add	r3, pc, #352	@ (adr r3, 8005ac8 <__ieee754_log+0x340>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fa fc86 	bl	800027c <__adddf3>
 8005970:	4642      	mov	r2, r8
 8005972:	464b      	mov	r3, r9
 8005974:	f7fa fe38 	bl	80005e8 <__aeabi_dmul>
 8005978:	a355      	add	r3, pc, #340	@ (adr r3, 8005ad0 <__ieee754_log+0x348>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fc7d 	bl	800027c <__adddf3>
 8005982:	4642      	mov	r2, r8
 8005984:	464b      	mov	r3, r9
 8005986:	f7fa fe2f 	bl	80005e8 <__aeabi_dmul>
 800598a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8005996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800599a:	f7fa fc6f 	bl	800027c <__adddf3>
 800599e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80059a2:	3551      	adds	r5, #81	@ 0x51
 80059a4:	4335      	orrs	r5, r6
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	4680      	mov	r8, r0
 80059aa:	4689      	mov	r9, r1
 80059ac:	dd48      	ble.n	8005a40 <__ieee754_log+0x2b8>
 80059ae:	4b50      	ldr	r3, [pc, #320]	@ (8005af0 <__ieee754_log+0x368>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	4650      	mov	r0, sl
 80059b4:	4659      	mov	r1, fp
 80059b6:	f7fa fe17 	bl	80005e8 <__aeabi_dmul>
 80059ba:	4652      	mov	r2, sl
 80059bc:	465b      	mov	r3, fp
 80059be:	f7fa fe13 	bl	80005e8 <__aeabi_dmul>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4606      	mov	r6, r0
 80059c8:	460f      	mov	r7, r1
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	f7fa fc55 	bl	800027c <__adddf3>
 80059d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059d6:	f7fa fe07 	bl	80005e8 <__aeabi_dmul>
 80059da:	4680      	mov	r8, r0
 80059dc:	4689      	mov	r9, r1
 80059de:	b964      	cbnz	r4, 80059fa <__ieee754_log+0x272>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fa fc46 	bl	8000278 <__aeabi_dsub>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4650      	mov	r0, sl
 80059f2:	4659      	mov	r1, fp
 80059f4:	f7fa fc40 	bl	8000278 <__aeabi_dsub>
 80059f8:	e6da      	b.n	80057b0 <__ieee754_log+0x28>
 80059fa:	a323      	add	r3, pc, #140	@ (adr r3, 8005a88 <__ieee754_log+0x300>)
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a04:	f7fa fdf0 	bl	80005e8 <__aeabi_dmul>
 8005a08:	a321      	add	r3, pc, #132	@ (adr r3, 8005a90 <__ieee754_log+0x308>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	4604      	mov	r4, r0
 8005a10:	460d      	mov	r5, r1
 8005a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a16:	f7fa fde7 	bl	80005e8 <__aeabi_dmul>
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	f7fa fc2d 	bl	800027c <__adddf3>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4630      	mov	r0, r6
 8005a28:	4639      	mov	r1, r7
 8005a2a:	f7fa fc25 	bl	8000278 <__aeabi_dsub>
 8005a2e:	4652      	mov	r2, sl
 8005a30:	465b      	mov	r3, fp
 8005a32:	f7fa fc21 	bl	8000278 <__aeabi_dsub>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	e7d9      	b.n	80059f4 <__ieee754_log+0x26c>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4650      	mov	r0, sl
 8005a46:	4659      	mov	r1, fp
 8005a48:	f7fa fc16 	bl	8000278 <__aeabi_dsub>
 8005a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a50:	f7fa fdca 	bl	80005e8 <__aeabi_dmul>
 8005a54:	4606      	mov	r6, r0
 8005a56:	460f      	mov	r7, r1
 8005a58:	2c00      	cmp	r4, #0
 8005a5a:	f43f af25 	beq.w	80058a8 <__ieee754_log+0x120>
 8005a5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8005a88 <__ieee754_log+0x300>)
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a68:	f7fa fdbe 	bl	80005e8 <__aeabi_dmul>
 8005a6c:	a308      	add	r3, pc, #32	@ (adr r3, 8005a90 <__ieee754_log+0x308>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	4604      	mov	r4, r0
 8005a74:	460d      	mov	r5, r1
 8005a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a7a:	e729      	b.n	80058d0 <__ieee754_log+0x148>
 8005a7c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8005ad8 <__ieee754_log+0x350>
 8005a80:	e698      	b.n	80057b4 <__ieee754_log+0x2c>
 8005a82:	bf00      	nop
 8005a84:	f3af 8000 	nop.w
 8005a88:	fee00000 	.word	0xfee00000
 8005a8c:	3fe62e42 	.word	0x3fe62e42
 8005a90:	35793c76 	.word	0x35793c76
 8005a94:	3dea39ef 	.word	0x3dea39ef
 8005a98:	55555555 	.word	0x55555555
 8005a9c:	3fd55555 	.word	0x3fd55555
 8005aa0:	df3e5244 	.word	0xdf3e5244
 8005aa4:	3fc2f112 	.word	0x3fc2f112
 8005aa8:	96cb03de 	.word	0x96cb03de
 8005aac:	3fc74664 	.word	0x3fc74664
 8005ab0:	94229359 	.word	0x94229359
 8005ab4:	3fd24924 	.word	0x3fd24924
 8005ab8:	55555593 	.word	0x55555593
 8005abc:	3fe55555 	.word	0x3fe55555
 8005ac0:	d078c69f 	.word	0xd078c69f
 8005ac4:	3fc39a09 	.word	0x3fc39a09
 8005ac8:	1d8e78af 	.word	0x1d8e78af
 8005acc:	3fcc71c5 	.word	0x3fcc71c5
 8005ad0:	9997fa04 	.word	0x9997fa04
 8005ad4:	3fd99999 	.word	0x3fd99999
	...
 8005ae0:	c3500000 	.word	0xc3500000
 8005ae4:	43500000 	.word	0x43500000
 8005ae8:	7fefffff 	.word	0x7fefffff
 8005aec:	3ff00000 	.word	0x3ff00000
 8005af0:	3fe00000 	.word	0x3fe00000

08005af4 <abort>:
 8005af4:	b508      	push	{r3, lr}
 8005af6:	2006      	movs	r0, #6
 8005af8:	f000 fa7e 	bl	8005ff8 <raise>
 8005afc:	2001      	movs	r0, #1
 8005afe:	f7fb fc9a 	bl	8001436 <_exit>
	...

08005b04 <malloc>:
 8005b04:	4b02      	ldr	r3, [pc, #8]	@ (8005b10 <malloc+0xc>)
 8005b06:	4601      	mov	r1, r0
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	f000 b82d 	b.w	8005b68 <_malloc_r>
 8005b0e:	bf00      	nop
 8005b10:	20000018 	.word	0x20000018

08005b14 <free>:
 8005b14:	4b02      	ldr	r3, [pc, #8]	@ (8005b20 <free+0xc>)
 8005b16:	4601      	mov	r1, r0
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	f000 bb2b 	b.w	8006174 <_free_r>
 8005b1e:	bf00      	nop
 8005b20:	20000018 	.word	0x20000018

08005b24 <sbrk_aligned>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4e0f      	ldr	r6, [pc, #60]	@ (8005b64 <sbrk_aligned+0x40>)
 8005b28:	460c      	mov	r4, r1
 8005b2a:	6831      	ldr	r1, [r6, #0]
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	b911      	cbnz	r1, 8005b36 <sbrk_aligned+0x12>
 8005b30:	f000 fab2 	bl	8006098 <_sbrk_r>
 8005b34:	6030      	str	r0, [r6, #0]
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 faad 	bl	8006098 <_sbrk_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	d103      	bne.n	8005b4a <sbrk_aligned+0x26>
 8005b42:	f04f 34ff 	mov.w	r4, #4294967295
 8005b46:	4620      	mov	r0, r4
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
 8005b4a:	1cc4      	adds	r4, r0, #3
 8005b4c:	f024 0403 	bic.w	r4, r4, #3
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d0f8      	beq.n	8005b46 <sbrk_aligned+0x22>
 8005b54:	1a21      	subs	r1, r4, r0
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 fa9e 	bl	8006098 <_sbrk_r>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1f2      	bne.n	8005b46 <sbrk_aligned+0x22>
 8005b60:	e7ef      	b.n	8005b42 <sbrk_aligned+0x1e>
 8005b62:	bf00      	nop
 8005b64:	200000e8 	.word	0x200000e8

08005b68 <_malloc_r>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	1ccd      	adds	r5, r1, #3
 8005b6e:	f025 0503 	bic.w	r5, r5, #3
 8005b72:	3508      	adds	r5, #8
 8005b74:	2d0c      	cmp	r5, #12
 8005b76:	bf38      	it	cc
 8005b78:	250c      	movcc	r5, #12
 8005b7a:	2d00      	cmp	r5, #0
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	db01      	blt.n	8005b84 <_malloc_r+0x1c>
 8005b80:	42a9      	cmp	r1, r5
 8005b82:	d904      	bls.n	8005b8e <_malloc_r+0x26>
 8005b84:	230c      	movs	r3, #12
 8005b86:	6033      	str	r3, [r6, #0]
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c64 <_malloc_r+0xfc>
 8005b92:	f000 f869 	bl	8005c68 <__malloc_lock>
 8005b96:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	bb44      	cbnz	r4, 8005bf0 <_malloc_r+0x88>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff ffbf 	bl	8005b24 <sbrk_aligned>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	4604      	mov	r4, r0
 8005baa:	d158      	bne.n	8005c5e <_malloc_r+0xf6>
 8005bac:	f8d8 4000 	ldr.w	r4, [r8]
 8005bb0:	4627      	mov	r7, r4
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	d143      	bne.n	8005c3e <_malloc_r+0xd6>
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	d04b      	beq.n	8005c52 <_malloc_r+0xea>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	eb04 0903 	add.w	r9, r4, r3
 8005bc4:	f000 fa68 	bl	8006098 <_sbrk_r>
 8005bc8:	4581      	cmp	r9, r0
 8005bca:	d142      	bne.n	8005c52 <_malloc_r+0xea>
 8005bcc:	6821      	ldr	r1, [r4, #0]
 8005bce:	1a6d      	subs	r5, r5, r1
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ffa6 	bl	8005b24 <sbrk_aligned>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d03a      	beq.n	8005c52 <_malloc_r+0xea>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	442b      	add	r3, r5
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	f8d8 3000 	ldr.w	r3, [r8]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	bb62      	cbnz	r2, 8005c44 <_malloc_r+0xdc>
 8005bea:	f8c8 7000 	str.w	r7, [r8]
 8005bee:	e00f      	b.n	8005c10 <_malloc_r+0xa8>
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	1b52      	subs	r2, r2, r5
 8005bf4:	d420      	bmi.n	8005c38 <_malloc_r+0xd0>
 8005bf6:	2a0b      	cmp	r2, #11
 8005bf8:	d917      	bls.n	8005c2a <_malloc_r+0xc2>
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	6025      	str	r5, [r4, #0]
 8005c00:	bf18      	it	ne
 8005c02:	6059      	strne	r1, [r3, #4]
 8005c04:	6863      	ldr	r3, [r4, #4]
 8005c06:	bf08      	it	eq
 8005c08:	f8c8 1000 	streq.w	r1, [r8]
 8005c0c:	5162      	str	r2, [r4, r5]
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f82f 	bl	8005c74 <__malloc_unlock>
 8005c16:	f104 000b 	add.w	r0, r4, #11
 8005c1a:	1d23      	adds	r3, r4, #4
 8005c1c:	f020 0007 	bic.w	r0, r0, #7
 8005c20:	1ac2      	subs	r2, r0, r3
 8005c22:	bf1c      	itt	ne
 8005c24:	1a1b      	subne	r3, r3, r0
 8005c26:	50a3      	strne	r3, [r4, r2]
 8005c28:	e7af      	b.n	8005b8a <_malloc_r+0x22>
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	bf0c      	ite	eq
 8005c30:	f8c8 2000 	streq.w	r2, [r8]
 8005c34:	605a      	strne	r2, [r3, #4]
 8005c36:	e7eb      	b.n	8005c10 <_malloc_r+0xa8>
 8005c38:	4623      	mov	r3, r4
 8005c3a:	6864      	ldr	r4, [r4, #4]
 8005c3c:	e7ae      	b.n	8005b9c <_malloc_r+0x34>
 8005c3e:	463c      	mov	r4, r7
 8005c40:	687f      	ldr	r7, [r7, #4]
 8005c42:	e7b6      	b.n	8005bb2 <_malloc_r+0x4a>
 8005c44:	461a      	mov	r2, r3
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	d1fb      	bne.n	8005c44 <_malloc_r+0xdc>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6053      	str	r3, [r2, #4]
 8005c50:	e7de      	b.n	8005c10 <_malloc_r+0xa8>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	4630      	mov	r0, r6
 8005c58:	f000 f80c 	bl	8005c74 <__malloc_unlock>
 8005c5c:	e794      	b.n	8005b88 <_malloc_r+0x20>
 8005c5e:	6005      	str	r5, [r0, #0]
 8005c60:	e7d6      	b.n	8005c10 <_malloc_r+0xa8>
 8005c62:	bf00      	nop
 8005c64:	200000ec 	.word	0x200000ec

08005c68 <__malloc_lock>:
 8005c68:	4801      	ldr	r0, [pc, #4]	@ (8005c70 <__malloc_lock+0x8>)
 8005c6a:	f000 ba62 	b.w	8006132 <__retarget_lock_acquire_recursive>
 8005c6e:	bf00      	nop
 8005c70:	20000230 	.word	0x20000230

08005c74 <__malloc_unlock>:
 8005c74:	4801      	ldr	r0, [pc, #4]	@ (8005c7c <__malloc_unlock+0x8>)
 8005c76:	f000 ba5d 	b.w	8006134 <__retarget_lock_release_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	20000230 	.word	0x20000230

08005c80 <srand>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4b10      	ldr	r3, [pc, #64]	@ (8005cc4 <srand+0x44>)
 8005c84:	681d      	ldr	r5, [r3, #0]
 8005c86:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005c88:	4604      	mov	r4, r0
 8005c8a:	b9b3      	cbnz	r3, 8005cba <srand+0x3a>
 8005c8c:	2018      	movs	r0, #24
 8005c8e:	f7ff ff39 	bl	8005b04 <malloc>
 8005c92:	4602      	mov	r2, r0
 8005c94:	6328      	str	r0, [r5, #48]	@ 0x30
 8005c96:	b920      	cbnz	r0, 8005ca2 <srand+0x22>
 8005c98:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <srand+0x48>)
 8005c9a:	480c      	ldr	r0, [pc, #48]	@ (8005ccc <srand+0x4c>)
 8005c9c:	2146      	movs	r1, #70	@ 0x46
 8005c9e:	f000 fa4b 	bl	8006138 <__assert_func>
 8005ca2:	490b      	ldr	r1, [pc, #44]	@ (8005cd0 <srand+0x50>)
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd4 <srand+0x54>)
 8005ca6:	e9c0 1300 	strd	r1, r3, [r0]
 8005caa:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <srand+0x58>)
 8005cac:	6083      	str	r3, [r0, #8]
 8005cae:	230b      	movs	r3, #11
 8005cb0:	8183      	strh	r3, [r0, #12]
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005cba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	611c      	str	r4, [r3, #16]
 8005cc0:	615a      	str	r2, [r3, #20]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	20000018 	.word	0x20000018
 8005cc8:	08006c48 	.word	0x08006c48
 8005ccc:	08006c5f 	.word	0x08006c5f
 8005cd0:	abcd330e 	.word	0xabcd330e
 8005cd4:	e66d1234 	.word	0xe66d1234
 8005cd8:	0005deec 	.word	0x0005deec

08005cdc <rand>:
 8005cdc:	4b16      	ldr	r3, [pc, #88]	@ (8005d38 <rand+0x5c>)
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	681c      	ldr	r4, [r3, #0]
 8005ce2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005ce4:	b9b3      	cbnz	r3, 8005d14 <rand+0x38>
 8005ce6:	2018      	movs	r0, #24
 8005ce8:	f7ff ff0c 	bl	8005b04 <malloc>
 8005cec:	4602      	mov	r2, r0
 8005cee:	6320      	str	r0, [r4, #48]	@ 0x30
 8005cf0:	b920      	cbnz	r0, 8005cfc <rand+0x20>
 8005cf2:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <rand+0x60>)
 8005cf4:	4812      	ldr	r0, [pc, #72]	@ (8005d40 <rand+0x64>)
 8005cf6:	2152      	movs	r1, #82	@ 0x52
 8005cf8:	f000 fa1e 	bl	8006138 <__assert_func>
 8005cfc:	4911      	ldr	r1, [pc, #68]	@ (8005d44 <rand+0x68>)
 8005cfe:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <rand+0x6c>)
 8005d00:	e9c0 1300 	strd	r1, r3, [r0]
 8005d04:	4b11      	ldr	r3, [pc, #68]	@ (8005d4c <rand+0x70>)
 8005d06:	6083      	str	r3, [r0, #8]
 8005d08:	230b      	movs	r3, #11
 8005d0a:	8183      	strh	r3, [r0, #12]
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2001      	movs	r0, #1
 8005d10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d16:	480e      	ldr	r0, [pc, #56]	@ (8005d50 <rand+0x74>)
 8005d18:	690b      	ldr	r3, [r1, #16]
 8005d1a:	694c      	ldr	r4, [r1, #20]
 8005d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d54 <rand+0x78>)
 8005d1e:	4358      	muls	r0, r3
 8005d20:	fb02 0004 	mla	r0, r2, r4, r0
 8005d24:	fba3 3202 	umull	r3, r2, r3, r2
 8005d28:	3301      	adds	r3, #1
 8005d2a:	eb40 0002 	adc.w	r0, r0, r2
 8005d2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005d32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005d36:	bd10      	pop	{r4, pc}
 8005d38:	20000018 	.word	0x20000018
 8005d3c:	08006c48 	.word	0x08006c48
 8005d40:	08006c5f 	.word	0x08006c5f
 8005d44:	abcd330e 	.word	0xabcd330e
 8005d48:	e66d1234 	.word	0xe66d1234
 8005d4c:	0005deec 	.word	0x0005deec
 8005d50:	5851f42d 	.word	0x5851f42d
 8005d54:	4c957f2d 	.word	0x4c957f2d

08005d58 <std>:
 8005d58:	2300      	movs	r3, #0
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d66:	6083      	str	r3, [r0, #8]
 8005d68:	8181      	strh	r1, [r0, #12]
 8005d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d6c:	81c2      	strh	r2, [r0, #14]
 8005d6e:	6183      	str	r3, [r0, #24]
 8005d70:	4619      	mov	r1, r3
 8005d72:	2208      	movs	r2, #8
 8005d74:	305c      	adds	r0, #92	@ 0x5c
 8005d76:	f000 f90e 	bl	8005f96 <memset>
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <std+0x58>)
 8005d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <std+0x5c>)
 8005d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <std+0x60>)
 8005d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d86:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <std+0x64>)
 8005d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <std+0x68>)
 8005d8c:	6224      	str	r4, [r4, #32]
 8005d8e:	429c      	cmp	r4, r3
 8005d90:	d006      	beq.n	8005da0 <std+0x48>
 8005d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d96:	4294      	cmp	r4, r2
 8005d98:	d002      	beq.n	8005da0 <std+0x48>
 8005d9a:	33d0      	adds	r3, #208	@ 0xd0
 8005d9c:	429c      	cmp	r4, r3
 8005d9e:	d105      	bne.n	8005dac <std+0x54>
 8005da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da8:	f000 b9c2 	b.w	8006130 <__retarget_lock_init_recursive>
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	bf00      	nop
 8005db0:	08005edd 	.word	0x08005edd
 8005db4:	08005eff 	.word	0x08005eff
 8005db8:	08005f37 	.word	0x08005f37
 8005dbc:	08005f5b 	.word	0x08005f5b
 8005dc0:	200000f0 	.word	0x200000f0

08005dc4 <stdio_exit_handler>:
 8005dc4:	4a02      	ldr	r2, [pc, #8]	@ (8005dd0 <stdio_exit_handler+0xc>)
 8005dc6:	4903      	ldr	r1, [pc, #12]	@ (8005dd4 <stdio_exit_handler+0x10>)
 8005dc8:	4803      	ldr	r0, [pc, #12]	@ (8005dd8 <stdio_exit_handler+0x14>)
 8005dca:	f000 b869 	b.w	8005ea0 <_fwalk_sglue>
 8005dce:	bf00      	nop
 8005dd0:	2000000c 	.word	0x2000000c
 8005dd4:	08006311 	.word	0x08006311
 8005dd8:	2000001c 	.word	0x2000001c

08005ddc <cleanup_stdio>:
 8005ddc:	6841      	ldr	r1, [r0, #4]
 8005dde:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <cleanup_stdio+0x34>)
 8005de0:	4299      	cmp	r1, r3
 8005de2:	b510      	push	{r4, lr}
 8005de4:	4604      	mov	r4, r0
 8005de6:	d001      	beq.n	8005dec <cleanup_stdio+0x10>
 8005de8:	f000 fa92 	bl	8006310 <_fflush_r>
 8005dec:	68a1      	ldr	r1, [r4, #8]
 8005dee:	4b09      	ldr	r3, [pc, #36]	@ (8005e14 <cleanup_stdio+0x38>)
 8005df0:	4299      	cmp	r1, r3
 8005df2:	d002      	beq.n	8005dfa <cleanup_stdio+0x1e>
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 fa8b 	bl	8006310 <_fflush_r>
 8005dfa:	68e1      	ldr	r1, [r4, #12]
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <cleanup_stdio+0x3c>)
 8005dfe:	4299      	cmp	r1, r3
 8005e00:	d004      	beq.n	8005e0c <cleanup_stdio+0x30>
 8005e02:	4620      	mov	r0, r4
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f000 ba82 	b.w	8006310 <_fflush_r>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	bf00      	nop
 8005e10:	200000f0 	.word	0x200000f0
 8005e14:	20000158 	.word	0x20000158
 8005e18:	200001c0 	.word	0x200001c0

08005e1c <global_stdio_init.part.0>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <global_stdio_init.part.0+0x30>)
 8005e20:	4c0b      	ldr	r4, [pc, #44]	@ (8005e50 <global_stdio_init.part.0+0x34>)
 8005e22:	4a0c      	ldr	r2, [pc, #48]	@ (8005e54 <global_stdio_init.part.0+0x38>)
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	4620      	mov	r0, r4
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	f7ff ff94 	bl	8005d58 <std>
 8005e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e34:	2201      	movs	r2, #1
 8005e36:	2109      	movs	r1, #9
 8005e38:	f7ff ff8e 	bl	8005d58 <std>
 8005e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e40:	2202      	movs	r2, #2
 8005e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e46:	2112      	movs	r1, #18
 8005e48:	f7ff bf86 	b.w	8005d58 <std>
 8005e4c:	20000228 	.word	0x20000228
 8005e50:	200000f0 	.word	0x200000f0
 8005e54:	08005dc5 	.word	0x08005dc5

08005e58 <__sfp_lock_acquire>:
 8005e58:	4801      	ldr	r0, [pc, #4]	@ (8005e60 <__sfp_lock_acquire+0x8>)
 8005e5a:	f000 b96a 	b.w	8006132 <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20000231 	.word	0x20000231

08005e64 <__sfp_lock_release>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__sfp_lock_release+0x8>)
 8005e66:	f000 b965 	b.w	8006134 <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20000231 	.word	0x20000231

08005e70 <__sinit>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4604      	mov	r4, r0
 8005e74:	f7ff fff0 	bl	8005e58 <__sfp_lock_acquire>
 8005e78:	6a23      	ldr	r3, [r4, #32]
 8005e7a:	b11b      	cbz	r3, 8005e84 <__sinit+0x14>
 8005e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e80:	f7ff bff0 	b.w	8005e64 <__sfp_lock_release>
 8005e84:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <__sinit+0x28>)
 8005e86:	6223      	str	r3, [r4, #32]
 8005e88:	4b04      	ldr	r3, [pc, #16]	@ (8005e9c <__sinit+0x2c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f5      	bne.n	8005e7c <__sinit+0xc>
 8005e90:	f7ff ffc4 	bl	8005e1c <global_stdio_init.part.0>
 8005e94:	e7f2      	b.n	8005e7c <__sinit+0xc>
 8005e96:	bf00      	nop
 8005e98:	08005ddd 	.word	0x08005ddd
 8005e9c:	20000228 	.word	0x20000228

08005ea0 <_fwalk_sglue>:
 8005ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	4688      	mov	r8, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	2600      	movs	r6, #0
 8005eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb4:	d505      	bpl.n	8005ec2 <_fwalk_sglue+0x22>
 8005eb6:	6824      	ldr	r4, [r4, #0]
 8005eb8:	2c00      	cmp	r4, #0
 8005eba:	d1f7      	bne.n	8005eac <_fwalk_sglue+0xc>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec2:	89ab      	ldrh	r3, [r5, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d907      	bls.n	8005ed8 <_fwalk_sglue+0x38>
 8005ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	d003      	beq.n	8005ed8 <_fwalk_sglue+0x38>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c0      	blx	r8
 8005ed6:	4306      	orrs	r6, r0
 8005ed8:	3568      	adds	r5, #104	@ 0x68
 8005eda:	e7e9      	b.n	8005eb0 <_fwalk_sglue+0x10>

08005edc <__sread>:
 8005edc:	b510      	push	{r4, lr}
 8005ede:	460c      	mov	r4, r1
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	f000 f8b2 	bl	800604c <_read_r>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	bfab      	itete	ge
 8005eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005eee:	89a3      	ldrhlt	r3, [r4, #12]
 8005ef0:	181b      	addge	r3, r3, r0
 8005ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ef6:	bfac      	ite	ge
 8005ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005efa:	81a3      	strhlt	r3, [r4, #12]
 8005efc:	bd10      	pop	{r4, pc}

08005efe <__swrite>:
 8005efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f02:	461f      	mov	r7, r3
 8005f04:	898b      	ldrh	r3, [r1, #12]
 8005f06:	05db      	lsls	r3, r3, #23
 8005f08:	4605      	mov	r5, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	d505      	bpl.n	8005f1c <__swrite+0x1e>
 8005f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f14:	2302      	movs	r3, #2
 8005f16:	2200      	movs	r2, #0
 8005f18:	f000 f886 	bl	8006028 <_lseek_r>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f32:	f000 b8c1 	b.w	80060b8 <_write_r>

08005f36 <__sseek>:
 8005f36:	b510      	push	{r4, lr}
 8005f38:	460c      	mov	r4, r1
 8005f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3e:	f000 f873 	bl	8006028 <_lseek_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	bf15      	itete	ne
 8005f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f52:	81a3      	strheq	r3, [r4, #12]
 8005f54:	bf18      	it	ne
 8005f56:	81a3      	strhne	r3, [r4, #12]
 8005f58:	bd10      	pop	{r4, pc}

08005f5a <__sclose>:
 8005f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f5e:	f000 b853 	b.w	8006008 <_close_r>

08005f62 <memmove>:
 8005f62:	4288      	cmp	r0, r1
 8005f64:	b510      	push	{r4, lr}
 8005f66:	eb01 0402 	add.w	r4, r1, r2
 8005f6a:	d902      	bls.n	8005f72 <memmove+0x10>
 8005f6c:	4284      	cmp	r4, r0
 8005f6e:	4623      	mov	r3, r4
 8005f70:	d807      	bhi.n	8005f82 <memmove+0x20>
 8005f72:	1e43      	subs	r3, r0, #1
 8005f74:	42a1      	cmp	r1, r4
 8005f76:	d008      	beq.n	8005f8a <memmove+0x28>
 8005f78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f80:	e7f8      	b.n	8005f74 <memmove+0x12>
 8005f82:	4402      	add	r2, r0
 8005f84:	4601      	mov	r1, r0
 8005f86:	428a      	cmp	r2, r1
 8005f88:	d100      	bne.n	8005f8c <memmove+0x2a>
 8005f8a:	bd10      	pop	{r4, pc}
 8005f8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f94:	e7f7      	b.n	8005f86 <memmove+0x24>

08005f96 <memset>:
 8005f96:	4402      	add	r2, r0
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d100      	bne.n	8005fa0 <memset+0xa>
 8005f9e:	4770      	bx	lr
 8005fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa4:	e7f9      	b.n	8005f9a <memset+0x4>

08005fa6 <_raise_r>:
 8005fa6:	291f      	cmp	r1, #31
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4605      	mov	r5, r0
 8005fac:	460c      	mov	r4, r1
 8005fae:	d904      	bls.n	8005fba <_raise_r+0x14>
 8005fb0:	2316      	movs	r3, #22
 8005fb2:	6003      	str	r3, [r0, #0]
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	bd38      	pop	{r3, r4, r5, pc}
 8005fba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005fbc:	b112      	cbz	r2, 8005fc4 <_raise_r+0x1e>
 8005fbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fc2:	b94b      	cbnz	r3, 8005fd8 <_raise_r+0x32>
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f865 	bl	8006094 <_getpid_r>
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4601      	mov	r1, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd4:	f000 b84c 	b.w	8006070 <_kill_r>
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d00a      	beq.n	8005ff2 <_raise_r+0x4c>
 8005fdc:	1c59      	adds	r1, r3, #1
 8005fde:	d103      	bne.n	8005fe8 <_raise_r+0x42>
 8005fe0:	2316      	movs	r3, #22
 8005fe2:	6003      	str	r3, [r0, #0]
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	e7e7      	b.n	8005fb8 <_raise_r+0x12>
 8005fe8:	2100      	movs	r1, #0
 8005fea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4798      	blx	r3
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	e7e0      	b.n	8005fb8 <_raise_r+0x12>
	...

08005ff8 <raise>:
 8005ff8:	4b02      	ldr	r3, [pc, #8]	@ (8006004 <raise+0xc>)
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f7ff bfd2 	b.w	8005fa6 <_raise_r>
 8006002:	bf00      	nop
 8006004:	20000018 	.word	0x20000018

08006008 <_close_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	@ (8006024 <_close_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fb fa53 	bl	80014be <_close>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_close_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_close_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	2000022c 	.word	0x2000022c

08006028 <_lseek_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	@ (8006048 <_lseek_r+0x20>)
 800602c:	4604      	mov	r4, r0
 800602e:	4608      	mov	r0, r1
 8006030:	4611      	mov	r1, r2
 8006032:	2200      	movs	r2, #0
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fb fa68 	bl	800150c <_lseek>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_lseek_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_lseek_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	2000022c 	.word	0x2000022c

0800604c <_read_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	@ (800606c <_read_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fb f9f6 	bl	800144c <_read>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_read_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_read_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	2000022c 	.word	0x2000022c

08006070 <_kill_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	@ (8006090 <_kill_r+0x20>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	4611      	mov	r1, r2
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	f7fb f9ca 	bl	8001416 <_kill>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d102      	bne.n	800608c <_kill_r+0x1c>
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	b103      	cbz	r3, 800608c <_kill_r+0x1c>
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	bd38      	pop	{r3, r4, r5, pc}
 800608e:	bf00      	nop
 8006090:	2000022c 	.word	0x2000022c

08006094 <_getpid_r>:
 8006094:	f7fb b9b7 	b.w	8001406 <_getpid>

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	@ (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fb fa40 	bl	8001528 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	2000022c 	.word	0x2000022c

080060b8 <_write_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d07      	ldr	r5, [pc, #28]	@ (80060d8 <_write_r+0x20>)
 80060bc:	4604      	mov	r4, r0
 80060be:	4608      	mov	r0, r1
 80060c0:	4611      	mov	r1, r2
 80060c2:	2200      	movs	r2, #0
 80060c4:	602a      	str	r2, [r5, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f7fb f9dd 	bl	8001486 <_write>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_write_r+0x1e>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_write_r+0x1e>
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	2000022c 	.word	0x2000022c

080060dc <__errno>:
 80060dc:	4b01      	ldr	r3, [pc, #4]	@ (80060e4 <__errno+0x8>)
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000018 	.word	0x20000018

080060e8 <__libc_init_array>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006120 <__libc_init_array+0x38>)
 80060ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006124 <__libc_init_array+0x3c>)
 80060ee:	1b64      	subs	r4, r4, r5
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	2600      	movs	r6, #0
 80060f4:	42a6      	cmp	r6, r4
 80060f6:	d109      	bne.n	800610c <__libc_init_array+0x24>
 80060f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006128 <__libc_init_array+0x40>)
 80060fa:	4c0c      	ldr	r4, [pc, #48]	@ (800612c <__libc_init_array+0x44>)
 80060fc:	f000 fd2a 	bl	8006b54 <_init>
 8006100:	1b64      	subs	r4, r4, r5
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	2600      	movs	r6, #0
 8006106:	42a6      	cmp	r6, r4
 8006108:	d105      	bne.n	8006116 <__libc_init_array+0x2e>
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006110:	4798      	blx	r3
 8006112:	3601      	adds	r6, #1
 8006114:	e7ee      	b.n	80060f4 <__libc_init_array+0xc>
 8006116:	f855 3b04 	ldr.w	r3, [r5], #4
 800611a:	4798      	blx	r3
 800611c:	3601      	adds	r6, #1
 800611e:	e7f2      	b.n	8006106 <__libc_init_array+0x1e>
 8006120:	08006d30 	.word	0x08006d30
 8006124:	08006d30 	.word	0x08006d30
 8006128:	08006d30 	.word	0x08006d30
 800612c:	08006d34 	.word	0x08006d34

08006130 <__retarget_lock_init_recursive>:
 8006130:	4770      	bx	lr

08006132 <__retarget_lock_acquire_recursive>:
 8006132:	4770      	bx	lr

08006134 <__retarget_lock_release_recursive>:
 8006134:	4770      	bx	lr
	...

08006138 <__assert_func>:
 8006138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800613a:	4614      	mov	r4, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <__assert_func+0x2c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4605      	mov	r5, r0
 8006144:	68d8      	ldr	r0, [r3, #12]
 8006146:	b954      	cbnz	r4, 800615e <__assert_func+0x26>
 8006148:	4b07      	ldr	r3, [pc, #28]	@ (8006168 <__assert_func+0x30>)
 800614a:	461c      	mov	r4, r3
 800614c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006150:	9100      	str	r1, [sp, #0]
 8006152:	462b      	mov	r3, r5
 8006154:	4905      	ldr	r1, [pc, #20]	@ (800616c <__assert_func+0x34>)
 8006156:	f000 f903 	bl	8006360 <fiprintf>
 800615a:	f7ff fccb 	bl	8005af4 <abort>
 800615e:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <__assert_func+0x38>)
 8006160:	e7f4      	b.n	800614c <__assert_func+0x14>
 8006162:	bf00      	nop
 8006164:	20000018 	.word	0x20000018
 8006168:	08006cf2 	.word	0x08006cf2
 800616c:	08006cc4 	.word	0x08006cc4
 8006170:	08006cb7 	.word	0x08006cb7

08006174 <_free_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4605      	mov	r5, r0
 8006178:	2900      	cmp	r1, #0
 800617a:	d041      	beq.n	8006200 <_free_r+0x8c>
 800617c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006180:	1f0c      	subs	r4, r1, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	bfb8      	it	lt
 8006186:	18e4      	addlt	r4, r4, r3
 8006188:	f7ff fd6e 	bl	8005c68 <__malloc_lock>
 800618c:	4a1d      	ldr	r2, [pc, #116]	@ (8006204 <_free_r+0x90>)
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	b933      	cbnz	r3, 80061a0 <_free_r+0x2c>
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	6014      	str	r4, [r2, #0]
 8006196:	4628      	mov	r0, r5
 8006198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800619c:	f7ff bd6a 	b.w	8005c74 <__malloc_unlock>
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d908      	bls.n	80061b6 <_free_r+0x42>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	1821      	adds	r1, r4, r0
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf01      	itttt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	1809      	addeq	r1, r1, r0
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	e7ed      	b.n	8006192 <_free_r+0x1e>
 80061b6:	461a      	mov	r2, r3
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b10b      	cbz	r3, 80061c0 <_free_r+0x4c>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d9fa      	bls.n	80061b6 <_free_r+0x42>
 80061c0:	6811      	ldr	r1, [r2, #0]
 80061c2:	1850      	adds	r0, r2, r1
 80061c4:	42a0      	cmp	r0, r4
 80061c6:	d10b      	bne.n	80061e0 <_free_r+0x6c>
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	4401      	add	r1, r0
 80061cc:	1850      	adds	r0, r2, r1
 80061ce:	4283      	cmp	r3, r0
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	d1e0      	bne.n	8006196 <_free_r+0x22>
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	6053      	str	r3, [r2, #4]
 80061da:	4408      	add	r0, r1
 80061dc:	6010      	str	r0, [r2, #0]
 80061de:	e7da      	b.n	8006196 <_free_r+0x22>
 80061e0:	d902      	bls.n	80061e8 <_free_r+0x74>
 80061e2:	230c      	movs	r3, #12
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	e7d6      	b.n	8006196 <_free_r+0x22>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf04      	itt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	bf04      	itt	eq
 80061f8:	1809      	addeq	r1, r1, r0
 80061fa:	6021      	streq	r1, [r4, #0]
 80061fc:	6054      	str	r4, [r2, #4]
 80061fe:	e7ca      	b.n	8006196 <_free_r+0x22>
 8006200:	bd38      	pop	{r3, r4, r5, pc}
 8006202:	bf00      	nop
 8006204:	200000ec 	.word	0x200000ec

08006208 <__sflush_r>:
 8006208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	0716      	lsls	r6, r2, #28
 8006212:	4605      	mov	r5, r0
 8006214:	460c      	mov	r4, r1
 8006216:	d454      	bmi.n	80062c2 <__sflush_r+0xba>
 8006218:	684b      	ldr	r3, [r1, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	dc02      	bgt.n	8006224 <__sflush_r+0x1c>
 800621e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	dd48      	ble.n	80062b6 <__sflush_r+0xae>
 8006224:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006226:	2e00      	cmp	r6, #0
 8006228:	d045      	beq.n	80062b6 <__sflush_r+0xae>
 800622a:	2300      	movs	r3, #0
 800622c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006230:	682f      	ldr	r7, [r5, #0]
 8006232:	6a21      	ldr	r1, [r4, #32]
 8006234:	602b      	str	r3, [r5, #0]
 8006236:	d030      	beq.n	800629a <__sflush_r+0x92>
 8006238:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	0759      	lsls	r1, r3, #29
 800623e:	d505      	bpl.n	800624c <__sflush_r+0x44>
 8006240:	6863      	ldr	r3, [r4, #4]
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006246:	b10b      	cbz	r3, 800624c <__sflush_r+0x44>
 8006248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800624a:	1ad2      	subs	r2, r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006250:	6a21      	ldr	r1, [r4, #32]
 8006252:	4628      	mov	r0, r5
 8006254:	47b0      	blx	r6
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	d106      	bne.n	800626a <__sflush_r+0x62>
 800625c:	6829      	ldr	r1, [r5, #0]
 800625e:	291d      	cmp	r1, #29
 8006260:	d82b      	bhi.n	80062ba <__sflush_r+0xb2>
 8006262:	4a2a      	ldr	r2, [pc, #168]	@ (800630c <__sflush_r+0x104>)
 8006264:	410a      	asrs	r2, r1
 8006266:	07d6      	lsls	r6, r2, #31
 8006268:	d427      	bmi.n	80062ba <__sflush_r+0xb2>
 800626a:	2200      	movs	r2, #0
 800626c:	6062      	str	r2, [r4, #4]
 800626e:	04d9      	lsls	r1, r3, #19
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	d504      	bpl.n	8006280 <__sflush_r+0x78>
 8006276:	1c42      	adds	r2, r0, #1
 8006278:	d101      	bne.n	800627e <__sflush_r+0x76>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	b903      	cbnz	r3, 8006280 <__sflush_r+0x78>
 800627e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006282:	602f      	str	r7, [r5, #0]
 8006284:	b1b9      	cbz	r1, 80062b6 <__sflush_r+0xae>
 8006286:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800628a:	4299      	cmp	r1, r3
 800628c:	d002      	beq.n	8006294 <__sflush_r+0x8c>
 800628e:	4628      	mov	r0, r5
 8006290:	f7ff ff70 	bl	8006174 <_free_r>
 8006294:	2300      	movs	r3, #0
 8006296:	6363      	str	r3, [r4, #52]	@ 0x34
 8006298:	e00d      	b.n	80062b6 <__sflush_r+0xae>
 800629a:	2301      	movs	r3, #1
 800629c:	4628      	mov	r0, r5
 800629e:	47b0      	blx	r6
 80062a0:	4602      	mov	r2, r0
 80062a2:	1c50      	adds	r0, r2, #1
 80062a4:	d1c9      	bne.n	800623a <__sflush_r+0x32>
 80062a6:	682b      	ldr	r3, [r5, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0c6      	beq.n	800623a <__sflush_r+0x32>
 80062ac:	2b1d      	cmp	r3, #29
 80062ae:	d001      	beq.n	80062b4 <__sflush_r+0xac>
 80062b0:	2b16      	cmp	r3, #22
 80062b2:	d11e      	bne.n	80062f2 <__sflush_r+0xea>
 80062b4:	602f      	str	r7, [r5, #0]
 80062b6:	2000      	movs	r0, #0
 80062b8:	e022      	b.n	8006300 <__sflush_r+0xf8>
 80062ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062be:	b21b      	sxth	r3, r3
 80062c0:	e01b      	b.n	80062fa <__sflush_r+0xf2>
 80062c2:	690f      	ldr	r7, [r1, #16]
 80062c4:	2f00      	cmp	r7, #0
 80062c6:	d0f6      	beq.n	80062b6 <__sflush_r+0xae>
 80062c8:	0793      	lsls	r3, r2, #30
 80062ca:	680e      	ldr	r6, [r1, #0]
 80062cc:	bf08      	it	eq
 80062ce:	694b      	ldreq	r3, [r1, #20]
 80062d0:	600f      	str	r7, [r1, #0]
 80062d2:	bf18      	it	ne
 80062d4:	2300      	movne	r3, #0
 80062d6:	eba6 0807 	sub.w	r8, r6, r7
 80062da:	608b      	str	r3, [r1, #8]
 80062dc:	f1b8 0f00 	cmp.w	r8, #0
 80062e0:	dde9      	ble.n	80062b6 <__sflush_r+0xae>
 80062e2:	6a21      	ldr	r1, [r4, #32]
 80062e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062e6:	4643      	mov	r3, r8
 80062e8:	463a      	mov	r2, r7
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b0      	blx	r6
 80062ee:	2800      	cmp	r0, #0
 80062f0:	dc08      	bgt.n	8006304 <__sflush_r+0xfc>
 80062f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006304:	4407      	add	r7, r0
 8006306:	eba8 0800 	sub.w	r8, r8, r0
 800630a:	e7e7      	b.n	80062dc <__sflush_r+0xd4>
 800630c:	dfbffffe 	.word	0xdfbffffe

08006310 <_fflush_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	690b      	ldr	r3, [r1, #16]
 8006314:	4605      	mov	r5, r0
 8006316:	460c      	mov	r4, r1
 8006318:	b913      	cbnz	r3, 8006320 <_fflush_r+0x10>
 800631a:	2500      	movs	r5, #0
 800631c:	4628      	mov	r0, r5
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	b118      	cbz	r0, 800632a <_fflush_r+0x1a>
 8006322:	6a03      	ldr	r3, [r0, #32]
 8006324:	b90b      	cbnz	r3, 800632a <_fflush_r+0x1a>
 8006326:	f7ff fda3 	bl	8005e70 <__sinit>
 800632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f3      	beq.n	800631a <_fflush_r+0xa>
 8006332:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006334:	07d0      	lsls	r0, r2, #31
 8006336:	d404      	bmi.n	8006342 <_fflush_r+0x32>
 8006338:	0599      	lsls	r1, r3, #22
 800633a:	d402      	bmi.n	8006342 <_fflush_r+0x32>
 800633c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800633e:	f7ff fef8 	bl	8006132 <__retarget_lock_acquire_recursive>
 8006342:	4628      	mov	r0, r5
 8006344:	4621      	mov	r1, r4
 8006346:	f7ff ff5f 	bl	8006208 <__sflush_r>
 800634a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800634c:	07da      	lsls	r2, r3, #31
 800634e:	4605      	mov	r5, r0
 8006350:	d4e4      	bmi.n	800631c <_fflush_r+0xc>
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	059b      	lsls	r3, r3, #22
 8006356:	d4e1      	bmi.n	800631c <_fflush_r+0xc>
 8006358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800635a:	f7ff feeb 	bl	8006134 <__retarget_lock_release_recursive>
 800635e:	e7dd      	b.n	800631c <_fflush_r+0xc>

08006360 <fiprintf>:
 8006360:	b40e      	push	{r1, r2, r3}
 8006362:	b503      	push	{r0, r1, lr}
 8006364:	4601      	mov	r1, r0
 8006366:	ab03      	add	r3, sp, #12
 8006368:	4805      	ldr	r0, [pc, #20]	@ (8006380 <fiprintf+0x20>)
 800636a:	f853 2b04 	ldr.w	r2, [r3], #4
 800636e:	6800      	ldr	r0, [r0, #0]
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	f000 f831 	bl	80063d8 <_vfiprintf_r>
 8006376:	b002      	add	sp, #8
 8006378:	f85d eb04 	ldr.w	lr, [sp], #4
 800637c:	b003      	add	sp, #12
 800637e:	4770      	bx	lr
 8006380:	20000018 	.word	0x20000018

08006384 <__sfputc_r>:
 8006384:	6893      	ldr	r3, [r2, #8]
 8006386:	3b01      	subs	r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	b410      	push	{r4}
 800638c:	6093      	str	r3, [r2, #8]
 800638e:	da08      	bge.n	80063a2 <__sfputc_r+0x1e>
 8006390:	6994      	ldr	r4, [r2, #24]
 8006392:	42a3      	cmp	r3, r4
 8006394:	db01      	blt.n	800639a <__sfputc_r+0x16>
 8006396:	290a      	cmp	r1, #10
 8006398:	d103      	bne.n	80063a2 <__sfputc_r+0x1e>
 800639a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800639e:	f000 bac1 	b.w	8006924 <__swbuf_r>
 80063a2:	6813      	ldr	r3, [r2, #0]
 80063a4:	1c58      	adds	r0, r3, #1
 80063a6:	6010      	str	r0, [r2, #0]
 80063a8:	7019      	strb	r1, [r3, #0]
 80063aa:	4608      	mov	r0, r1
 80063ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <__sfputs_r>:
 80063b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b4:	4606      	mov	r6, r0
 80063b6:	460f      	mov	r7, r1
 80063b8:	4614      	mov	r4, r2
 80063ba:	18d5      	adds	r5, r2, r3
 80063bc:	42ac      	cmp	r4, r5
 80063be:	d101      	bne.n	80063c4 <__sfputs_r+0x12>
 80063c0:	2000      	movs	r0, #0
 80063c2:	e007      	b.n	80063d4 <__sfputs_r+0x22>
 80063c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c8:	463a      	mov	r2, r7
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ffda 	bl	8006384 <__sfputc_r>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d1f3      	bne.n	80063bc <__sfputs_r+0xa>
 80063d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063d8 <_vfiprintf_r>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	460d      	mov	r5, r1
 80063de:	b09d      	sub	sp, #116	@ 0x74
 80063e0:	4614      	mov	r4, r2
 80063e2:	4698      	mov	r8, r3
 80063e4:	4606      	mov	r6, r0
 80063e6:	b118      	cbz	r0, 80063f0 <_vfiprintf_r+0x18>
 80063e8:	6a03      	ldr	r3, [r0, #32]
 80063ea:	b90b      	cbnz	r3, 80063f0 <_vfiprintf_r+0x18>
 80063ec:	f7ff fd40 	bl	8005e70 <__sinit>
 80063f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063f2:	07d9      	lsls	r1, r3, #31
 80063f4:	d405      	bmi.n	8006402 <_vfiprintf_r+0x2a>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	059a      	lsls	r2, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_vfiprintf_r+0x2a>
 80063fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063fe:	f7ff fe98 	bl	8006132 <__retarget_lock_acquire_recursive>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	071b      	lsls	r3, r3, #28
 8006406:	d501      	bpl.n	800640c <_vfiprintf_r+0x34>
 8006408:	692b      	ldr	r3, [r5, #16]
 800640a:	b99b      	cbnz	r3, 8006434 <_vfiprintf_r+0x5c>
 800640c:	4629      	mov	r1, r5
 800640e:	4630      	mov	r0, r6
 8006410:	f000 fac6 	bl	80069a0 <__swsetup_r>
 8006414:	b170      	cbz	r0, 8006434 <_vfiprintf_r+0x5c>
 8006416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006418:	07dc      	lsls	r4, r3, #31
 800641a:	d504      	bpl.n	8006426 <_vfiprintf_r+0x4e>
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	b01d      	add	sp, #116	@ 0x74
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	0598      	lsls	r0, r3, #22
 800642a:	d4f7      	bmi.n	800641c <_vfiprintf_r+0x44>
 800642c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800642e:	f7ff fe81 	bl	8006134 <__retarget_lock_release_recursive>
 8006432:	e7f3      	b.n	800641c <_vfiprintf_r+0x44>
 8006434:	2300      	movs	r3, #0
 8006436:	9309      	str	r3, [sp, #36]	@ 0x24
 8006438:	2320      	movs	r3, #32
 800643a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800643e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006442:	2330      	movs	r3, #48	@ 0x30
 8006444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065f4 <_vfiprintf_r+0x21c>
 8006448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800644c:	f04f 0901 	mov.w	r9, #1
 8006450:	4623      	mov	r3, r4
 8006452:	469a      	mov	sl, r3
 8006454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006458:	b10a      	cbz	r2, 800645e <_vfiprintf_r+0x86>
 800645a:	2a25      	cmp	r2, #37	@ 0x25
 800645c:	d1f9      	bne.n	8006452 <_vfiprintf_r+0x7a>
 800645e:	ebba 0b04 	subs.w	fp, sl, r4
 8006462:	d00b      	beq.n	800647c <_vfiprintf_r+0xa4>
 8006464:	465b      	mov	r3, fp
 8006466:	4622      	mov	r2, r4
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff ffa1 	bl	80063b2 <__sfputs_r>
 8006470:	3001      	adds	r0, #1
 8006472:	f000 80a7 	beq.w	80065c4 <_vfiprintf_r+0x1ec>
 8006476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006478:	445a      	add	r2, fp
 800647a:	9209      	str	r2, [sp, #36]	@ 0x24
 800647c:	f89a 3000 	ldrb.w	r3, [sl]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 809f 	beq.w	80065c4 <_vfiprintf_r+0x1ec>
 8006486:	2300      	movs	r3, #0
 8006488:	f04f 32ff 	mov.w	r2, #4294967295
 800648c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006490:	f10a 0a01 	add.w	sl, sl, #1
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	9307      	str	r3, [sp, #28]
 8006498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800649c:	931a      	str	r3, [sp, #104]	@ 0x68
 800649e:	4654      	mov	r4, sl
 80064a0:	2205      	movs	r2, #5
 80064a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a6:	4853      	ldr	r0, [pc, #332]	@ (80065f4 <_vfiprintf_r+0x21c>)
 80064a8:	f7f9 fe92 	bl	80001d0 <memchr>
 80064ac:	9a04      	ldr	r2, [sp, #16]
 80064ae:	b9d8      	cbnz	r0, 80064e8 <_vfiprintf_r+0x110>
 80064b0:	06d1      	lsls	r1, r2, #27
 80064b2:	bf44      	itt	mi
 80064b4:	2320      	movmi	r3, #32
 80064b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ba:	0713      	lsls	r3, r2, #28
 80064bc:	bf44      	itt	mi
 80064be:	232b      	movmi	r3, #43	@ 0x2b
 80064c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064c4:	f89a 3000 	ldrb.w	r3, [sl]
 80064c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ca:	d015      	beq.n	80064f8 <_vfiprintf_r+0x120>
 80064cc:	9a07      	ldr	r2, [sp, #28]
 80064ce:	4654      	mov	r4, sl
 80064d0:	2000      	movs	r0, #0
 80064d2:	f04f 0c0a 	mov.w	ip, #10
 80064d6:	4621      	mov	r1, r4
 80064d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064dc:	3b30      	subs	r3, #48	@ 0x30
 80064de:	2b09      	cmp	r3, #9
 80064e0:	d94b      	bls.n	800657a <_vfiprintf_r+0x1a2>
 80064e2:	b1b0      	cbz	r0, 8006512 <_vfiprintf_r+0x13a>
 80064e4:	9207      	str	r2, [sp, #28]
 80064e6:	e014      	b.n	8006512 <_vfiprintf_r+0x13a>
 80064e8:	eba0 0308 	sub.w	r3, r0, r8
 80064ec:	fa09 f303 	lsl.w	r3, r9, r3
 80064f0:	4313      	orrs	r3, r2
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	46a2      	mov	sl, r4
 80064f6:	e7d2      	b.n	800649e <_vfiprintf_r+0xc6>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	1d19      	adds	r1, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9103      	str	r1, [sp, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	bfbb      	ittet	lt
 8006504:	425b      	neglt	r3, r3
 8006506:	f042 0202 	orrlt.w	r2, r2, #2
 800650a:	9307      	strge	r3, [sp, #28]
 800650c:	9307      	strlt	r3, [sp, #28]
 800650e:	bfb8      	it	lt
 8006510:	9204      	strlt	r2, [sp, #16]
 8006512:	7823      	ldrb	r3, [r4, #0]
 8006514:	2b2e      	cmp	r3, #46	@ 0x2e
 8006516:	d10a      	bne.n	800652e <_vfiprintf_r+0x156>
 8006518:	7863      	ldrb	r3, [r4, #1]
 800651a:	2b2a      	cmp	r3, #42	@ 0x2a
 800651c:	d132      	bne.n	8006584 <_vfiprintf_r+0x1ac>
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	1d1a      	adds	r2, r3, #4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	9203      	str	r2, [sp, #12]
 8006526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800652a:	3402      	adds	r4, #2
 800652c:	9305      	str	r3, [sp, #20]
 800652e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006604 <_vfiprintf_r+0x22c>
 8006532:	7821      	ldrb	r1, [r4, #0]
 8006534:	2203      	movs	r2, #3
 8006536:	4650      	mov	r0, sl
 8006538:	f7f9 fe4a 	bl	80001d0 <memchr>
 800653c:	b138      	cbz	r0, 800654e <_vfiprintf_r+0x176>
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	eba0 000a 	sub.w	r0, r0, sl
 8006544:	2240      	movs	r2, #64	@ 0x40
 8006546:	4082      	lsls	r2, r0
 8006548:	4313      	orrs	r3, r2
 800654a:	3401      	adds	r4, #1
 800654c:	9304      	str	r3, [sp, #16]
 800654e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006552:	4829      	ldr	r0, [pc, #164]	@ (80065f8 <_vfiprintf_r+0x220>)
 8006554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006558:	2206      	movs	r2, #6
 800655a:	f7f9 fe39 	bl	80001d0 <memchr>
 800655e:	2800      	cmp	r0, #0
 8006560:	d03f      	beq.n	80065e2 <_vfiprintf_r+0x20a>
 8006562:	4b26      	ldr	r3, [pc, #152]	@ (80065fc <_vfiprintf_r+0x224>)
 8006564:	bb1b      	cbnz	r3, 80065ae <_vfiprintf_r+0x1d6>
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	3307      	adds	r3, #7
 800656a:	f023 0307 	bic.w	r3, r3, #7
 800656e:	3308      	adds	r3, #8
 8006570:	9303      	str	r3, [sp, #12]
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	443b      	add	r3, r7
 8006576:	9309      	str	r3, [sp, #36]	@ 0x24
 8006578:	e76a      	b.n	8006450 <_vfiprintf_r+0x78>
 800657a:	fb0c 3202 	mla	r2, ip, r2, r3
 800657e:	460c      	mov	r4, r1
 8006580:	2001      	movs	r0, #1
 8006582:	e7a8      	b.n	80064d6 <_vfiprintf_r+0xfe>
 8006584:	2300      	movs	r3, #0
 8006586:	3401      	adds	r4, #1
 8006588:	9305      	str	r3, [sp, #20]
 800658a:	4619      	mov	r1, r3
 800658c:	f04f 0c0a 	mov.w	ip, #10
 8006590:	4620      	mov	r0, r4
 8006592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006596:	3a30      	subs	r2, #48	@ 0x30
 8006598:	2a09      	cmp	r2, #9
 800659a:	d903      	bls.n	80065a4 <_vfiprintf_r+0x1cc>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0c6      	beq.n	800652e <_vfiprintf_r+0x156>
 80065a0:	9105      	str	r1, [sp, #20]
 80065a2:	e7c4      	b.n	800652e <_vfiprintf_r+0x156>
 80065a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80065a8:	4604      	mov	r4, r0
 80065aa:	2301      	movs	r3, #1
 80065ac:	e7f0      	b.n	8006590 <_vfiprintf_r+0x1b8>
 80065ae:	ab03      	add	r3, sp, #12
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	462a      	mov	r2, r5
 80065b4:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <_vfiprintf_r+0x228>)
 80065b6:	a904      	add	r1, sp, #16
 80065b8:	4630      	mov	r0, r6
 80065ba:	f3af 8000 	nop.w
 80065be:	4607      	mov	r7, r0
 80065c0:	1c78      	adds	r0, r7, #1
 80065c2:	d1d6      	bne.n	8006572 <_vfiprintf_r+0x19a>
 80065c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065c6:	07d9      	lsls	r1, r3, #31
 80065c8:	d405      	bmi.n	80065d6 <_vfiprintf_r+0x1fe>
 80065ca:	89ab      	ldrh	r3, [r5, #12]
 80065cc:	059a      	lsls	r2, r3, #22
 80065ce:	d402      	bmi.n	80065d6 <_vfiprintf_r+0x1fe>
 80065d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065d2:	f7ff fdaf 	bl	8006134 <__retarget_lock_release_recursive>
 80065d6:	89ab      	ldrh	r3, [r5, #12]
 80065d8:	065b      	lsls	r3, r3, #25
 80065da:	f53f af1f 	bmi.w	800641c <_vfiprintf_r+0x44>
 80065de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065e0:	e71e      	b.n	8006420 <_vfiprintf_r+0x48>
 80065e2:	ab03      	add	r3, sp, #12
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	462a      	mov	r2, r5
 80065e8:	4b05      	ldr	r3, [pc, #20]	@ (8006600 <_vfiprintf_r+0x228>)
 80065ea:	a904      	add	r1, sp, #16
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 f879 	bl	80066e4 <_printf_i>
 80065f2:	e7e4      	b.n	80065be <_vfiprintf_r+0x1e6>
 80065f4:	08006cf3 	.word	0x08006cf3
 80065f8:	08006cfd 	.word	0x08006cfd
 80065fc:	00000000 	.word	0x00000000
 8006600:	080063b3 	.word	0x080063b3
 8006604:	08006cf9 	.word	0x08006cf9

08006608 <_printf_common>:
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	4616      	mov	r6, r2
 800660e:	4698      	mov	r8, r3
 8006610:	688a      	ldr	r2, [r1, #8]
 8006612:	690b      	ldr	r3, [r1, #16]
 8006614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006618:	4293      	cmp	r3, r2
 800661a:	bfb8      	it	lt
 800661c:	4613      	movlt	r3, r2
 800661e:	6033      	str	r3, [r6, #0]
 8006620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006624:	4607      	mov	r7, r0
 8006626:	460c      	mov	r4, r1
 8006628:	b10a      	cbz	r2, 800662e <_printf_common+0x26>
 800662a:	3301      	adds	r3, #1
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	0699      	lsls	r1, r3, #26
 8006632:	bf42      	ittt	mi
 8006634:	6833      	ldrmi	r3, [r6, #0]
 8006636:	3302      	addmi	r3, #2
 8006638:	6033      	strmi	r3, [r6, #0]
 800663a:	6825      	ldr	r5, [r4, #0]
 800663c:	f015 0506 	ands.w	r5, r5, #6
 8006640:	d106      	bne.n	8006650 <_printf_common+0x48>
 8006642:	f104 0a19 	add.w	sl, r4, #25
 8006646:	68e3      	ldr	r3, [r4, #12]
 8006648:	6832      	ldr	r2, [r6, #0]
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	42ab      	cmp	r3, r5
 800664e:	dc26      	bgt.n	800669e <_printf_common+0x96>
 8006650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	3b00      	subs	r3, #0
 8006658:	bf18      	it	ne
 800665a:	2301      	movne	r3, #1
 800665c:	0692      	lsls	r2, r2, #26
 800665e:	d42b      	bmi.n	80066b8 <_printf_common+0xb0>
 8006660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006664:	4641      	mov	r1, r8
 8006666:	4638      	mov	r0, r7
 8006668:	47c8      	blx	r9
 800666a:	3001      	adds	r0, #1
 800666c:	d01e      	beq.n	80066ac <_printf_common+0xa4>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	6922      	ldr	r2, [r4, #16]
 8006672:	f003 0306 	and.w	r3, r3, #6
 8006676:	2b04      	cmp	r3, #4
 8006678:	bf02      	ittt	eq
 800667a:	68e5      	ldreq	r5, [r4, #12]
 800667c:	6833      	ldreq	r3, [r6, #0]
 800667e:	1aed      	subeq	r5, r5, r3
 8006680:	68a3      	ldr	r3, [r4, #8]
 8006682:	bf0c      	ite	eq
 8006684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006688:	2500      	movne	r5, #0
 800668a:	4293      	cmp	r3, r2
 800668c:	bfc4      	itt	gt
 800668e:	1a9b      	subgt	r3, r3, r2
 8006690:	18ed      	addgt	r5, r5, r3
 8006692:	2600      	movs	r6, #0
 8006694:	341a      	adds	r4, #26
 8006696:	42b5      	cmp	r5, r6
 8006698:	d11a      	bne.n	80066d0 <_printf_common+0xc8>
 800669a:	2000      	movs	r0, #0
 800669c:	e008      	b.n	80066b0 <_printf_common+0xa8>
 800669e:	2301      	movs	r3, #1
 80066a0:	4652      	mov	r2, sl
 80066a2:	4641      	mov	r1, r8
 80066a4:	4638      	mov	r0, r7
 80066a6:	47c8      	blx	r9
 80066a8:	3001      	adds	r0, #1
 80066aa:	d103      	bne.n	80066b4 <_printf_common+0xac>
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b4:	3501      	adds	r5, #1
 80066b6:	e7c6      	b.n	8006646 <_printf_common+0x3e>
 80066b8:	18e1      	adds	r1, r4, r3
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	2030      	movs	r0, #48	@ 0x30
 80066be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066c2:	4422      	add	r2, r4
 80066c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066cc:	3302      	adds	r3, #2
 80066ce:	e7c7      	b.n	8006660 <_printf_common+0x58>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4622      	mov	r2, r4
 80066d4:	4641      	mov	r1, r8
 80066d6:	4638      	mov	r0, r7
 80066d8:	47c8      	blx	r9
 80066da:	3001      	adds	r0, #1
 80066dc:	d0e6      	beq.n	80066ac <_printf_common+0xa4>
 80066de:	3601      	adds	r6, #1
 80066e0:	e7d9      	b.n	8006696 <_printf_common+0x8e>
	...

080066e4 <_printf_i>:
 80066e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	7e0f      	ldrb	r7, [r1, #24]
 80066ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066ec:	2f78      	cmp	r7, #120	@ 0x78
 80066ee:	4691      	mov	r9, r2
 80066f0:	4680      	mov	r8, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	469a      	mov	sl, r3
 80066f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066fa:	d807      	bhi.n	800670c <_printf_i+0x28>
 80066fc:	2f62      	cmp	r7, #98	@ 0x62
 80066fe:	d80a      	bhi.n	8006716 <_printf_i+0x32>
 8006700:	2f00      	cmp	r7, #0
 8006702:	f000 80d2 	beq.w	80068aa <_printf_i+0x1c6>
 8006706:	2f58      	cmp	r7, #88	@ 0x58
 8006708:	f000 80b9 	beq.w	800687e <_printf_i+0x19a>
 800670c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006714:	e03a      	b.n	800678c <_printf_i+0xa8>
 8006716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800671a:	2b15      	cmp	r3, #21
 800671c:	d8f6      	bhi.n	800670c <_printf_i+0x28>
 800671e:	a101      	add	r1, pc, #4	@ (adr r1, 8006724 <_printf_i+0x40>)
 8006720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006724:	0800677d 	.word	0x0800677d
 8006728:	08006791 	.word	0x08006791
 800672c:	0800670d 	.word	0x0800670d
 8006730:	0800670d 	.word	0x0800670d
 8006734:	0800670d 	.word	0x0800670d
 8006738:	0800670d 	.word	0x0800670d
 800673c:	08006791 	.word	0x08006791
 8006740:	0800670d 	.word	0x0800670d
 8006744:	0800670d 	.word	0x0800670d
 8006748:	0800670d 	.word	0x0800670d
 800674c:	0800670d 	.word	0x0800670d
 8006750:	08006891 	.word	0x08006891
 8006754:	080067bb 	.word	0x080067bb
 8006758:	0800684b 	.word	0x0800684b
 800675c:	0800670d 	.word	0x0800670d
 8006760:	0800670d 	.word	0x0800670d
 8006764:	080068b3 	.word	0x080068b3
 8006768:	0800670d 	.word	0x0800670d
 800676c:	080067bb 	.word	0x080067bb
 8006770:	0800670d 	.word	0x0800670d
 8006774:	0800670d 	.word	0x0800670d
 8006778:	08006853 	.word	0x08006853
 800677c:	6833      	ldr	r3, [r6, #0]
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6032      	str	r2, [r6, #0]
 8006784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800678c:	2301      	movs	r3, #1
 800678e:	e09d      	b.n	80068cc <_printf_i+0x1e8>
 8006790:	6833      	ldr	r3, [r6, #0]
 8006792:	6820      	ldr	r0, [r4, #0]
 8006794:	1d19      	adds	r1, r3, #4
 8006796:	6031      	str	r1, [r6, #0]
 8006798:	0606      	lsls	r6, r0, #24
 800679a:	d501      	bpl.n	80067a0 <_printf_i+0xbc>
 800679c:	681d      	ldr	r5, [r3, #0]
 800679e:	e003      	b.n	80067a8 <_printf_i+0xc4>
 80067a0:	0645      	lsls	r5, r0, #25
 80067a2:	d5fb      	bpl.n	800679c <_printf_i+0xb8>
 80067a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	da03      	bge.n	80067b4 <_printf_i+0xd0>
 80067ac:	232d      	movs	r3, #45	@ 0x2d
 80067ae:	426d      	negs	r5, r5
 80067b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067b4:	4859      	ldr	r0, [pc, #356]	@ (800691c <_printf_i+0x238>)
 80067b6:	230a      	movs	r3, #10
 80067b8:	e011      	b.n	80067de <_printf_i+0xfa>
 80067ba:	6821      	ldr	r1, [r4, #0]
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	0608      	lsls	r0, r1, #24
 80067c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80067c4:	d402      	bmi.n	80067cc <_printf_i+0xe8>
 80067c6:	0649      	lsls	r1, r1, #25
 80067c8:	bf48      	it	mi
 80067ca:	b2ad      	uxthmi	r5, r5
 80067cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80067ce:	4853      	ldr	r0, [pc, #332]	@ (800691c <_printf_i+0x238>)
 80067d0:	6033      	str	r3, [r6, #0]
 80067d2:	bf14      	ite	ne
 80067d4:	230a      	movne	r3, #10
 80067d6:	2308      	moveq	r3, #8
 80067d8:	2100      	movs	r1, #0
 80067da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067de:	6866      	ldr	r6, [r4, #4]
 80067e0:	60a6      	str	r6, [r4, #8]
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	bfa2      	ittt	ge
 80067e6:	6821      	ldrge	r1, [r4, #0]
 80067e8:	f021 0104 	bicge.w	r1, r1, #4
 80067ec:	6021      	strge	r1, [r4, #0]
 80067ee:	b90d      	cbnz	r5, 80067f4 <_printf_i+0x110>
 80067f0:	2e00      	cmp	r6, #0
 80067f2:	d04b      	beq.n	800688c <_printf_i+0x1a8>
 80067f4:	4616      	mov	r6, r2
 80067f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80067fa:	fb03 5711 	mls	r7, r3, r1, r5
 80067fe:	5dc7      	ldrb	r7, [r0, r7]
 8006800:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006804:	462f      	mov	r7, r5
 8006806:	42bb      	cmp	r3, r7
 8006808:	460d      	mov	r5, r1
 800680a:	d9f4      	bls.n	80067f6 <_printf_i+0x112>
 800680c:	2b08      	cmp	r3, #8
 800680e:	d10b      	bne.n	8006828 <_printf_i+0x144>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	07df      	lsls	r7, r3, #31
 8006814:	d508      	bpl.n	8006828 <_printf_i+0x144>
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	6861      	ldr	r1, [r4, #4]
 800681a:	4299      	cmp	r1, r3
 800681c:	bfde      	ittt	le
 800681e:	2330      	movle	r3, #48	@ 0x30
 8006820:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006824:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006828:	1b92      	subs	r2, r2, r6
 800682a:	6122      	str	r2, [r4, #16]
 800682c:	f8cd a000 	str.w	sl, [sp]
 8006830:	464b      	mov	r3, r9
 8006832:	aa03      	add	r2, sp, #12
 8006834:	4621      	mov	r1, r4
 8006836:	4640      	mov	r0, r8
 8006838:	f7ff fee6 	bl	8006608 <_printf_common>
 800683c:	3001      	adds	r0, #1
 800683e:	d14a      	bne.n	80068d6 <_printf_i+0x1f2>
 8006840:	f04f 30ff 	mov.w	r0, #4294967295
 8006844:	b004      	add	sp, #16
 8006846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f043 0320 	orr.w	r3, r3, #32
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	4833      	ldr	r0, [pc, #204]	@ (8006920 <_printf_i+0x23c>)
 8006854:	2778      	movs	r7, #120	@ 0x78
 8006856:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	6831      	ldr	r1, [r6, #0]
 800685e:	061f      	lsls	r7, r3, #24
 8006860:	f851 5b04 	ldr.w	r5, [r1], #4
 8006864:	d402      	bmi.n	800686c <_printf_i+0x188>
 8006866:	065f      	lsls	r7, r3, #25
 8006868:	bf48      	it	mi
 800686a:	b2ad      	uxthmi	r5, r5
 800686c:	6031      	str	r1, [r6, #0]
 800686e:	07d9      	lsls	r1, r3, #31
 8006870:	bf44      	itt	mi
 8006872:	f043 0320 	orrmi.w	r3, r3, #32
 8006876:	6023      	strmi	r3, [r4, #0]
 8006878:	b11d      	cbz	r5, 8006882 <_printf_i+0x19e>
 800687a:	2310      	movs	r3, #16
 800687c:	e7ac      	b.n	80067d8 <_printf_i+0xf4>
 800687e:	4827      	ldr	r0, [pc, #156]	@ (800691c <_printf_i+0x238>)
 8006880:	e7e9      	b.n	8006856 <_printf_i+0x172>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	f023 0320 	bic.w	r3, r3, #32
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	e7f6      	b.n	800687a <_printf_i+0x196>
 800688c:	4616      	mov	r6, r2
 800688e:	e7bd      	b.n	800680c <_printf_i+0x128>
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	6961      	ldr	r1, [r4, #20]
 8006896:	1d18      	adds	r0, r3, #4
 8006898:	6030      	str	r0, [r6, #0]
 800689a:	062e      	lsls	r6, r5, #24
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	d501      	bpl.n	80068a4 <_printf_i+0x1c0>
 80068a0:	6019      	str	r1, [r3, #0]
 80068a2:	e002      	b.n	80068aa <_printf_i+0x1c6>
 80068a4:	0668      	lsls	r0, r5, #25
 80068a6:	d5fb      	bpl.n	80068a0 <_printf_i+0x1bc>
 80068a8:	8019      	strh	r1, [r3, #0]
 80068aa:	2300      	movs	r3, #0
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	4616      	mov	r6, r2
 80068b0:	e7bc      	b.n	800682c <_printf_i+0x148>
 80068b2:	6833      	ldr	r3, [r6, #0]
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	6032      	str	r2, [r6, #0]
 80068b8:	681e      	ldr	r6, [r3, #0]
 80068ba:	6862      	ldr	r2, [r4, #4]
 80068bc:	2100      	movs	r1, #0
 80068be:	4630      	mov	r0, r6
 80068c0:	f7f9 fc86 	bl	80001d0 <memchr>
 80068c4:	b108      	cbz	r0, 80068ca <_printf_i+0x1e6>
 80068c6:	1b80      	subs	r0, r0, r6
 80068c8:	6060      	str	r0, [r4, #4]
 80068ca:	6863      	ldr	r3, [r4, #4]
 80068cc:	6123      	str	r3, [r4, #16]
 80068ce:	2300      	movs	r3, #0
 80068d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068d4:	e7aa      	b.n	800682c <_printf_i+0x148>
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	4632      	mov	r2, r6
 80068da:	4649      	mov	r1, r9
 80068dc:	4640      	mov	r0, r8
 80068de:	47d0      	blx	sl
 80068e0:	3001      	adds	r0, #1
 80068e2:	d0ad      	beq.n	8006840 <_printf_i+0x15c>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	079b      	lsls	r3, r3, #30
 80068e8:	d413      	bmi.n	8006912 <_printf_i+0x22e>
 80068ea:	68e0      	ldr	r0, [r4, #12]
 80068ec:	9b03      	ldr	r3, [sp, #12]
 80068ee:	4298      	cmp	r0, r3
 80068f0:	bfb8      	it	lt
 80068f2:	4618      	movlt	r0, r3
 80068f4:	e7a6      	b.n	8006844 <_printf_i+0x160>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4632      	mov	r2, r6
 80068fa:	4649      	mov	r1, r9
 80068fc:	4640      	mov	r0, r8
 80068fe:	47d0      	blx	sl
 8006900:	3001      	adds	r0, #1
 8006902:	d09d      	beq.n	8006840 <_printf_i+0x15c>
 8006904:	3501      	adds	r5, #1
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	9903      	ldr	r1, [sp, #12]
 800690a:	1a5b      	subs	r3, r3, r1
 800690c:	42ab      	cmp	r3, r5
 800690e:	dcf2      	bgt.n	80068f6 <_printf_i+0x212>
 8006910:	e7eb      	b.n	80068ea <_printf_i+0x206>
 8006912:	2500      	movs	r5, #0
 8006914:	f104 0619 	add.w	r6, r4, #25
 8006918:	e7f5      	b.n	8006906 <_printf_i+0x222>
 800691a:	bf00      	nop
 800691c:	08006d04 	.word	0x08006d04
 8006920:	08006d15 	.word	0x08006d15

08006924 <__swbuf_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	460e      	mov	r6, r1
 8006928:	4614      	mov	r4, r2
 800692a:	4605      	mov	r5, r0
 800692c:	b118      	cbz	r0, 8006936 <__swbuf_r+0x12>
 800692e:	6a03      	ldr	r3, [r0, #32]
 8006930:	b90b      	cbnz	r3, 8006936 <__swbuf_r+0x12>
 8006932:	f7ff fa9d 	bl	8005e70 <__sinit>
 8006936:	69a3      	ldr	r3, [r4, #24]
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	071a      	lsls	r2, r3, #28
 800693e:	d501      	bpl.n	8006944 <__swbuf_r+0x20>
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	b943      	cbnz	r3, 8006956 <__swbuf_r+0x32>
 8006944:	4621      	mov	r1, r4
 8006946:	4628      	mov	r0, r5
 8006948:	f000 f82a 	bl	80069a0 <__swsetup_r>
 800694c:	b118      	cbz	r0, 8006956 <__swbuf_r+0x32>
 800694e:	f04f 37ff 	mov.w	r7, #4294967295
 8006952:	4638      	mov	r0, r7
 8006954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	6922      	ldr	r2, [r4, #16]
 800695a:	1a98      	subs	r0, r3, r2
 800695c:	6963      	ldr	r3, [r4, #20]
 800695e:	b2f6      	uxtb	r6, r6
 8006960:	4283      	cmp	r3, r0
 8006962:	4637      	mov	r7, r6
 8006964:	dc05      	bgt.n	8006972 <__swbuf_r+0x4e>
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff fcd1 	bl	8006310 <_fflush_r>
 800696e:	2800      	cmp	r0, #0
 8006970:	d1ed      	bne.n	800694e <__swbuf_r+0x2a>
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	3b01      	subs	r3, #1
 8006976:	60a3      	str	r3, [r4, #8]
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	701e      	strb	r6, [r3, #0]
 8006980:	6962      	ldr	r2, [r4, #20]
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	429a      	cmp	r2, r3
 8006986:	d004      	beq.n	8006992 <__swbuf_r+0x6e>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	07db      	lsls	r3, r3, #31
 800698c:	d5e1      	bpl.n	8006952 <__swbuf_r+0x2e>
 800698e:	2e0a      	cmp	r6, #10
 8006990:	d1df      	bne.n	8006952 <__swbuf_r+0x2e>
 8006992:	4621      	mov	r1, r4
 8006994:	4628      	mov	r0, r5
 8006996:	f7ff fcbb 	bl	8006310 <_fflush_r>
 800699a:	2800      	cmp	r0, #0
 800699c:	d0d9      	beq.n	8006952 <__swbuf_r+0x2e>
 800699e:	e7d6      	b.n	800694e <__swbuf_r+0x2a>

080069a0 <__swsetup_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4b29      	ldr	r3, [pc, #164]	@ (8006a48 <__swsetup_r+0xa8>)
 80069a4:	4605      	mov	r5, r0
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	460c      	mov	r4, r1
 80069aa:	b118      	cbz	r0, 80069b4 <__swsetup_r+0x14>
 80069ac:	6a03      	ldr	r3, [r0, #32]
 80069ae:	b90b      	cbnz	r3, 80069b4 <__swsetup_r+0x14>
 80069b0:	f7ff fa5e 	bl	8005e70 <__sinit>
 80069b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b8:	0719      	lsls	r1, r3, #28
 80069ba:	d422      	bmi.n	8006a02 <__swsetup_r+0x62>
 80069bc:	06da      	lsls	r2, r3, #27
 80069be:	d407      	bmi.n	80069d0 <__swsetup_r+0x30>
 80069c0:	2209      	movs	r2, #9
 80069c2:	602a      	str	r2, [r5, #0]
 80069c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	f04f 30ff 	mov.w	r0, #4294967295
 80069ce:	e033      	b.n	8006a38 <__swsetup_r+0x98>
 80069d0:	0758      	lsls	r0, r3, #29
 80069d2:	d512      	bpl.n	80069fa <__swsetup_r+0x5a>
 80069d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069d6:	b141      	cbz	r1, 80069ea <__swsetup_r+0x4a>
 80069d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069dc:	4299      	cmp	r1, r3
 80069de:	d002      	beq.n	80069e6 <__swsetup_r+0x46>
 80069e0:	4628      	mov	r0, r5
 80069e2:	f7ff fbc7 	bl	8006174 <_free_r>
 80069e6:	2300      	movs	r3, #0
 80069e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	2300      	movs	r3, #0
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f043 0308 	orr.w	r3, r3, #8
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	b94b      	cbnz	r3, 8006a1a <__swsetup_r+0x7a>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a10:	d003      	beq.n	8006a1a <__swsetup_r+0x7a>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 f83f 	bl	8006a98 <__smakebuf_r>
 8006a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1e:	f013 0201 	ands.w	r2, r3, #1
 8006a22:	d00a      	beq.n	8006a3a <__swsetup_r+0x9a>
 8006a24:	2200      	movs	r2, #0
 8006a26:	60a2      	str	r2, [r4, #8]
 8006a28:	6962      	ldr	r2, [r4, #20]
 8006a2a:	4252      	negs	r2, r2
 8006a2c:	61a2      	str	r2, [r4, #24]
 8006a2e:	6922      	ldr	r2, [r4, #16]
 8006a30:	b942      	cbnz	r2, 8006a44 <__swsetup_r+0xa4>
 8006a32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a36:	d1c5      	bne.n	80069c4 <__swsetup_r+0x24>
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	0799      	lsls	r1, r3, #30
 8006a3c:	bf58      	it	pl
 8006a3e:	6962      	ldrpl	r2, [r4, #20]
 8006a40:	60a2      	str	r2, [r4, #8]
 8006a42:	e7f4      	b.n	8006a2e <__swsetup_r+0x8e>
 8006a44:	2000      	movs	r0, #0
 8006a46:	e7f7      	b.n	8006a38 <__swsetup_r+0x98>
 8006a48:	20000018 	.word	0x20000018

08006a4c <__swhatbuf_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	460c      	mov	r4, r1
 8006a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a54:	2900      	cmp	r1, #0
 8006a56:	b096      	sub	sp, #88	@ 0x58
 8006a58:	4615      	mov	r5, r2
 8006a5a:	461e      	mov	r6, r3
 8006a5c:	da0d      	bge.n	8006a7a <__swhatbuf_r+0x2e>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a64:	f04f 0100 	mov.w	r1, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2340      	movne	r3, #64	@ 0x40
 8006a6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a70:	2000      	movs	r0, #0
 8006a72:	6031      	str	r1, [r6, #0]
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	b016      	add	sp, #88	@ 0x58
 8006a78:	bd70      	pop	{r4, r5, r6, pc}
 8006a7a:	466a      	mov	r2, sp
 8006a7c:	f000 f848 	bl	8006b10 <_fstat_r>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	dbec      	blt.n	8006a5e <__swhatbuf_r+0x12>
 8006a84:	9901      	ldr	r1, [sp, #4]
 8006a86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a8e:	4259      	negs	r1, r3
 8006a90:	4159      	adcs	r1, r3
 8006a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a96:	e7eb      	b.n	8006a70 <__swhatbuf_r+0x24>

08006a98 <__smakebuf_r>:
 8006a98:	898b      	ldrh	r3, [r1, #12]
 8006a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9c:	079d      	lsls	r5, r3, #30
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d507      	bpl.n	8006ab4 <__smakebuf_r+0x1c>
 8006aa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	2301      	movs	r3, #1
 8006aae:	6163      	str	r3, [r4, #20]
 8006ab0:	b003      	add	sp, #12
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab4:	ab01      	add	r3, sp, #4
 8006ab6:	466a      	mov	r2, sp
 8006ab8:	f7ff ffc8 	bl	8006a4c <__swhatbuf_r>
 8006abc:	9f00      	ldr	r7, [sp, #0]
 8006abe:	4605      	mov	r5, r0
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff f850 	bl	8005b68 <_malloc_r>
 8006ac8:	b948      	cbnz	r0, 8006ade <__smakebuf_r+0x46>
 8006aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ace:	059a      	lsls	r2, r3, #22
 8006ad0:	d4ee      	bmi.n	8006ab0 <__smakebuf_r+0x18>
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	e7e2      	b.n	8006aa4 <__smakebuf_r+0xc>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	6020      	str	r0, [r4, #0]
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006aee:	b15b      	cbz	r3, 8006b08 <__smakebuf_r+0x70>
 8006af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 f81d 	bl	8006b34 <_isatty_r>
 8006afa:	b128      	cbz	r0, 8006b08 <__smakebuf_r+0x70>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	431d      	orrs	r5, r3
 8006b0c:	81a5      	strh	r5, [r4, #12]
 8006b0e:	e7cf      	b.n	8006ab0 <__smakebuf_r+0x18>

08006b10 <_fstat_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	@ (8006b30 <_fstat_r+0x20>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fa fcda 	bl	80014d6 <_fstat>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_fstat_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_fstat_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	2000022c 	.word	0x2000022c

08006b34 <_isatty_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	@ (8006b50 <_isatty_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fa fcd9 	bl	80014f6 <_isatty>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_isatty_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_isatty_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	2000022c 	.word	0x2000022c

08006b54 <_init>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr

08006b60 <_fini>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr
